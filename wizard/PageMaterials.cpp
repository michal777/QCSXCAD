#include "PageMaterials.h"


PageMaterials::PageMaterials(QWizard *parent, QCSXCAD *wizardsparent, VariablesEditor *var_edit_main): QWizardPage(parent)
{
    wizardsparent_tmp = wizardsparent;
    parent_tmp = (WizardInit*)parent;

    QVector<property_parameters *> *materials_param_list = new QVector<property_parameters *>;
    properties_list_ptr = materials_param_list;
    var_edit = var_edit_main;

    MaterialSelectLayout();
    MaterialListLayout();

    MaterialSettings();
    MetalSettings();

    stackedLayout = new QStackedLayout;
    stackedLayout->addWidget(groupbox_material_settings);
    stackedLayout->addWidget(groupbox_metal_settings);

    main_layout_property = new QHBoxLayout;
    main_layout_property->addWidget(property_select_groupbox);
    main_layout_property->addLayout(stackedLayout);
    main_layout_property->addWidget(property_list_groupbox);

    setLayout(main_layout_property);
}


bool PageMaterials::validatePage()
{
    SaveToSimScriptBuffer();
    SaveSettings();
    return true;
}


void PageMaterials::SaveToSimScriptBuffer(void)
{
    text_save_to_simscript.clear();
    text_save_to_simscript.append("##<OUTPUT_AUTOGENERATED_PageMaterials>##\n");

    for(int i_mat = 0; i_mat < properties_list_ptr->count(); ++i_mat)
    {
        if(properties_list_ptr->at(i_mat)->type == "material")
        {
            material_parameters *material_tmp = (material_parameters *)(properties_list_ptr->at(i_mat));

            text_save_to_simscript.append(QString("CSX = AddMaterial(CSX, '%1');\n").arg(material_tmp->name));

            if(material_tmp->epsilon != "" || material_tmp->mue != "" || material_tmp->kappa != "" || material_tmp->sigma != "")
            {
                text_save_to_simscript.append(QString("CSX = SetMaterialProperty(CSX, '%1'").arg(material_tmp->name));
                if(material_tmp->epsilon != "")
                    text_save_to_simscript.append(QString(", 'Epsilon', %1").arg(material_tmp->epsilon));
                if(material_tmp->mue != "")
                    text_save_to_simscript.append(QString(", 'Mue', %1").arg(material_tmp->mue));
                if(material_tmp->kappa != "")
                    text_save_to_simscript.append(QString(", 'Kappa', %1").arg(material_tmp->kappa));
                if(material_tmp->sigma != "")
                    text_save_to_simscript.append(QString(", 'Sigma', %1").arg(material_tmp->sigma));
                text_save_to_simscript.append(QString(");\n").arg(material_tmp->sigma));
            }
        }
        else if(properties_list_ptr->at(i_mat)->type == "metal")
        {
            metal_parameters *metal_tmp = (metal_parameters *)(properties_list_ptr->at(i_mat));

            if(metal_tmp->conductivity == "" || metal_tmp->thickness == "")
                text_save_to_simscript.append(QString("CSX = AddMetal(CSX, '%1');\n").arg(metal_tmp->name));
            else
                text_save_to_simscript.append(QString("CSX = AddConductingSheet(CSX, '%1', %2, %3);\n").arg(metal_tmp->name).arg(metal_tmp->conductivity).arg(metal_tmp->thickness));
        }
    }

    text_save_to_simscript.append("##<END_OUTPUT_AUTOGENERATED_PageMaterials>##\n");

    qDebug("%s", qUtf8Printable(text_save_to_simscript));
}


void PageMaterials::ReadFromSimScriptBuffer(void)
{

}

void PageMaterials::LoadSettings()
{
    for(int i_loadset = 0; "" != parent_tmp->wizard_settings->value(QString("PageMaterials_name%1").arg(i_loadset), "").toString(); ++i_loadset)
    {
        if("material" == parent_tmp->wizard_settings->value(QString("PageMaterials_type%1").arg(i_loadset), "").toString())
        {
            rad_but_type_material->setChecked(true);
            material_name->setText(parent_tmp->wizard_settings->value(QString("PageMaterials_name%1").arg(i_loadset), "").toString());
            material_epsilon->setText(parent_tmp->wizard_settings->value(QString("PageMaterials_epsilon%1").arg(i_loadset), "").toString());
            material_mue->setText(parent_tmp->wizard_settings->value(QString("PageMaterials_mue%1").arg(i_loadset), "").toString());
            material_kappa->setText(parent_tmp->wizard_settings->value(QString("PageMaterials_kappa%1").arg(i_loadset), "").toString());
            material_sigma->setText(parent_tmp->wizard_settings->value(QString("PageMaterials_sigma%1").arg(i_loadset), "").toString());
        }
        else if("metal" == parent_tmp->wizard_settings->value(QString("PageMaterials_type%1").arg(i_loadset), "").toString())
        {
            rad_but_type_metal->setChecked(true);
            metal_name->setText(parent_tmp->wizard_settings->value(QString("PageMaterials_name%1").arg(i_loadset), "").toString());
            metal_conductivity->setText(parent_tmp->wizard_settings->value(QString("PageMaterials_conductivity%1").arg(i_loadset), "").toString());
            metal_thickness->setText(parent_tmp->wizard_settings->value(QString("PageMaterials_thickness%1").arg(i_loadset), "").toString());
        }
        OnAddOrChangeMaterial();
    }
}

void PageMaterials::SaveSettings()
{
    //first clear old material names (for proper loading of settings later)
    for(int i_clearset = 0; "" != parent_tmp->wizard_settings->value(QString("PageMaterials_name%1").arg(i_clearset), "").toString(); ++i_clearset)
        parent_tmp->wizard_settings->remove(QString("PageMaterials_name%1").arg(i_clearset));

    material_parameters *material_tmp_ptr;
    metal_parameters *metal_tmp_ptr;

    for(int i_saveset = 0; i_saveset < properties_list_ptr->count(); ++i_saveset)
    {
        if(!QString::compare(properties_list_ptr->at(i_saveset)->type, "material"))
        {
            material_tmp_ptr = (material_parameters *)(properties_list_ptr->at(i_saveset));
            parent_tmp->wizard_settings->setValue(QString("PageMaterials_type%1").arg(i_saveset), "material");
            parent_tmp->wizard_settings->setValue(QString("PageMaterials_name%1").arg(i_saveset), material_tmp_ptr->name);
            parent_tmp->wizard_settings->setValue(QString("PageMaterials_epsilon%1").arg(i_saveset), material_tmp_ptr->epsilon);
            parent_tmp->wizard_settings->setValue(QString("PageMaterials_mue%1").arg(i_saveset), material_tmp_ptr->mue);
            parent_tmp->wizard_settings->setValue(QString("PageMaterials_kappa%1").arg(i_saveset), material_tmp_ptr->kappa);
            parent_tmp->wizard_settings->setValue(QString("PageMaterials_sigma%1").arg(i_saveset), material_tmp_ptr->sigma);
        }
        else if(!QString::compare(properties_list_ptr->at(i_saveset)->type, "metal"))
        {
            metal_tmp_ptr = (metal_parameters *)(properties_list_ptr->at(i_saveset));
            parent_tmp->wizard_settings->setValue(QString("PageMaterials_type%1").arg(i_saveset), "metal");
            parent_tmp->wizard_settings->setValue(QString("PageMaterials_name%1").arg(i_saveset), metal_tmp_ptr->name);
            parent_tmp->wizard_settings->setValue(QString("PageMaterials_conductivity%1").arg(i_saveset), metal_tmp_ptr->conductivity);
            parent_tmp->wizard_settings->setValue(QString("PageMaterials_thickness%1").arg(i_saveset), metal_tmp_ptr->thickness);
        }
    }
}


void PageMaterials::initializePage()
{
    LoadSettings();
}


void PageMaterials::UploadMaterialsToViewer(void)
{
    if(rad_but_type_material->isChecked())
    {
        CSPropMaterial *new_material = new CSPropMaterial(wizardsparent_tmp->clParaSet);
        new_material->SetName(material_name->text().toStdString());
        wizardsparent_tmp->AddProperty(new_material);
        wizardsparent_tmp->CSTree->AddPropItem(new_material);
    }
    else if(rad_but_type_metal->isChecked())
    {
        CSPropMetal *new_metal = new CSPropMetal(wizardsparent_tmp->clParaSet);
        new_metal->SetName(metal_name->text().toStdString());
        wizardsparent_tmp->AddProperty(new_metal);
        wizardsparent_tmp->CSTree->AddPropItem(new_metal);
    }
}

void PageMaterials::RemoveMaterialsFromViewer(void)
{
    std::string name_tmp = properties_list_ptr->at(properties_list_widget->currentRow())->name.toStdString();
    std::vector<CSProperties*> prop_vec_tmp = wizardsparent_tmp->GetPropertiesByName(name_tmp);
    CSProperties* prop_tmp = prop_vec_tmp.at(0);

    wizardsparent_tmp->CSTree->DeletePropItem(prop_tmp);
    wizardsparent_tmp->DeleteProperty(prop_tmp);
    wizardsparent_tmp->setModified();
}


void PageMaterials::MaterialSelectLayout(void)
{
    property_select_groupbox = new QGroupBox(tr("Select material type"));
    QGridLayout *grid_layout_select_material = new QGridLayout;

    rad_but_type_material = new QRadioButton("material", this);
    rad_but_type_metal = new QRadioButton("metal", this);
    connect(rad_but_type_material, SIGNAL(clicked()), this, SLOT(OnSetMaterialTypeLayout()));
    connect(rad_but_type_metal, SIGNAL(clicked()), this, SLOT(OnSetMaterialTypeLayout()));
    rad_but_type_material->setChecked(true);

    grid_layout_select_material->addWidget(rad_but_type_material, 0, 0, Qt::AlignLeft);
    grid_layout_select_material->addWidget(rad_but_type_metal, 1, 0, Qt::AlignLeft);

    property_select_groupbox->setLayout(grid_layout_select_material);
}

void PageMaterials::MaterialListLayout(void)
{
    property_list_groupbox = new QGroupBox(tr("Materials list"));
    QGridLayout *grid_layout_material_list = new QGridLayout;

    properties_list_widget = new QListWidget(this);
    connect(properties_list_widget, SIGNAL(itemClicked(QListWidgetItem*)), this, SLOT(OnGetSelectedMaterial(QListWidgetItem*)));

    QPushButton *button_add_edit_material = new QPushButton("New/Edit", this);
    connect(button_add_edit_material, SIGNAL(released()), this, SLOT(OnAddOrChangeMaterial()));
    QPushButton *button_remove_material = new QPushButton("Remove", this);
    connect(button_remove_material, SIGNAL(released()), this, SLOT(OnRemoveMaterial()));

    grid_layout_material_list->addWidget(button_add_edit_material, 8, 0, Qt::AlignLeft);
    grid_layout_material_list->addWidget(button_remove_material, 8, 1, Qt::AlignLeft);
    grid_layout_material_list->addWidget(properties_list_widget, 0, 0, 7, 2, Qt::AlignLeft);

    property_list_groupbox->setLayout(grid_layout_material_list);
}



void PageMaterials::MaterialSettings(void)
{
    groupbox_material_settings = new QGroupBox(tr("Material settings"));
    QGridLayout *grid_layout_material_params = new QGridLayout;

    QLabel *statictext_name = new QLabel("name", this);
    material_name = new QLineEdit(this);
    QLabel *statictext_epsilon = new QLabel("epsilon", this);
    material_epsilon = new QLineEdit(this);
    QLabel *statictext_mue = new QLabel("mue", this);
    material_mue = new QLineEdit(this);
    QLabel *statictext_kappa = new QLabel("kappa", this);
    material_kappa = new QLineEdit(this);
    QLabel *statictext_sigma = new QLabel("sigma", this);
    material_sigma = new QLineEdit(this);

    grid_layout_material_params->addWidget(statictext_name, 1, 0, Qt::AlignRight);
    grid_layout_material_params->addWidget(statictext_epsilon, 2, 0, Qt::AlignRight);
    grid_layout_material_params->addWidget(statictext_mue, 3, 0, Qt::AlignRight);
    grid_layout_material_params->addWidget(statictext_kappa, 4, 0, Qt::AlignRight);
    grid_layout_material_params->addWidget(statictext_sigma, 5, 0, Qt::AlignRight);

    grid_layout_material_params->addWidget(material_name, 1, 1, Qt::AlignRight);
    grid_layout_material_params->addWidget(material_epsilon, 2, 1, Qt::AlignRight);
    grid_layout_material_params->addWidget(material_mue, 3, 1, Qt::AlignRight);
    grid_layout_material_params->addWidget(material_kappa, 4, 1, Qt::AlignRight);
    grid_layout_material_params->addWidget(material_sigma, 5, 1, Qt::AlignRight);

    connect(material_name, SIGNAL(editingFinished()), this, SLOT(OnSetMaterialTypeLayout()));
    groupbox_material_settings->setLayout(grid_layout_material_params);
}


void PageMaterials::MetalSettings(void)
{
    groupbox_metal_settings = new QGroupBox(tr("Metal settings"));
    QGridLayout *grid_layout_metal_params = new QGridLayout;

    QLabel *statictext_name = new QLabel("name", this);
    metal_name = new QLineEdit(this);
    QLabel *statictext_conductivity = new QLabel("conductivity", this);
    metal_conductivity = new QLineEdit(this);
    QLabel *statictext_thickness = new QLabel("thickness", this);
    metal_thickness = new QLineEdit(this);

    grid_layout_metal_params->addWidget(statictext_name, 1, 0, Qt::AlignRight);
    grid_layout_metal_params->addWidget(statictext_conductivity, 6, 0, Qt::AlignRight);
    grid_layout_metal_params->addWidget(statictext_thickness, 7, 0, Qt::AlignRight);

    grid_layout_metal_params->addWidget(metal_name, 1, 1, Qt::AlignRight);
    grid_layout_metal_params->addWidget(metal_conductivity, 6, 1, Qt::AlignRight);
    grid_layout_metal_params->addWidget(metal_thickness, 7, 1, Qt::AlignRight);

    connect(metal_name, SIGNAL(editingFinished()), this, SLOT(OnSetMaterialTypeLayout()));
    groupbox_metal_settings->setLayout(grid_layout_metal_params);
}


void PageMaterials::OnAddOrChangeMaterial(void)
{
    property_parameters *property_ptr;
    if(rad_but_type_material->isChecked())
    {
        material_parameters *material_tmp_ptr = new material_parameters;
        material_tmp_ptr->name = material_name->text();
        material_tmp_ptr->type = "material";
        material_tmp_ptr->epsilon = material_epsilon->text();
        material_tmp_ptr->mue = material_mue->text();
        material_tmp_ptr->kappa = material_kappa->text();
        material_tmp_ptr->sigma = material_sigma->text();
        property_ptr = material_tmp_ptr;
    }
    else if(rad_but_type_metal->isChecked())
    {
        metal_parameters *metal_tmp_ptr = new metal_parameters;
        metal_tmp_ptr->name = metal_name->text();
        metal_tmp_ptr->type = "metal";
        metal_tmp_ptr->conductivity = metal_conductivity->text();
        metal_tmp_ptr->thickness = metal_thickness->text();
        property_ptr = metal_tmp_ptr;
    }

    if(!property_ptr->name.isEmpty())
    {
        if(properties_list_ptr->empty() || properties_list_ptr->at(properties_list_widget->currentRow())->name != property_ptr->name)
        {
            properties_list_ptr->push_back(property_ptr);
            properties_list_widget->addItem(properties_list_ptr->at(properties_list_ptr->size()-1)->name);
            properties_list_widget->setCurrentRow(properties_list_widget->count()-1);
            UploadMaterialsToViewer();
        }
        else if(properties_list_ptr->at(properties_list_widget->currentRow())->name == property_ptr->name)
        {
            properties_list_ptr->replace(properties_list_widget->currentRow(), property_ptr);
//            UploadMaterialsToViewer();
        }
    }
}



void PageMaterials::OnRemoveMaterial(void)
{
    if(!properties_list_ptr->empty())
    {
        RemoveMaterialsFromViewer();
        properties_list_ptr->remove(properties_list_widget->currentRow());
        properties_list_widget->takeItem(properties_list_widget->currentRow());
    }
}


void PageMaterials::OnGetSelectedMaterial(QListWidgetItem* item)
{
    property_parameters *property_ptr;
    property_ptr = properties_list_ptr->at(properties_list_widget->currentRow());

    if(!QString::compare(property_ptr->type, "material"))
    {
        material_parameters *material_tmp_ptr = (material_parameters *)(property_ptr);
        rad_but_type_material->setChecked(true);
        material_name->setText(material_tmp_ptr->name);
        material_epsilon->setText(material_tmp_ptr->epsilon);
        material_mue->setText(material_tmp_ptr->mue);
        material_kappa->setText(material_tmp_ptr->kappa);
        material_sigma->setText(material_tmp_ptr->sigma);
    }
    else if(!QString::compare(property_ptr->type, "metal"))
    {
        metal_parameters *metal_tmp_ptr = (metal_parameters *)(property_ptr);
        rad_but_type_metal->setChecked(true);
        metal_name->setText(metal_tmp_ptr->name);
        metal_conductivity->setText(metal_tmp_ptr->conductivity);
        metal_thickness->setText(metal_tmp_ptr->thickness);
    }
    OnSetMaterialTypeLayout();
}


void PageMaterials::OnSetMaterialTypeLayout(void)
{
    if(rad_but_type_material->isChecked())
    {
        stackedLayout->setCurrentIndex(0);
        for(int i = 0 ; i < properties_list_widget->count(); ++i)
            if(properties_list_widget->item(i)->text() == material_name->text())
                properties_list_widget->setCurrentRow(i);
    }
    else if(rad_but_type_metal->isChecked())
    {
        stackedLayout->setCurrentIndex(1);
        for(int i = 0 ; i < properties_list_widget->count(); ++i)
            if(properties_list_widget->item(i)->text() == metal_name->text())
                properties_list_widget->setCurrentRow(i);
    }
}
