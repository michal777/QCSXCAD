#include "PageGeometry.h"

PageGeometry::PageGeometry(QWizard *parent, QCSXCAD *wizardsparent, VariablesEditor *var_edit_main): QWizardPage(parent)
{
    wizardsparent_tmp = wizardsparent;
    parent_tmp = (WizardInit*)parent;

    QVector<shape_parameters *> *shapes_param_list = new QVector<shape_parameters *>;
    shapes_param_list_ptr = shapes_param_list;
    var_edit = var_edit_main;

    ShapeSelectLayout();
    ShapeListLayout();
    ShapeTransformsLayout();

    ShapeBoxSettings();
    ShapeSphereSettings();
    ShapeSphericalshellSettings();
    ShapeCylinderSettings();
    ShapeCylindricalshellSettings();
    ShapeCurveSettings();
    ShapeWireSettings();
    ShapePolygonSettings();
    ShapeExtrudedPolygonSettings();
    ShapeRotationalPolygonSettings();
    ShapePolyhedronSettings();
    ShapeSTLfileSettings();

    stackedLayout = new QStackedLayout;
    stackedLayout->addWidget(groupbox_box_settings);
    stackedLayout->addWidget(groupbox_sphere_settings);
    stackedLayout->addWidget(groupbox_sphericalshell_settings);
    stackedLayout->addWidget(groupbox_cylinder_settings);
    stackedLayout->addWidget(groupbox_cylindricalshell_settings);
    stackedLayout->addWidget(groupbox_curve_settings);
    stackedLayout->addWidget(groupbox_wire_settings);
    stackedLayout->addWidget(groupbox_polygon_settings);
    stackedLayout->addWidget(groupbox_extrudedpolygon_settings);
    stackedLayout->addWidget(groupbox_rotationalpolygon_settings);
    stackedLayout->addWidget(groupbox_polyhedron_settings);
    stackedLayout->addWidget(groupbox_stlfile_settings);

    main_layout_shapes = new QHBoxLayout;
    main_layout_shapes->addWidget(shape_select_groupbox);
    main_layout_shapes->addLayout(stackedLayout);
    main_layout_shapes->addWidget(shape_list_groupbox);
    main_layout_shapes->addWidget(transforms_groupbox);

    setLayout(main_layout_shapes);
}


bool PageGeometry::validatePage()
{
    SaveToSimScriptBuffer();
    SaveSettings();
    return true;
}


void PageGeometry::SaveToSimScriptBuffer(void)
{
    text_save_to_simscript.clear();
    text_save_to_simscript.append("##<OUTPUT_AUTOGENERATED_PageGeometry>##\n");

    for(int i_sh = 0; i_sh < shapes_param_list_ptr->count(); ++i_sh)
    {
        //print functions defining shapes to the test script
        if(shapes_param_list_ptr->at(i_sh)->type == "box")
        {
            shape_box_parameters *shape_box = (shape_box_parameters *)(shapes_param_list_ptr->at(i_sh));
            text_save_to_simscript.append(QString("CSX = AddBox(CSX, '%1', %2, ").arg(shape_box->material).arg(EvaluateVar(shape_box->priority)));
            text_save_to_simscript.append(QString("[%1 %2 %3], ").arg(EvaluateVar(shape_box->x_coord_1)).arg(EvaluateVar(shape_box->y_coord_1)).arg(EvaluateVar(shape_box->z_coord_1)));
            text_save_to_simscript.append(QString("[%1 %2 %3]").arg(EvaluateVar(shape_box->x_coord_2)).arg(EvaluateVar(shape_box->y_coord_2)).arg(EvaluateVar(shape_box->z_coord_2)));
        }
        else if(shapes_param_list_ptr->at(i_sh)->type == "sphere")
        {
            shape_sphere_parameters *shape_sphere = (shape_sphere_parameters *)(shapes_param_list_ptr->at(i_sh));
            text_save_to_simscript.append(QString("CSX = AddSphere(CSX, '%1', %2, ").arg(shape_sphere->material).arg(EvaluateVar(shape_sphere->priority)));
            text_save_to_simscript.append(QString("[%1 %2 %3], ").arg(EvaluateVar(shape_sphere->x_coord)).arg(EvaluateVar(shape_sphere->y_coord)).arg(EvaluateVar(shape_sphere->z_coord)));
            text_save_to_simscript.append(QString("%1").arg(EvaluateVar(shape_sphere->radius)));
        }
        else if(shapes_param_list_ptr->at(i_sh)->type == "sphericalshell")
        {
            shape_sphericalshell_parameters *shape_sphericalshell = (shape_sphericalshell_parameters *)(shapes_param_list_ptr->at(i_sh));
            text_save_to_simscript.append(QString("CSX = AddSphericalShell(CSX, '%1', %2, ").arg(shape_sphericalshell->material).arg(EvaluateVar(shape_sphericalshell->priority)));
            text_save_to_simscript.append(QString("[%1 %2 %3], ").arg(EvaluateVar(shape_sphericalshell->x_coord)).arg(EvaluateVar(shape_sphericalshell->y_coord)).arg(EvaluateVar(shape_sphericalshell->z_coord)));
            text_save_to_simscript.append(QString("%1, %2").arg((EvaluateVar(shape_sphericalshell->radius_outer)+EvaluateVar(shape_sphericalshell->radius_inner))/2).arg(EvaluateVar(shape_sphericalshell->radius_outer)-EvaluateVar(shape_sphericalshell->radius_inner)));
        }
        else if(shapes_param_list_ptr->at(i_sh)->type == "cylinder")
        {
            shape_cylinder_parameters *shape_cylinder = (shape_cylinder_parameters *)(shapes_param_list_ptr->at(i_sh));
            text_save_to_simscript.append(QString("CSX = AddCylinder(CSX, '%1', %2, ").arg(shape_cylinder->material).arg(EvaluateVar(shape_cylinder->priority)));
            text_save_to_simscript.append(QString("[%1 %2 %3], ").arg(EvaluateVar(shape_cylinder->x_coord_1)).arg(EvaluateVar(shape_cylinder->y_coord_1)).arg(EvaluateVar(shape_cylinder->z_coord_1)));
            text_save_to_simscript.append(QString("[%1 %2 %3], ").arg(EvaluateVar(shape_cylinder->x_coord_2)).arg(EvaluateVar(shape_cylinder->y_coord_2)).arg(EvaluateVar(shape_cylinder->z_coord_2)));
            text_save_to_simscript.append(QString("%1").arg(EvaluateVar(shape_cylinder->radius)));
        }
        else if(shapes_param_list_ptr->at(i_sh)->type == "cylindricalshell")
        {
            shape_cylindricalshell_parameters *shape_cylindricalshell = (shape_cylindricalshell_parameters *)(shapes_param_list_ptr->at(i_sh));

            text_save_to_simscript.append(QString("CSX = AddCylindricalShell(CSX, '%1', %2, ").arg(shape_cylindricalshell->material).arg(EvaluateVar(shape_cylindricalshell->priority)));
            text_save_to_simscript.append(QString("[%1 %2 %3], ").arg(EvaluateVar(shape_cylindricalshell->x_coord_1)).arg(EvaluateVar(shape_cylindricalshell->y_coord_1)).arg(EvaluateVar(shape_cylindricalshell->z_coord_1)));
            text_save_to_simscript.append(QString("[%1 %2 %3], ").arg(EvaluateVar(shape_cylindricalshell->x_coord_2)).arg(EvaluateVar(shape_cylindricalshell->y_coord_2)).arg(EvaluateVar(shape_cylindricalshell->z_coord_2)));
            text_save_to_simscript.append(QString("%1, %2").arg((EvaluateVar(shape_cylindricalshell->radius_outer)+EvaluateVar(shape_cylindricalshell->radius_inner))/2).arg(EvaluateVar(shape_cylindricalshell->radius_outer)-EvaluateVar(shape_cylindricalshell->radius_inner)));
        }
        else if(shapes_param_list_ptr->at(i_sh)->type == "curve")
        {
            shape_curve_parameters *shape_curve = (shape_curve_parameters *)(shapes_param_list_ptr->at(i_sh));

            for(int i_pcpy = 0; i_pcpy < shape_curve->points_x.size() && i_pcpy < shape_curve->points_y.size() && i_pcpy < shape_curve->points_z.size(); ++i_pcpy)
                text_save_to_simscript.append(QString("points(1, %1) = %2; points(2, %1) = %3; points(3, %1) = %4;\n").arg(i_pcpy).arg(EvaluateVar(shape_curve->points_x[i_pcpy])).arg(EvaluateVar(shape_curve->points_y[i_pcpy])).arg(EvaluateVar(shape_curve->points_z[i_pcpy])));
            text_save_to_simscript.append(QString("CSX = AddCurve(CSX, '%1', %2, points").arg(shape_curve->material).arg(EvaluateVar(shape_curve->priority)));
        }
        else if(shapes_param_list_ptr->at(i_sh)->type == "wire")
        {
            shape_wire_parameters *shape_wire = (shape_wire_parameters *)(shapes_param_list_ptr->at(i_sh));

            for(int i_pcpy = 0; i_pcpy < shape_wire->points_x.size() && i_pcpy < shape_wire->points_y.size() && i_pcpy < shape_wire->points_z.size(); ++i_pcpy)
                text_save_to_simscript.append(QString("points(1, %1) = %2; points(2, %1) = %3; points(3, %1) = %4;\n").arg(i_pcpy).arg(EvaluateVar(shape_wire->points_x[i_pcpy])).arg(EvaluateVar(shape_wire->points_y[i_pcpy])).arg(EvaluateVar(shape_wire->points_z[i_pcpy])));
            text_save_to_simscript.append(QString("CSX = AddWire(CSX, '%1', %2, points, %3").arg(shape_wire->material).arg(EvaluateVar(shape_wire->priority)).arg(EvaluateVar(shape_wire->radius)));
        }
        else if(shapes_param_list_ptr->at(i_sh)->type == "polygon")
        {
            shape_polygon_parameters *shape_polygon = (shape_polygon_parameters *)(shapes_param_list_ptr->at(i_sh));

            for(int i_pcpy = 0; i_pcpy < shape_polygon->points_x.size() && i_pcpy < shape_polygon->points_y.size(); ++i_pcpy)
                text_save_to_simscript.append(QString("points(1, %1) = %2; points(2, %1) = %3;\n").arg(i_pcpy).arg(EvaluateVar(shape_polygon->points_x[i_pcpy])).arg(EvaluateVar(shape_polygon->points_y[i_pcpy])));
            text_save_to_simscript.append(QString("CSX = AddPolygon(CSX, '%1', %2, %3, %4, points").arg(shape_polygon->material).arg(EvaluateVar(shape_polygon->priority)).arg(shape_polygon->normal_dir).arg(EvaluateVar(shape_polygon->elevation)));
        }
        else if(shapes_param_list_ptr->at(i_sh)->type == "extrudedpolygon")
        {
            shape_extrudedpolygon_parameters *shape_extrudedpolygon = (shape_extrudedpolygon_parameters *)(shapes_param_list_ptr->at(i_sh));

            for(int i_pcpy = 0; i_pcpy < shape_extrudedpolygon->points_x.size() && i_pcpy < shape_extrudedpolygon->points_y.size(); ++i_pcpy)
                text_save_to_simscript.append(QString("points(1, %1) = %2; points(2, %1) = %3;\n").arg(i_pcpy).arg(EvaluateVar(shape_extrudedpolygon->points_x[i_pcpy])).arg(EvaluateVar(shape_extrudedpolygon->points_y[i_pcpy])));
            text_save_to_simscript.append(QString("CSX = AddLinPoly(CSX, '%1', %2, %3, %4, points, %5").arg(shape_extrudedpolygon->material).arg(EvaluateVar(shape_extrudedpolygon->priority)).arg(shape_extrudedpolygon->normal_dir).arg(EvaluateVar(shape_extrudedpolygon->elevation)).arg(EvaluateVar(shape_extrudedpolygon->length)));
        }
        else if(shapes_param_list_ptr->at(i_sh)->type == "rotationalpolygon")
        {
            shape_rotationalpolygon_parameters *shape_rotationalpolygon = (shape_rotationalpolygon_parameters *)(shapes_param_list_ptr->at(i_sh));

            for(int i_pcpy = 0; i_pcpy < shape_rotationalpolygon->points_x.size() && i_pcpy < shape_rotationalpolygon->points_y.size(); ++i_pcpy)
                text_save_to_simscript.append(QString("points(1, %1) = %2; points(2, %1) = %3;\n").arg(i_pcpy).arg(EvaluateVar(shape_rotationalpolygon->points_x[i_pcpy])).arg(EvaluateVar(shape_rotationalpolygon->points_y[i_pcpy])));
            text_save_to_simscript.append(QString("CSX = AddRotPoly(CSX, '%1', %2, %3, points, %4, [%5 %6]").arg(shape_rotationalpolygon->material).arg(EvaluateVar(shape_rotationalpolygon->priority)).arg(shape_rotationalpolygon->normal_dir).arg(EvaluateVar(shape_rotationalpolygon->rot_axis_dir)).arg(EvaluateVar(shape_rotationalpolygon->angle1)).arg(EvaluateVar(shape_rotationalpolygon->angle2)));
        }
        else if(shapes_param_list_ptr->at(i_sh)->type == "polyhedron")
        {
            shape_polyhedron_parameters *shape_polyhedron = (shape_polyhedron_parameters *)(shapes_param_list_ptr->at(i_sh));

            for(int i_pcpy = 0; i_pcpy < shape_polyhedron->vertices_x.size() && i_pcpy < shape_polyhedron->vertices_y.size() && i_pcpy < shape_polyhedron->vertices_z.size(); ++i_pcpy)
            {
                text_save_to_simscript.append(QString("vertices{%1} = [%2 %3 %4];\n").arg(i_pcpy).arg(EvaluateVar(shape_polyhedron->vertices_x[i_pcpy])).arg(EvaluateVar(shape_polyhedron->vertices_y[i_pcpy])).arg(EvaluateVar(shape_polyhedron->vertices_z[i_pcpy])));
                text_save_to_simscript.append(QString("faces{%1} = [%2 %3 %4];\n").arg(i_pcpy).arg(EvaluateVar(shape_polyhedron->faces_x[i_pcpy])).arg(EvaluateVar(shape_polyhedron->faces_y[i_pcpy])).arg(EvaluateVar(shape_polyhedron->faces_z[i_pcpy])));
            }
            text_save_to_simscript.append(QString("CSX = AddPolyhedron(CSX, '%1', %2, vertices, faces").arg(shape_polyhedron->material).arg(EvaluateVar(shape_polyhedron->priority)));
        }
        else if(shapes_param_list_ptr->at(i_sh)->type == "stlfile")
        {
            shape_stlfile_parameters *shape_stlfile = (shape_stlfile_parameters *)(shapes_param_list_ptr->at(i_sh));

            text_save_to_simscript.append(QString("CSX = ImportSTL(CSX, '%1', %2, '%3'").arg(shape_stlfile->material).arg(EvaluateVar(shape_stlfile->priority)).arg(shape_stlfile->path));
        }

        //print transforms, do it the same way for any type of the shapes above
        if(shapes_param_list_ptr->at(i_sh)->transf_order[0] == "Scale" || shapes_param_list_ptr->at(i_sh)->transf_order[0] == "Rotate" || shapes_param_list_ptr->at(i_sh)->transf_order[0] == "Move")
        {
            text_save_to_simscript.append(QString(", 'Transform',{"));
            for(int i_tr = 0; shapes_param_list_ptr->at(i_sh)->transf_order[i_tr] != "" && i_tr < 3; ++i_tr)
            {
                if(shapes_param_list_ptr->at(i_sh)->transf_order[i_tr] == "Scale")
                    text_save_to_simscript.append(QString("'Scale', '%1, %2, %3', ").arg(EvaluateVar(shapes_param_list_ptr->at(i_sh)->transf_scale_x)).arg(EvaluateVar(shapes_param_list_ptr->at(i_sh)->transf_scale_y)).arg(EvaluateVar(shapes_param_list_ptr->at(i_sh)->transf_scale_z)));
                if(shapes_param_list_ptr->at(i_sh)->transf_order[i_tr] == "Rotate")
                    text_save_to_simscript.append(QString("'Rotate', '%1, %2, %3, %4', ").arg(EvaluateVar(shapes_param_list_ptr->at(i_sh)->transf_rotate_ax)).arg(EvaluateVar(shapes_param_list_ptr->at(i_sh)->transf_rotate_ay)).arg(EvaluateVar(shapes_param_list_ptr->at(i_sh)->transf_rotate_az)).arg(EvaluateVar(shapes_param_list_ptr->at(i_sh)->transf_rotate_angle)));
                if(shapes_param_list_ptr->at(i_sh)->transf_order[i_tr] == "Move")
                    text_save_to_simscript.append(QString("'Translate', '%1,%2,%3', ").arg(EvaluateVar(shapes_param_list_ptr->at(i_sh)->transf_move_x)).arg(EvaluateVar(shapes_param_list_ptr->at(i_sh)->transf_move_y)).arg(EvaluateVar(shapes_param_list_ptr->at(i_sh)->transf_move_z)));
            }
            text_save_to_simscript.chop(2); //cut the last space and comma
            text_save_to_simscript.append(QString("}"));
        }
        text_save_to_simscript.append(QString(");\n"));
    }

    text_save_to_simscript.append("##<END_OUTPUT_AUTOGENERATED_PageGeometry>##\n");
    qDebug("%s", qUtf8Printable(text_save_to_simscript));
}


void PageGeometry::ReadFromSimScriptBuffer(void)
{

}

void PageGeometry::LoadSettings()
{
    for(int i_loadset = 0; "" != parent_tmp->wizard_settings->value(QString("PageGeometry_name%1").arg(i_loadset), "").toString(); ++i_loadset)
    {
        if("box" == parent_tmp->wizard_settings->value(QString("PageGeometry_type%1").arg(i_loadset), "").toString())
        {
            rad_but_type_box->setChecked(true);
            sh_box_name->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_name%1").arg(i_loadset), "").toString());
            sh_box_priority->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_priority%1").arg(i_loadset), "").toString());
            sh_box_x_coord_1->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_x_coord_1_%1").arg(i_loadset), "").toString());
            sh_box_x_coord_2->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_x_coord_2_%1").arg(i_loadset), "").toString());
            sh_box_y_coord_1->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_y_coord_1_%1").arg(i_loadset), "").toString());
            sh_box_y_coord_2->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_y_coord_2_%1").arg(i_loadset), "").toString());
            sh_box_z_coord_1->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_z_coord_1_%1").arg(i_loadset), "").toString());
            sh_box_z_coord_2->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_z_coord_2_%1").arg(i_loadset), "").toString());
        }
        else if("sphere" == parent_tmp->wizard_settings->value(QString("PageGeometry_type%1").arg(i_loadset), "").toString())
        {
            rad_but_type_sphere->setChecked(true);
            sh_sphere_name->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_name%1").arg(i_loadset), "").toString());
            sh_sphere_priority->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_priority%1").arg(i_loadset), "").toString());
            sh_sphere_x_coord->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_x_coord%1").arg(i_loadset), "").toString());
            sh_sphere_y_coord->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_y_coord%1").arg(i_loadset), "").toString());
            sh_sphere_z_coord->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_z_coord%1").arg(i_loadset), "").toString());
            sh_sphere_radius->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_radius%1").arg(i_loadset), "").toString());
        }
        else if("sphericalshell" == parent_tmp->wizard_settings->value(QString("PageGeometry_type%1").arg(i_loadset), "").toString())
        {
            rad_but_type_sphericalshell->setChecked(true);
            sh_sphericalshell_name->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_name%1").arg(i_loadset), "").toString());
            sh_sphericalshell_priority->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_priority%1").arg(i_loadset), "").toString());
            sh_sphericalshell_x_coord->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_x_coord%1").arg(i_loadset), "").toString());
            sh_sphericalshell_y_coord->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_y_coord%1").arg(i_loadset), "").toString());
            sh_sphericalshell_z_coord->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_z_coord%1").arg(i_loadset), "").toString());
            sh_sphericalshell_radius_inner->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_radius_inner%1").arg(i_loadset), "").toString());
            sh_sphericalshell_radius_outer->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_radius_outer%1").arg(i_loadset), "").toString());
        }
        else if("cylinder" == parent_tmp->wizard_settings->value(QString("PageGeometry_type%1").arg(i_loadset), "").toString())
        {
            rad_but_type_cylinder->setChecked(true);
            sh_cylinder_name->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_name%1").arg(i_loadset), "").toString());
            sh_cylinder_priority->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_priority%1").arg(i_loadset), "").toString());
            sh_cylinder_x_coord_1->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_x_coord_1_%1").arg(i_loadset), "").toString());
            sh_cylinder_x_coord_2->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_x_coord_2_%1").arg(i_loadset), "").toString());
            sh_cylinder_y_coord_1->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_y_coord_1_%1").arg(i_loadset), "").toString());
            sh_cylinder_y_coord_2->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_y_coord_2_%1").arg(i_loadset), "").toString());
            sh_cylinder_z_coord_1->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_z_coord_1_%1").arg(i_loadset), "").toString());
            sh_cylinder_z_coord_2->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_z_coord_2_%1").arg(i_loadset), "").toString());
            sh_cylinder_radius->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_radius%1").arg(i_loadset), "").toString());

        }
        else if("cylindricalshell" == parent_tmp->wizard_settings->value(QString("PageGeometry_type%1").arg(i_loadset), "").toString())
        {
            rad_but_type_cylindricalshell->setChecked(true);
            sh_cylindricalshell_name->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_name%1").arg(i_loadset), "").toString());
            sh_cylindricalshell_priority->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_priority%1").arg(i_loadset), "").toString());
            sh_cylindricalshell_x_coord_1->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_x_coord_1_%1").arg(i_loadset), "").toString());
            sh_cylindricalshell_x_coord_2->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_x_coord_2_%1").arg(i_loadset), "").toString());
            sh_cylindricalshell_y_coord_1->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_y_coord_1_%1").arg(i_loadset), "").toString());
            sh_cylindricalshell_y_coord_2->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_y_coord_2_%1").arg(i_loadset), "").toString());
            sh_cylindricalshell_z_coord_1->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_z_coord_1_%1").arg(i_loadset), "").toString());
            sh_cylindricalshell_z_coord_2->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_z_coord_2_%1").arg(i_loadset), "").toString());
            sh_cylindricalshell_radius_inner->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_radius_inner%1").arg(i_loadset), "").toString());
            sh_cylindricalshell_radius_outer->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_radius_outer%1").arg(i_loadset), "").toString());
        }
        else if("curve" == parent_tmp->wizard_settings->value(QString("PageGeometry_type%1").arg(i_loadset), "").toString())
        {
            rad_but_type_curve->setChecked(true);
            sh_curve_name->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_name%1").arg(i_loadset), "").toString());
            sh_curve_priority->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_priority%1").arg(i_loadset), "").toString());
            for(int i_pcpy = 0; "" != parent_tmp->wizard_settings->value(QString("PageGeometry_x_coord_%1_%2").arg(i_pcpy).arg(i_loadset), "").toString(); ++i_pcpy)
            {
                sh_curve_pointslist->setItem(i_pcpy, 0, new QTableWidgetItem(parent_tmp->wizard_settings->value(QString("PageGeometry_x_coord_%1_%2").arg(i_pcpy).arg(i_loadset), "").toString()));
                sh_curve_pointslist->setItem(i_pcpy, 1, new QTableWidgetItem(parent_tmp->wizard_settings->value(QString("PageGeometry_y_coord_%1_%2").arg(i_pcpy).arg(i_loadset), "").toString()));
                sh_curve_pointslist->setItem(i_pcpy, 2, new QTableWidgetItem(parent_tmp->wizard_settings->value(QString("PageGeometry_z_coord_%1_%2").arg(i_pcpy).arg(i_loadset), "").toString()));
            }
        }
        else if("wire" == parent_tmp->wizard_settings->value(QString("PageGeometry_type%1").arg(i_loadset), "").toString())
        {
            rad_but_type_wire->setChecked(true);
            sh_wire_name->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_name%1").arg(i_loadset), "").toString());
            sh_wire_priority->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_priority%1").arg(i_loadset), "").toString());
            sh_wire_radius->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_radius%1").arg(i_loadset), "").toString());
            for(int i_pcpy = 0; "" != parent_tmp->wizard_settings->value(QString("PageGeometry_x_coord_%1_%2").arg(i_pcpy).arg(i_loadset), "").toString(); ++i_pcpy)
            {
                sh_wire_pointslist->setItem(i_pcpy, 0, new QTableWidgetItem(parent_tmp->wizard_settings->value(QString("PageGeometry_x_coord_%1_%2").arg(i_pcpy).arg(i_loadset), "").toString()));
                sh_wire_pointslist->setItem(i_pcpy, 1, new QTableWidgetItem(parent_tmp->wizard_settings->value(QString("PageGeometry_y_coord_%1_%2").arg(i_pcpy).arg(i_loadset), "").toString()));
                sh_wire_pointslist->setItem(i_pcpy, 2, new QTableWidgetItem(parent_tmp->wizard_settings->value(QString("PageGeometry_z_coord_%1_%2").arg(i_pcpy).arg(i_loadset), "").toString()));
            }
        }
        else if("polygon" == parent_tmp->wizard_settings->value(QString("PageGeometry_type%1").arg(i_loadset), "").toString())
        {
            rad_but_type_polygon->setChecked(true);
            sh_polygon_name->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_name%1").arg(i_loadset), "").toString());
            sh_polygon_priority->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_priority%1").arg(i_loadset), "").toString());
            sh_polygon_norm_dir->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_normal_dir%1").arg(i_loadset), "").toString());
            sh_polygon_elevation->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_elevation%1").arg(i_loadset), "").toString());
            for(int i_pcpy = 0; "" != parent_tmp->wizard_settings->value(QString("PageGeometry_x_coord_%1_%2").arg(i_pcpy).arg(i_loadset), "").toString(); ++i_pcpy)
            {
                sh_polygon_pointslist->setItem(i_pcpy, 0, new QTableWidgetItem(parent_tmp->wizard_settings->value(QString("PageGeometry_x_coord_%1_%2").arg(i_pcpy).arg(i_loadset), "").toString()));
                sh_polygon_pointslist->setItem(i_pcpy, 1, new QTableWidgetItem(parent_tmp->wizard_settings->value(QString("PageGeometry_y_coord_%1_%2").arg(i_pcpy).arg(i_loadset), "").toString()));
            }
        }
        else if("extrudedpolygon" == parent_tmp->wizard_settings->value(QString("PageGeometry_type%1").arg(i_loadset), "").toString())
        {
            rad_but_type_extrudedpolygon->setChecked(true);
            sh_extrudedpolygon_name->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_name%1").arg(i_loadset), "").toString());
            sh_extrudedpolygon_priority->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_priority%1").arg(i_loadset), "").toString());
            sh_extrudedpolygon_norm_dir->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_normal_dir%1").arg(i_loadset), "").toString());
            sh_extrudedpolygon_elevation->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_elevation%1").arg(i_loadset), "").toString());
            sh_extrudedpolygon_length->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_length%1").arg(i_loadset), "").toString());
            for(int i_pcpy = 0; "" != parent_tmp->wizard_settings->value(QString("PageGeometry_x_coord_%1_%2").arg(i_pcpy).arg(i_loadset), "").toString(); ++i_pcpy)
            {
                sh_extrudedpolygon_pointslist->setItem(i_pcpy, 0, new QTableWidgetItem(parent_tmp->wizard_settings->value(QString("PageGeometry_x_coord_%1_%2").arg(i_pcpy).arg(i_loadset), "").toString()));
                sh_extrudedpolygon_pointslist->setItem(i_pcpy, 1, new QTableWidgetItem(parent_tmp->wizard_settings->value(QString("PageGeometry_y_coord_%1_%2").arg(i_pcpy).arg(i_loadset), "").toString()));
            }
        }
        else if("rotationalpolygon" == parent_tmp->wizard_settings->value(QString("PageGeometry_type%1").arg(i_loadset), "").toString())
        {
            rad_but_type_rotationalpolygon->setChecked(true);
            sh_rotationalpolygon_name->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_name%1").arg(i_loadset), "").toString());
            sh_rotationalpolygon_priority->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_priority%1").arg(i_loadset), "").toString());
            sh_rotationalpolygon_norm_dir->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_normal_dir%1").arg(i_loadset), "").toString());
            sh_rotationalpolygon_rot_axis->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_rot_axis_dir%1").arg(i_loadset), "").toString());
            sh_rotationalpolygon_angle1->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_angle1_%1").arg(i_loadset), "").toString());
            sh_rotationalpolygon_angle2->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_angle2_%1").arg(i_loadset), "").toString());
            for(int i_pcpy = 0; "" != parent_tmp->wizard_settings->value(QString("PageGeometry_x_coord_%1_%2").arg(i_pcpy).arg(i_loadset), "").toString(); ++i_pcpy)
            {
                sh_rotationalpolygon_pointslist->setItem(i_pcpy, 0, new QTableWidgetItem(parent_tmp->wizard_settings->value(QString("PageGeometry_x_coord_%1_%2").arg(i_pcpy).arg(i_loadset), "").toString()));
                sh_rotationalpolygon_pointslist->setItem(i_pcpy, 1, new QTableWidgetItem(parent_tmp->wizard_settings->value(QString("PageGeometry_y_coord_%1_%2").arg(i_pcpy).arg(i_loadset), "").toString()));
            }
        }
        else if("polyhedron" == parent_tmp->wizard_settings->value(QString("PageGeometry_type%1").arg(i_loadset), "").toString())
        {
            rad_but_type_polyhedron->setChecked(true);
            sh_polyhedron_name->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_name%1").arg(i_loadset), "").toString());
            sh_polyhedron_priority->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_priority%1").arg(i_loadset), "").toString());
            for(int i_pcpy = 0; "" != parent_tmp->wizard_settings->value(QString("PageGeometry_vertices_x_coord_%1_%2").arg(i_pcpy).arg(i_loadset), "").toString(); ++i_pcpy)
            {
                sh_polyhedron_verticeslist->setItem(i_pcpy, 0, new QTableWidgetItem(parent_tmp->wizard_settings->value(QString("PageGeometry_vertices_x_coord_%1_%2").arg(i_pcpy).arg(i_loadset), "").toString()));
                sh_polyhedron_verticeslist->setItem(i_pcpy, 1, new QTableWidgetItem(parent_tmp->wizard_settings->value(QString("PageGeometry_vertices_y_coord_%1_%2").arg(i_pcpy).arg(i_loadset), "").toString()));
                sh_polyhedron_verticeslist->setItem(i_pcpy, 2, new QTableWidgetItem(parent_tmp->wizard_settings->value(QString("PageGeometry_vertices_z_coord_%1_%2").arg(i_pcpy).arg(i_loadset), "").toString()));
                sh_polyhedron_faceslist->setItem(i_pcpy, 0, new QTableWidgetItem(parent_tmp->wizard_settings->value(QString("PageGeometry_faces_x_coord_%1_%2").arg(i_pcpy).arg(i_loadset), "").toString()));
                sh_polyhedron_faceslist->setItem(i_pcpy, 1, new QTableWidgetItem(parent_tmp->wizard_settings->value(QString("PageGeometry_faces_y_coord_%1_%2").arg(i_pcpy).arg(i_loadset), "").toString()));
                sh_polyhedron_faceslist->setItem(i_pcpy, 2, new QTableWidgetItem(parent_tmp->wizard_settings->value(QString("PageGeometry_faces_z_coord_%1_%2").arg(i_pcpy).arg(i_loadset), "").toString()));
            }
        }
        else if("stlfile" == parent_tmp->wizard_settings->value(QString("PageGeometry_type%1").arg(i_loadset), "").toString())
        {
            rad_but_type_stlfile->setChecked(true);
            sh_stlfile_name->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_name%1").arg(i_loadset), "").toString());
            sh_stlfile_priority->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_priority%1").arg(i_loadset), "").toString());
            sh_stlfile_path->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_path%1").arg(i_loadset), "").toString());

        }

        transforms_list_widget->clear();
        transf_scale_x->clear();
        transf_scale_y->clear();
        transf_scale_z->clear();
        transf_rotate_ax->clear();
        transf_rotate_ay->clear();
        transf_rotate_az->clear();
        transf_rotate_angle->clear();
        transf_move_x->clear();
        transf_move_y->clear();
        transf_move_z->clear();
        transf_scale_x->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_transf_scale_x_%1").arg(i_loadset), "").toString());
        transf_scale_y->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_transf_scale_y_%1").arg(i_loadset), "").toString());
        transf_scale_z->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_transf_scale_z_%1").arg(i_loadset), "").toString());
        transf_rotate_ax->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_transf_rotate_ax_%1").arg(i_loadset), "").toString());
        transf_rotate_ay->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_transf_rotate_ay_%1").arg(i_loadset), "").toString());
        transf_rotate_az->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_transf_rotate_az_%1").arg(i_loadset), "").toString());
        transf_rotate_angle->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_transf_rotate_angle%1").arg(i_loadset), "").toString());
        transf_move_x->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_transf_move_x_%1").arg(i_loadset), "").toString());
        transf_move_y->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_transf_move_y_%1").arg(i_loadset), "").toString());
        transf_move_z->setText(parent_tmp->wizard_settings->value(QString("PageGeometry_transf_move_z_%1").arg(i_loadset), "").toString());
        transforms_list_widget->addItem(parent_tmp->wizard_settings->value(QString("PageGeometry_transf_order0_%1").arg(i_loadset), "").toString());
        transforms_list_widget->addItem(parent_tmp->wizard_settings->value(QString("PageGeometry_transf_order1_%1").arg(i_loadset), "").toString());
        transforms_list_widget->addItem(parent_tmp->wizard_settings->value(QString("PageGeometry_transf_order2_%1").arg(i_loadset), "").toString());

        OnAddOrChangeShape();
    }
}

void PageGeometry::SaveSettings()
{
    shape_parameters *shape_tmp;
    shape_box_parameters *shape_box_tmp;
    shape_sphere_parameters *shape_sphere_tmp;
    shape_sphericalshell_parameters *shape_sphericalshell_tmp;
    shape_cylinder_parameters *shape_cylinder_tmp;
    shape_cylindricalshell_parameters *shape_cylindricalshell_tmp;
    shape_curve_parameters *shape_curve_tmp;
    shape_wire_parameters *shape_wire_tmp;
    shape_polygon_parameters *shape_polygon_tmp;
    shape_extrudedpolygon_parameters *shape_extrudedpolygon_tmp;
    shape_rotationalpolygon_parameters *shape_rotationalpolygon_tmp;
    shape_polyhedron_parameters *shape_polyhedron_tmp;
    shape_stlfile_parameters *shape_stlfile_tmp;

    for(int i_saveset = 0; i_saveset < shapes_param_list_ptr->count(); ++i_saveset)
    {
        if(!QString::compare(shapes_param_list_ptr->at(i_saveset)->type, "box"))
        {
            shape_box_tmp = (shape_box_parameters *)(shapes_param_list_ptr->at(i_saveset));
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_type%1").arg(i_saveset), "box");
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_name%1").arg(i_saveset), shape_box_tmp->name);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_priority%1").arg(i_saveset), shape_box_tmp->priority);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_x_coord_1_%1").arg(i_saveset), shape_box_tmp->x_coord_1);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_x_coord_2_%1").arg(i_saveset), shape_box_tmp->x_coord_2);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_y_coord_1_%1").arg(i_saveset), shape_box_tmp->y_coord_1);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_y_coord_2_%1").arg(i_saveset), shape_box_tmp->y_coord_2);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_z_coord_1_%1").arg(i_saveset), shape_box_tmp->z_coord_1);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_z_coord_2_%1").arg(i_saveset), shape_box_tmp->z_coord_2);
        }
        else if(!QString::compare(shapes_param_list_ptr->at(i_saveset)->type, "sphere"))
        {
            shape_sphere_tmp = (shape_sphere_parameters *)(shapes_param_list_ptr->at(i_saveset));
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_type%1").arg(i_saveset), "sphere");
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_name%1").arg(i_saveset), shape_sphere_tmp->name);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_priority%1").arg(i_saveset), shape_sphere_tmp->priority);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_x_coord%1").arg(i_saveset), shape_sphere_tmp->x_coord);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_y_coord%1").arg(i_saveset), shape_sphere_tmp->y_coord);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_z_coord%1").arg(i_saveset), shape_sphere_tmp->z_coord);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_radius%1").arg(i_saveset), shape_sphere_tmp->radius);
        }
        else if(!QString::compare(shapes_param_list_ptr->at(i_saveset)->type, "sphericalshell"))
        {
            shape_sphericalshell_tmp = (shape_sphericalshell_parameters *)(shapes_param_list_ptr->at(i_saveset));
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_type%1").arg(i_saveset), "sphericalshell");
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_name%1").arg(i_saveset), shape_sphericalshell_tmp->name);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_priority%1").arg(i_saveset), shape_sphericalshell_tmp->priority);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_x_coord%1").arg(i_saveset), shape_sphericalshell_tmp->x_coord);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_y_coord%1").arg(i_saveset), shape_sphericalshell_tmp->y_coord);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_z_coord%1").arg(i_saveset), shape_sphericalshell_tmp->z_coord);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_radius_inner%1").arg(i_saveset), shape_sphericalshell_tmp->radius_inner);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_radius_outer%1").arg(i_saveset), shape_sphericalshell_tmp->radius_outer);
        }
        else if(!QString::compare(shapes_param_list_ptr->at(i_saveset)->type, "cylinder"))
        {
            shape_cylinder_tmp = (shape_cylinder_parameters *)(shapes_param_list_ptr->at(i_saveset));
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_type%1").arg(i_saveset), "cylinder");
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_name%1").arg(i_saveset), shape_cylinder_tmp->name);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_priority%1").arg(i_saveset), shape_cylinder_tmp->priority);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_x_coord_1_%1").arg(i_saveset), shape_cylinder_tmp->x_coord_1);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_x_coord_2_%1").arg(i_saveset), shape_cylinder_tmp->x_coord_2);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_y_coord_1_%1").arg(i_saveset), shape_cylinder_tmp->y_coord_1);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_y_coord_2_%1").arg(i_saveset), shape_cylinder_tmp->y_coord_2);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_z_coord_1_%1").arg(i_saveset), shape_cylinder_tmp->z_coord_1);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_z_coord_2_%1").arg(i_saveset), shape_cylinder_tmp->z_coord_2);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_radius%1").arg(i_saveset), shape_cylinder_tmp->radius);
        }
        else if(!QString::compare(shapes_param_list_ptr->at(i_saveset)->type, "cylindricalshell"))
        {
            shape_cylindricalshell_tmp = (shape_cylindricalshell_parameters *)(shapes_param_list_ptr->at(i_saveset));
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_type%1").arg(i_saveset), "cylindricalshell");
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_name%1").arg(i_saveset), shape_cylindricalshell_tmp->name);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_priority%1").arg(i_saveset), shape_cylindricalshell_tmp->priority);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_x_coord_1_%1").arg(i_saveset), shape_cylindricalshell_tmp->x_coord_1);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_x_coord_2_%1").arg(i_saveset), shape_cylindricalshell_tmp->x_coord_2);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_y_coord_1_%1").arg(i_saveset), shape_cylindricalshell_tmp->y_coord_1);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_y_coord_2_%1").arg(i_saveset), shape_cylindricalshell_tmp->y_coord_2);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_z_coord_1_%1").arg(i_saveset), shape_cylindricalshell_tmp->z_coord_1);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_z_coord_2_%1").arg(i_saveset), shape_cylindricalshell_tmp->z_coord_2);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_radius_inner%1").arg(i_saveset), shape_cylindricalshell_tmp->radius_inner);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_radius_outer%1").arg(i_saveset), shape_cylindricalshell_tmp->radius_outer);
        }
        else if(!QString::compare(shapes_param_list_ptr->at(i_saveset)->type, "curve"))
        {
            shape_curve_tmp = (shape_curve_parameters *)(shapes_param_list_ptr->at(i_saveset));
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_type%1").arg(i_saveset), "curve");
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_name%1").arg(i_saveset), shape_curve_tmp->name);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_priority%1").arg(i_saveset), shape_curve_tmp->priority);
            for(int i_pcpy = 0; i_pcpy < shape_curve_tmp->points_x.size() && i_pcpy < shape_curve_tmp->points_y.size() && i_pcpy < shape_curve_tmp->points_z.size(); ++i_pcpy)
            {
                parent_tmp->wizard_settings->setValue(QString("PageGeometry_x_coord_%1_%2").arg(i_pcpy).arg(i_saveset), shape_curve_tmp->points_x.at(i_pcpy));
                parent_tmp->wizard_settings->setValue(QString("PageGeometry_y_coord_%1_%2").arg(i_pcpy).arg(i_saveset), shape_curve_tmp->points_y.at(i_pcpy));
                parent_tmp->wizard_settings->setValue(QString("PageGeometry_z_coord_%1_%2").arg(i_pcpy).arg(i_saveset), shape_curve_tmp->points_z.at(i_pcpy));
            }
        }
        else if(!QString::compare(shapes_param_list_ptr->at(i_saveset)->type, "wire"))
        {
            shape_wire_tmp = (shape_wire_parameters *)(shapes_param_list_ptr->at(i_saveset));
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_type%1").arg(i_saveset), "wire");
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_name%1").arg(i_saveset), shape_wire_tmp->name);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_priority%1").arg(i_saveset), shape_wire_tmp->priority);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_radius%1").arg(i_saveset), shape_wire_tmp->radius);
            for(int i_pcpy = 0; i_pcpy < shape_wire_tmp->points_x.size() && i_pcpy < shape_wire_tmp->points_y.size() && i_pcpy < shape_wire_tmp->points_z.size(); ++i_pcpy)
            {
                parent_tmp->wizard_settings->setValue(QString("PageGeometry_x_coord_%1_%2").arg(i_pcpy).arg(i_saveset), shape_wire_tmp->points_x.at(i_pcpy));
                parent_tmp->wizard_settings->setValue(QString("PageGeometry_y_coord_%1_%2").arg(i_pcpy).arg(i_saveset), shape_wire_tmp->points_y.at(i_pcpy));
                parent_tmp->wizard_settings->setValue(QString("PageGeometry_z_coord_%1_%2").arg(i_pcpy).arg(i_saveset), shape_wire_tmp->points_z.at(i_pcpy));
            }
        }
        else if(!QString::compare(shapes_param_list_ptr->at(i_saveset)->type, "polygon"))
        {
            shape_polygon_tmp = (shape_polygon_parameters *)(shapes_param_list_ptr->at(i_saveset));
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_type%1").arg(i_saveset), "polygon");
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_name%1").arg(i_saveset), shape_polygon_tmp->name);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_priority%1").arg(i_saveset), shape_polygon_tmp->priority);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_normal_dir%1").arg(i_saveset), shape_polygon_tmp->normal_dir);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_elevation%1").arg(i_saveset), shape_polygon_tmp->elevation);
            for(int i_pcpy = 0; i_pcpy < shape_polygon_tmp->points_x.size() && i_pcpy < shape_polygon_tmp->points_y.size(); ++i_pcpy)
            {
                parent_tmp->wizard_settings->setValue(QString("PageGeometry_x_coord_%1_%2").arg(i_pcpy).arg(i_saveset), shape_polygon_tmp->points_x.at(i_pcpy));
                parent_tmp->wizard_settings->setValue(QString("PageGeometry_y_coord_%1_%2").arg(i_pcpy).arg(i_saveset), shape_polygon_tmp->points_y.at(i_pcpy));
            }
        }
        else if(!QString::compare(shapes_param_list_ptr->at(i_saveset)->type, "extrudedpolygon"))
        {
            shape_extrudedpolygon_tmp = (shape_extrudedpolygon_parameters *)(shapes_param_list_ptr->at(i_saveset));
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_type%1").arg(i_saveset), "extrudedpolygon");
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_name%1").arg(i_saveset), shape_extrudedpolygon_tmp->name);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_priority%1").arg(i_saveset), shape_extrudedpolygon_tmp->priority);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_normal_dir%1").arg(i_saveset), shape_extrudedpolygon_tmp->normal_dir);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_elevation%1").arg(i_saveset), shape_extrudedpolygon_tmp->elevation);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_length%1").arg(i_saveset), shape_extrudedpolygon_tmp->length);
            for(int i_pcpy = 0; i_pcpy < shape_extrudedpolygon_tmp->points_x.size() && i_pcpy < shape_extrudedpolygon_tmp->points_y.size(); ++i_pcpy)
            {
                parent_tmp->wizard_settings->setValue(QString("PageGeometry_x_coord_%1_%2").arg(i_pcpy).arg(i_saveset), shape_extrudedpolygon_tmp->points_x.at(i_pcpy));
                parent_tmp->wizard_settings->setValue(QString("PageGeometry_y_coord_%1_%2").arg(i_pcpy).arg(i_saveset), shape_extrudedpolygon_tmp->points_y.at(i_pcpy));
            }
        }
        else if(!QString::compare(shapes_param_list_ptr->at(i_saveset)->type, "rotationalpolygon"))
        {
            shape_rotationalpolygon_tmp = (shape_rotationalpolygon_parameters *)(shapes_param_list_ptr->at(i_saveset));
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_type%1").arg(i_saveset), "rotationalpolygon");
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_name%1").arg(i_saveset), shape_rotationalpolygon_tmp->name);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_priority%1").arg(i_saveset), shape_rotationalpolygon_tmp->priority);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_normal_dir%1").arg(i_saveset), shape_rotationalpolygon_tmp->normal_dir);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_rot_axis_dir%1").arg(i_saveset), shape_rotationalpolygon_tmp->rot_axis_dir);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_angle1_%1").arg(i_saveset), shape_rotationalpolygon_tmp->angle1);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_angle2_%1").arg(i_saveset), shape_rotationalpolygon_tmp->angle2);
            for(int i_pcpy = 0; i_pcpy < shape_rotationalpolygon_tmp->points_x.size() && i_pcpy < shape_rotationalpolygon_tmp->points_y.size(); ++i_pcpy)
            {
                parent_tmp->wizard_settings->setValue(QString("PageGeometry_x_coord_%1_%2").arg(i_pcpy).arg(i_saveset), shape_rotationalpolygon_tmp->points_x.at(i_pcpy));
                parent_tmp->wizard_settings->setValue(QString("PageGeometry_y_coord_%1_%2").arg(i_pcpy).arg(i_saveset), shape_rotationalpolygon_tmp->points_y.at(i_pcpy));
            }
        }
        else if(!QString::compare(shapes_param_list_ptr->at(i_saveset)->type, "polyhedron"))
        {
            shape_polyhedron_tmp = (shape_polyhedron_parameters *)(shapes_param_list_ptr->at(i_saveset));
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_type%1").arg(i_saveset), "polyhedron");
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_name%1").arg(i_saveset), shape_polyhedron_tmp->name);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_priority%1").arg(i_saveset), shape_polyhedron_tmp->priority);
            for(int i_pcpy = 0; i_pcpy < shape_polyhedron_tmp->vertices_x.size() && i_pcpy < shape_polyhedron_tmp->vertices_y.size() && i_pcpy < shape_polyhedron_tmp->vertices_z.size(); ++i_pcpy)
            {
                parent_tmp->wizard_settings->setValue(QString("PageGeometry_vertices_x_coord_%1_%2").arg(i_pcpy).arg(i_saveset), shape_polyhedron_tmp->vertices_x.at(i_pcpy));
                parent_tmp->wizard_settings->setValue(QString("PageGeometry_vertices_y_coord_%1_%2").arg(i_pcpy).arg(i_saveset), shape_polyhedron_tmp->vertices_y.at(i_pcpy));
                parent_tmp->wizard_settings->setValue(QString("PageGeometry_vertices_z_coord_%1_%2").arg(i_pcpy).arg(i_saveset), shape_polyhedron_tmp->vertices_z.at(i_pcpy));
                parent_tmp->wizard_settings->setValue(QString("PageGeometry_faces_x_coord_%1_%2").arg(i_pcpy).arg(i_saveset), shape_polyhedron_tmp->faces_x.at(i_pcpy));
                parent_tmp->wizard_settings->setValue(QString("PageGeometry_faces_y_coord_%1_%2").arg(i_pcpy).arg(i_saveset), shape_polyhedron_tmp->faces_y.at(i_pcpy));
                parent_tmp->wizard_settings->setValue(QString("PageGeometry_faces_z_coord_%1_%2").arg(i_pcpy).arg(i_saveset), shape_polyhedron_tmp->faces_z.at(i_pcpy));
            }
        }
        else if(!QString::compare(shapes_param_list_ptr->at(i_saveset)->type, "stlfile"))
        {
            shape_stlfile_tmp = (shape_stlfile_parameters *)(shapes_param_list_ptr->at(i_saveset));
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_type%1").arg(i_saveset), "stlfile");
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_name%1").arg(i_saveset), shape_stlfile_tmp->name);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_priority%1").arg(i_saveset), shape_stlfile_tmp->priority);
            parent_tmp->wizard_settings->setValue(QString("PageGeometry_path%1").arg(i_saveset), shape_stlfile_tmp->path);
        }

        shape_tmp = (shape_parameters *)(shapes_param_list_ptr->at(i_saveset));
        parent_tmp->wizard_settings->setValue(QString("PageGeometry_transf_scale_x_%1").arg(i_saveset), shape_tmp->transf_scale_x);
        parent_tmp->wizard_settings->setValue(QString("PageGeometry_transf_scale_y_%1").arg(i_saveset), shape_tmp->transf_scale_y);
        parent_tmp->wizard_settings->setValue(QString("PageGeometry_transf_scale_z_%1").arg(i_saveset), shape_tmp->transf_scale_z);
        parent_tmp->wizard_settings->setValue(QString("PageGeometry_transf_rotate_ax_%1").arg(i_saveset), shape_tmp->transf_rotate_ax);
        parent_tmp->wizard_settings->setValue(QString("PageGeometry_transf_rotate_ay_%1").arg(i_saveset), shape_tmp->transf_rotate_ay);
        parent_tmp->wizard_settings->setValue(QString("PageGeometry_transf_rotate_az_%1").arg(i_saveset), shape_tmp->transf_rotate_az);
        parent_tmp->wizard_settings->setValue(QString("PageGeometry_transf_rotate_angle%1").arg(i_saveset), shape_tmp->transf_rotate_angle);
        parent_tmp->wizard_settings->setValue(QString("PageGeometry_transf_move_x_%1").arg(i_saveset), shape_tmp->transf_move_x);
        parent_tmp->wizard_settings->setValue(QString("PageGeometry_transf_move_y_%1").arg(i_saveset), shape_tmp->transf_move_y);
        parent_tmp->wizard_settings->setValue(QString("PageGeometry_transf_move_z_%1").arg(i_saveset), shape_tmp->transf_move_z);
        parent_tmp->wizard_settings->setValue(QString("PageGeometry_transf_order0_%1").arg(i_saveset), shape_tmp->transf_order[0]);
        parent_tmp->wizard_settings->setValue(QString("PageGeometry_transf_order1_%1").arg(i_saveset), shape_tmp->transf_order[1]);
        parent_tmp->wizard_settings->setValue(QString("PageGeometry_transf_order2_%1").arg(i_saveset), shape_tmp->transf_order[2]);
    }
}


unsigned int PageGeometry::UploadShapesToViewer(bool is_new)
{
    CSPrimitives *prim;
    std::string old_prop_name;
    CSProperties* material_property;
    shape_parameters *shape_selected_general = shapes_param_list_ptr->at(shapes_list_widget->currentRow());

    if(rad_but_type_box->isChecked())
    {
        shape_box_parameters *shape_selected = (shape_box_parameters *)(shape_selected_general);   //get data about the shape stored here - in the wizard
        material_property = wizardsparent_tmp->GetPropertiesByName(shape_selected->material.toStdString()).at(0); //get proprty class from QCSXCAD according to selection in wizard (assumed only one with the name) TODO FIXME different shapes can have the same name!
        CSPrimBox *prim_box;

        if(is_new)
        {
            prim_box = new CSPrimBox(wizardsparent_tmp->clParaSet, material_property);
        }
        else    //if shape is to be changed, not added
        {
            int id_tmp = shapes_param_list_ptr->at(shapes_list_widget->currentRow())->id; //get id of the shape selected in the wizard, to find the corresponding object in QCSXCAD
            CSPrimitives *prim_box_tmp = wizardsparent_tmp->GetPrimitiveByID(id_tmp); //create pointer to access the object in QCSXCAD
            prim_box = prim_box_tmp->ToBox();
            old_prop_name = prim_box_tmp->GetProperty()->GetName();
        }

        prim_box->SetPriority(shape_selected->priority.toInt());
        prim_box->SetCoord(0, EvaluateVar(shape_selected->x_coord_1));
        prim_box->SetCoord(1, EvaluateVar(shape_selected->x_coord_2));
        prim_box->SetCoord(2, EvaluateVar(shape_selected->y_coord_1));
        prim_box->SetCoord(3, EvaluateVar(shape_selected->y_coord_2));
        prim_box->SetCoord(4, EvaluateVar(shape_selected->z_coord_1));
        prim_box->SetCoord(5, EvaluateVar(shape_selected->z_coord_2));

        prim = (CSPrimitives *)(prim_box);
    }
    else if(rad_but_type_sphere->isChecked())
    {
        shape_sphere_parameters *shape_selected = (shape_sphere_parameters *)(shape_selected_general);   //get data about the shape stored here - in the wizard
        material_property = wizardsparent_tmp->GetPropertiesByName(shape_selected->material.toStdString()).at(0); //get proprty class from QCSXCAD according to selection in wizard (assumed only one with the name) TODO FIXME different shapes can have the same name!
        CSPrimSphere *prim_sphere;

        if(is_new)
        {
            prim_sphere = new CSPrimSphere(wizardsparent_tmp->clParaSet, material_property);
        }
        else    //if shape is to be changed, not added
        {
            int id_tmp = shapes_param_list_ptr->at(shapes_list_widget->currentRow())->id; //get id of the shape selected in the wizard, to find the corresponding object in QCSXCAD
            CSPrimitives *prim_sphere_tmp = wizardsparent_tmp->GetPrimitiveByID(id_tmp); //create pointer to access the object in QCSXCAD
            prim_sphere = prim_sphere_tmp->ToSphere();
            old_prop_name = prim_sphere_tmp->GetProperty()->GetName();
        }

        prim_sphere->SetPriority(shape_selected->priority.toInt());
        prim_sphere->SetCoord(0, EvaluateVar(shape_selected->x_coord));
        prim_sphere->SetCoord(2, EvaluateVar(shape_selected->y_coord));
        prim_sphere->SetCoord(4, EvaluateVar(shape_selected->z_coord));
        prim_sphere->SetRadius(EvaluateVar(shape_selected->radius));

        prim = (CSPrimitives *)(prim_sphere);
    }
    else if(rad_but_type_sphericalshell->isChecked())
    {
        shape_sphericalshell_parameters *shape_selected = (shape_sphericalshell_parameters *)(shape_selected_general);   //get data about the shape stored here - in the wizard
        material_property = wizardsparent_tmp->GetPropertiesByName(shape_selected->material.toStdString()).at(0); //get proprty class from QCSXCAD according to selection in wizard (assumed only one with the name) TODO FIXME different shapes can have the same name!

        CSPrimSphericalShell *prim_sphericalshell;

        if(is_new)
        {
            prim_sphericalshell = new CSPrimSphericalShell(wizardsparent_tmp->clParaSet, material_property);
        }
        else    //if shape is to be changed, not added
        {
            int id_tmp = shapes_param_list_ptr->at(shapes_list_widget->currentRow())->id; //get id of the shape selected in the wizard, to find the corresponding object in QCSXCAD
            CSPrimitives *prim_sphericalshell_tmp = wizardsparent_tmp->GetPrimitiveByID(id_tmp); //create pointer to access the object in QCSXCAD
            prim_sphericalshell = prim_sphericalshell_tmp->ToSphericalShell();
            old_prop_name = prim_sphericalshell_tmp->GetProperty()->GetName();
        }

        prim_sphericalshell->SetPriority(shape_selected->priority.toInt());
        prim_sphericalshell->SetCoord(0, EvaluateVar(shape_selected->x_coord));
        prim_sphericalshell->SetCoord(2, EvaluateVar(shape_selected->y_coord));
        prim_sphericalshell->SetCoord(4, EvaluateVar(shape_selected->z_coord));
        prim_sphericalshell->SetRadius((EvaluateVar(shape_selected->radius_outer)+EvaluateVar(shape_selected->radius_inner))/2);
        prim_sphericalshell->SetShellWidth(EvaluateVar(shape_selected->radius_outer)-EvaluateVar(shape_selected->radius_inner));

        prim = (CSPrimitives *)(prim_sphericalshell);
    }
    else if(rad_but_type_cylinder->isChecked())
    {
        shape_cylinder_parameters *shape_selected = (shape_cylinder_parameters *)(shape_selected_general);   //get data about the shape stored here - in the wizard
        material_property = wizardsparent_tmp->GetPropertiesByName(shape_selected->material.toStdString()).at(0); //get proprty class from QCSXCAD according to selection in wizard (assumed only one with the name) TODO FIXME different shapes can have the same name!

        CSPrimCylinder *prim_cylinder;

        if(is_new)
        {
            prim_cylinder = new CSPrimCylinder(wizardsparent_tmp->clParaSet, material_property);
        }
        else    //if shape is to be changed, not added
        {
            int id_tmp = shapes_param_list_ptr->at(shapes_list_widget->currentRow())->id; //get id of the shape selected in the wizard, to find the corresponding object in QCSXCAD
            CSPrimitives *prim_cylinder_tmp = wizardsparent_tmp->GetPrimitiveByID(id_tmp); //create pointer to access the object in QCSXCAD
            prim_cylinder = prim_cylinder_tmp->ToCylinder();
            old_prop_name = prim_cylinder_tmp->GetProperty()->GetName();
        }

        prim_cylinder->SetPriority(shape_selected->priority.toInt());
        prim_cylinder->SetCoord(0, EvaluateVar(shape_selected->x_coord_1));
        prim_cylinder->SetCoord(1, EvaluateVar(shape_selected->x_coord_2));
        prim_cylinder->SetCoord(2, EvaluateVar(shape_selected->y_coord_1));
        prim_cylinder->SetCoord(3, EvaluateVar(shape_selected->y_coord_2));
        prim_cylinder->SetCoord(4, EvaluateVar(shape_selected->z_coord_1));
        prim_cylinder->SetCoord(5, EvaluateVar(shape_selected->z_coord_2));
        prim_cylinder->SetRadius(EvaluateVar(shape_selected->radius));

        prim = (CSPrimitives *)(prim_cylinder);
    }
    else if(rad_but_type_cylindricalshell->isChecked())
    {
        shape_cylindricalshell_parameters *shape_selected = (shape_cylindricalshell_parameters *)(shape_selected_general);   //get data about the shape stored here - in the wizard
        material_property = wizardsparent_tmp->GetPropertiesByName(shape_selected->material.toStdString()).at(0); //get proprty class from QCSXCAD according to selection in wizard (assumed only one with the name) TODO FIXME different shapes can have the same name!

        CSPrimCylindricalShell *prim_cylindricalshell;

        if(is_new)
        {
            prim_cylindricalshell = new CSPrimCylindricalShell(wizardsparent_tmp->clParaSet, material_property);
        }
        else    //if shape is to be changed, not added
        {
            int id_tmp = shapes_param_list_ptr->at(shapes_list_widget->currentRow())->id; //get id of the shape selected in the wizard, to find the corresponding object in QCSXCAD
            CSPrimitives *prim_cylindricalshell_tmp = wizardsparent_tmp->GetPrimitiveByID(id_tmp); //create pointer to access the object in QCSXCAD
            prim_cylindricalshell = prim_cylindricalshell_tmp->ToCylindricalShell();
            old_prop_name = prim_cylindricalshell_tmp->GetProperty()->GetName();
        }

        prim_cylindricalshell->SetPriority(shape_selected->priority.toInt());
        prim_cylindricalshell->SetCoord(0, EvaluateVar(shape_selected->x_coord_1));
        prim_cylindricalshell->SetCoord(1, EvaluateVar(shape_selected->x_coord_2));
        prim_cylindricalshell->SetCoord(2, EvaluateVar(shape_selected->y_coord_1));
        prim_cylindricalshell->SetCoord(3, EvaluateVar(shape_selected->y_coord_2));
        prim_cylindricalshell->SetCoord(4, EvaluateVar(shape_selected->z_coord_1));
        prim_cylindricalshell->SetCoord(5, EvaluateVar(shape_selected->z_coord_2));
        prim_cylindricalshell->SetRadius((EvaluateVar(shape_selected->radius_outer)+EvaluateVar(shape_selected->radius_inner))/2);
        prim_cylindricalshell->SetShellWidth(EvaluateVar(shape_selected->radius_outer)-EvaluateVar(shape_selected->radius_inner));

        prim = (CSPrimitives *)(prim_cylindricalshell);
    }
    else if(rad_but_type_curve->isChecked())
    {
        shape_curve_parameters *shape_selected = (shape_curve_parameters *)(shape_selected_general);   //get data about the shape stored here - in the wizard
        material_property = wizardsparent_tmp->GetPropertiesByName(shape_selected->material.toStdString()).at(0); //get proprty class from QCSXCAD according to selection in wizard (assumed only one with the name) TODO FIXME different shapes can have the same name!

        CSPrimCurve *prim_curve;

        if(is_new)
        {
            prim_curve = new CSPrimCurve(wizardsparent_tmp->clParaSet, material_property);
        }
        else    //if shape is to be changed, not added
        {
            int id_tmp = shapes_param_list_ptr->at(shapes_list_widget->currentRow())->id; //get id of the shape selected in the wizard, to find the corresponding object in QCSXCAD
            CSPrimitives *prim_curve_tmp = wizardsparent_tmp->GetPrimitiveByID(id_tmp); //create pointer to access the object in QCSXCAD
            prim_curve = prim_curve_tmp->ToCurve();
            old_prop_name = prim_curve_tmp->GetProperty()->GetName();
        }

        prim_curve->SetPriority(shape_selected->priority.toInt());
        prim_curve->ClearPoints();
        for(int i_pcpy = 0; i_pcpy < shape_selected->points_x.size() && i_pcpy < shape_selected->points_y.size() && i_pcpy < shape_selected->points_z.size(); ++i_pcpy)
        {
            double point_coord_tmp[3] = {EvaluateVar(shape_selected->points_x[i_pcpy]), EvaluateVar(shape_selected->points_y[i_pcpy]), EvaluateVar(shape_selected->points_z[i_pcpy])};
            prim_curve->AddPoint(point_coord_tmp);
        }
        prim = (CSPrimitives *)(prim_curve);
    }
    else if(rad_but_type_wire->isChecked())
    {
        shape_wire_parameters *shape_selected = (shape_wire_parameters *)(shape_selected_general);   //get data about the shape stored here - in the wizard
        material_property = wizardsparent_tmp->GetPropertiesByName(shape_selected->material.toStdString()).at(0); //get proprty class from QCSXCAD according to selection in wizard (assumed only one with the name) TODO FIXME different shapes can have the same name!

        CSPrimWire *prim_wire;

        if(is_new)
        {
            prim_wire = new CSPrimWire(wizardsparent_tmp->clParaSet, material_property);
        }
        else    //if shape is to be changed, not added
        {
            int id_tmp = shapes_param_list_ptr->at(shapes_list_widget->currentRow())->id; //get id of the shape selected in the wizard, to find the corresponding object in QCSXCAD
            CSPrimitives *prim_wire_tmp = wizardsparent_tmp->GetPrimitiveByID(id_tmp); //create pointer to access the object in QCSXCAD
            prim_wire = prim_wire_tmp->ToWire();
            old_prop_name = prim_wire_tmp->GetProperty()->GetName();
        }

        prim_wire->SetPriority(shape_selected->priority.toInt());
        prim_wire->SetWireRadius(EvaluateVar(shape_selected->radius));
        prim_wire->ClearPoints();
        for(int i_pcpy = 0; i_pcpy < shape_selected->points_x.size() && i_pcpy < shape_selected->points_y.size() && i_pcpy < shape_selected->points_z.size(); ++i_pcpy)
        {
            double point_coord_tmp[3] = {EvaluateVar(shape_selected->points_x[i_pcpy]), EvaluateVar(shape_selected->points_y[i_pcpy]), EvaluateVar(shape_selected->points_z[i_pcpy])};
            prim_wire->AddPoint(point_coord_tmp);
        }
        prim = (CSPrimitives *)(prim_wire);
    }
    else if(rad_but_type_polygon->isChecked())
    {
        shape_polygon_parameters *shape_selected = (shape_polygon_parameters *)(shape_selected_general);   //get data about the shape stored here - in the wizard
        material_property = wizardsparent_tmp->GetPropertiesByName(shape_selected->material.toStdString()).at(0); //get proprty class from QCSXCAD according to selection in wizard (assumed only one with the name) TODO FIXME different shapes can have the same name!

        CSPrimPolygon *prim_polygon;

        if(is_new)
        {
            prim_polygon = new CSPrimPolygon(wizardsparent_tmp->clParaSet, material_property);
        }
        else    //if shape is to be changed, not added
        {
            int id_tmp = shapes_param_list_ptr->at(shapes_list_widget->currentRow())->id; //get id of the shape selected in the wizard, to find the corresponding object in QCSXCAD
            CSPrimitives *prim_polygon_tmp = wizardsparent_tmp->GetPrimitiveByID(id_tmp); //create pointer to access the object in QCSXCAD
            prim_polygon = prim_polygon_tmp->ToPolygon();
            old_prop_name = prim_polygon_tmp->GetProperty()->GetName();
        }

        prim_polygon->SetPriority(shape_selected->priority.toInt());
        prim_polygon->SetNormDir(shape_selected->normal_dir.toInt());
        prim_polygon->SetElevation(EvaluateVar(shape_selected->elevation));
        prim_polygon->ClearCoords();
        for(int i_pcpy = 0; i_pcpy < shape_selected->points_x.size() && i_pcpy < shape_selected->points_y.size(); ++i_pcpy)
        {
            prim_polygon->AddCoord(EvaluateVar(shape_selected->points_x[i_pcpy]));
            prim_polygon->AddCoord(EvaluateVar(shape_selected->points_y[i_pcpy]));
        }
        prim = (CSPrimitives *)(prim_polygon);
    }
    else if(rad_but_type_extrudedpolygon->isChecked())
    {
        shape_extrudedpolygon_parameters *shape_selected = (shape_extrudedpolygon_parameters *)(shape_selected_general);   //get data about the shape stored here - in the wizard
        material_property = wizardsparent_tmp->GetPropertiesByName(shape_selected->material.toStdString()).at(0); //get proprty class from QCSXCAD according to selection in wizard (assumed only one with the name) TODO FIXME different shapes can have the same name!

        CSPrimLinPoly *prim_extrudedpolygon;

        if(is_new)
        {
            prim_extrudedpolygon = new CSPrimLinPoly(wizardsparent_tmp->clParaSet, material_property);
        }
        else    //if shape is to be changed, not added
        {
            int id_tmp = shapes_param_list_ptr->at(shapes_list_widget->currentRow())->id; //get id of the shape selected in the wizard, to find the corresponding object in QCSXCAD
            CSPrimitives *prim_extrudedpolygon_tmp = wizardsparent_tmp->GetPrimitiveByID(id_tmp); //create pointer to access the object in QCSXCAD
            prim_extrudedpolygon = prim_extrudedpolygon_tmp->ToLinPoly();
            old_prop_name = prim_extrudedpolygon_tmp->GetProperty()->GetName();
        }

        prim_extrudedpolygon->SetPriority(shape_selected->priority.toInt());
        prim_extrudedpolygon->SetNormDir(shape_selected->normal_dir.toInt());
        prim_extrudedpolygon->SetElevation(EvaluateVar(shape_selected->elevation));
        prim_extrudedpolygon->SetLength(EvaluateVar(shape_selected->length));
        prim_extrudedpolygon->ClearCoords();
        for(int i_pcpy = 0; i_pcpy < shape_selected->points_x.size() && i_pcpy < shape_selected->points_y.size(); ++i_pcpy)
        {
            prim_extrudedpolygon->AddCoord(EvaluateVar(shape_selected->points_x[i_pcpy]));
            prim_extrudedpolygon->AddCoord(EvaluateVar(shape_selected->points_y[i_pcpy]));
        }
        prim = (CSPrimitives *)(prim_extrudedpolygon);
    }
    else if(rad_but_type_rotationalpolygon->isChecked())
    {
        shape_rotationalpolygon_parameters *shape_selected = (shape_rotationalpolygon_parameters *)(shape_selected_general);   //get data about the shape stored here - in the wizard
        material_property = wizardsparent_tmp->GetPropertiesByName(shape_selected->material.toStdString()).at(0); //get proprty class from QCSXCAD according to selection in wizard (assumed only one with the name) TODO FIXME different shapes can have the same name!

        CSPrimRotPoly *prim_rotationalpolygon;

        if(is_new)
        {
            prim_rotationalpolygon = new CSPrimRotPoly(wizardsparent_tmp->clParaSet, material_property);
        }
        else    //if shape is to be changed, not added
        {
            int id_tmp = shapes_param_list_ptr->at(shapes_list_widget->currentRow())->id; //get id of the shape selected in the wizard, to find the corresponding object in QCSXCAD
            CSPrimitives *prim_rotationalpolygon_tmp = wizardsparent_tmp->GetPrimitiveByID(id_tmp); //create pointer to access the object in QCSXCAD
            prim_rotationalpolygon = prim_rotationalpolygon_tmp->ToRotPoly();
            old_prop_name = prim_rotationalpolygon_tmp->GetProperty()->GetName();
        }

        prim_rotationalpolygon->SetPriority(shape_selected->priority.toInt());
        prim_rotationalpolygon->SetNormDir(shape_selected->normal_dir.toInt());
        prim_rotationalpolygon->SetRotAxisDir(EvaluateVar(shape_selected->rot_axis_dir));
        prim_rotationalpolygon->SetAngle(0, EvaluateVar(shape_selected->angle1));
        prim_rotationalpolygon->SetAngle(1, EvaluateVar(shape_selected->angle2));
        prim_rotationalpolygon->ClearCoords();
        for(int i_pcpy = 0; i_pcpy < shape_selected->points_x.size() && i_pcpy < shape_selected->points_y.size(); ++i_pcpy)
        {
            prim_rotationalpolygon->AddCoord(EvaluateVar(shape_selected->points_x[i_pcpy]));
            prim_rotationalpolygon->AddCoord(EvaluateVar(shape_selected->points_y[i_pcpy]));
        }
        prim = (CSPrimitives *)(prim_rotationalpolygon);
    }
    else if(rad_but_type_polyhedron->isChecked())
    {
        shape_polyhedron_parameters *shape_selected = (shape_polyhedron_parameters *)(shape_selected_general);   //get data about the shape stored here - in the wizard
        material_property = wizardsparent_tmp->GetPropertiesByName(shape_selected->material.toStdString()).at(0); //get proprty class from QCSXCAD according to selection in wizard (assumed only one with the name) TODO FIXME different shapes can have the same name!

        CSPrimPolyhedron *prim_polyhedron;

        if(is_new)
        {
            prim_polyhedron = new CSPrimPolyhedron(wizardsparent_tmp->clParaSet, material_property);
        }
        else    //if shape is to be changed, not added
        {
            int id_tmp = shapes_param_list_ptr->at(shapes_list_widget->currentRow())->id; //get id of the shape selected in the wizard, to find the corresponding object in QCSXCAD
            CSPrimitives *prim_polyhedron_tmp = wizardsparent_tmp->GetPrimitiveByID(id_tmp); //create pointer to access the object in QCSXCAD
            prim_polyhedron = prim_polyhedron_tmp->ToPolyhedron();
            old_prop_name = prim_polyhedron_tmp->GetProperty()->GetName();
        }

        prim_polyhedron->SetPriority(shape_selected->priority.toInt());
        prim_polyhedron->Reset();
        for(int i_pcpy = 0; i_pcpy < shape_selected->vertices_x.size() && i_pcpy < shape_selected->vertices_y.size() && i_pcpy < shape_selected->vertices_z.size(); ++i_pcpy)
        {
            int face_coord_tmp[3] = {shape_selected->faces_x[i_pcpy].toInt(), shape_selected->faces_y[i_pcpy].toInt(), shape_selected->faces_z[i_pcpy].toInt()};
            prim_polyhedron->AddVertex(EvaluateVar(shape_selected->vertices_x[i_pcpy]), EvaluateVar(shape_selected->vertices_y[i_pcpy]), EvaluateVar(shape_selected->vertices_z[i_pcpy]));
            prim_polyhedron->AddFace(i_pcpy, face_coord_tmp);
        }
        prim = (CSPrimitives *)(prim_polyhedron);
    }
    else if(rad_but_type_stlfile->isChecked())
    {
        shape_stlfile_parameters *shape_selected = (shape_stlfile_parameters *)(shape_selected_general);   //get data about the shape stored here - in the wizard
        material_property = wizardsparent_tmp->GetPropertiesByName(shape_selected->material.toStdString()).at(0); //get proprty class from QCSXCAD according to selection in wizard (assumed only one with the name) TODO FIXME different shapes can have the same name!

        CSPrimPolyhedronReader *prim_stlfile;

        if(is_new)
        {
            prim_stlfile = new CSPrimPolyhedronReader(wizardsparent_tmp->clParaSet, material_property);
        }
        else    //if shape is to be changed, not added
        {
            int id_tmp = shapes_param_list_ptr->at(shapes_list_widget->currentRow())->id; //get id of the shape selected in the wizard, to find the corresponding object in QCSXCAD
            CSPrimitives *prim_stlfile_tmp = wizardsparent_tmp->GetPrimitiveByID(id_tmp); //create pointer to access the object in QCSXCAD
            prim_stlfile = prim_stlfile_tmp->ToPolyhedronReader();
            old_prop_name = prim_stlfile_tmp->GetProperty()->GetName();
        }

        prim_stlfile->SetPriority(shape_selected->priority.toInt());
        prim_stlfile->SetFileType(CSPrimPolyhedronReader::FileType::STL_FILE);
        prim_stlfile->SetFilename(shape_selected->path.toStdString());
        prim_stlfile->ReadFile();

        prim = (CSPrimitives *)(prim_stlfile);
    }

    prim->GetTransform()->Reset();
    for(int i_tr = 0; i_tr < 3; ++i_tr)
    {
        if(shape_selected_general->transf_order[i_tr] == "Scale")
        {
            double transf_arr_scale[3] = {  EvaluateVar(shape_selected_general->transf_scale_x),
                                            EvaluateVar(shape_selected_general->transf_scale_y),
                                            EvaluateVar(shape_selected_general->transf_scale_z)};
            prim->GetTransform()->Scale(transf_arr_scale, true);
        }
        if(shape_selected_general->transf_order[i_tr] == "Rotate")
        {
            double transf_arr_rotate[3] = { EvaluateVar(shape_selected_general->transf_rotate_ax),
                                            EvaluateVar(shape_selected_general->transf_rotate_ay),
                                            EvaluateVar(shape_selected_general->transf_rotate_az)};
            prim->GetTransform()->RotateOrigin(transf_arr_rotate, EvaluateVar(shape_selected_general->transf_rotate_angle), true);
        }
        if(shape_selected_general->transf_order[i_tr] == "Move")
        {
            double transf_arr_transl[3] = {   EvaluateVar(shape_selected_general->transf_move_x),
                                             EvaluateVar(shape_selected_general->transf_move_y),
                                             EvaluateVar(shape_selected_general->transf_move_z)};
            prim->GetTransform()->Translate(transf_arr_transl, true);
        }
    }

    if(is_new)
    {
        wizardsparent_tmp->setModified();
        wizardsparent_tmp->CSTree->AddPrimItem(prim);
        return prim->GetID();
    }
    else
    {
        if(material_property->GetName() != old_prop_name)
        {
            material_property->AddPrimitive(prim);
            wizardsparent_tmp->CSTree->SwitchProperty((CSPrimitives *)(prim), material_property);
        }
        wizardsparent_tmp->setModified();
    }
}


void PageGeometry::RemoveShapesFromViewer(void)
{
    int id_tmp = shapes_param_list_ptr->at(shapes_list_widget->currentRow())->id;
    CSPrimitives *prim_tmp = wizardsparent_tmp->GetPrimitiveByID(id_tmp);
    wizardsparent_tmp->CSTree->DeletePrimItem(prim_tmp);
    wizardsparent_tmp->DeletePrimitive(prim_tmp);
    wizardsparent_tmp->setModified();
}


void PageGeometry::ShapeSelectLayout(void)
{
    shape_select_groupbox = new QGroupBox(tr("Select shape type"));
    QGridLayout *grid_layout_select_shape = new QGridLayout;

    rad_but_type_box = new QRadioButton("Box", this);
    rad_but_type_sphere = new QRadioButton("Sphere", this);
    rad_but_type_sphericalshell = new QRadioButton("Spherical Shell", this);
    rad_but_type_cylinder = new QRadioButton("Cylinder", this);
    rad_but_type_cylindricalshell = new QRadioButton("Cylindrical Shell", this);
    rad_but_type_curve = new QRadioButton("Curve", this);
    rad_but_type_wire = new QRadioButton("Wire", this);
    rad_but_type_polygon = new QRadioButton("Polygon", this);
    rad_but_type_extrudedpolygon = new QRadioButton("Extruded polygon", this);
    rad_but_type_rotationalpolygon = new QRadioButton("Rotational Solid", this);
    rad_but_type_polyhedron = new QRadioButton("Polyhedron", this);
    rad_but_type_stlfile = new QRadioButton("STL file", this);
    connect(rad_but_type_box, SIGNAL(clicked()), this, SLOT(OnSetShapeTypeLayout()));
    connect(rad_but_type_sphere, SIGNAL(clicked()), this, SLOT(OnSetShapeTypeLayout()));
    connect(rad_but_type_sphericalshell, SIGNAL(clicked()), this, SLOT(OnSetShapeTypeLayout()));
    connect(rad_but_type_cylinder, SIGNAL(clicked()), this, SLOT(OnSetShapeTypeLayout()));
    connect(rad_but_type_cylindricalshell, SIGNAL(clicked()), this, SLOT(OnSetShapeTypeLayout()));
    connect(rad_but_type_curve, SIGNAL(clicked()), this, SLOT(OnSetShapeTypeLayout()));
    connect(rad_but_type_wire, SIGNAL(clicked()), this, SLOT(OnSetShapeTypeLayout()));
    connect(rad_but_type_polygon, SIGNAL(clicked()), this, SLOT(OnSetShapeTypeLayout()));
    connect(rad_but_type_extrudedpolygon, SIGNAL(clicked()), this, SLOT(OnSetShapeTypeLayout()));
    connect(rad_but_type_rotationalpolygon, SIGNAL(clicked()), this, SLOT(OnSetShapeTypeLayout()));
    connect(rad_but_type_polyhedron, SIGNAL(clicked()), this, SLOT(OnSetShapeTypeLayout()));
    connect(rad_but_type_stlfile, SIGNAL(clicked()), this, SLOT(OnSetShapeTypeLayout()));
    rad_but_type_box->setChecked(true);

    grid_layout_select_shape->addWidget(rad_but_type_box, 0, 0, Qt::AlignLeft);
    grid_layout_select_shape->addWidget(rad_but_type_sphere, 1, 0, Qt::AlignLeft);
    grid_layout_select_shape->addWidget(rad_but_type_sphericalshell, 2, 0, Qt::AlignLeft);
    grid_layout_select_shape->addWidget(rad_but_type_cylinder, 3, 0, Qt::AlignLeft);
    grid_layout_select_shape->addWidget(rad_but_type_cylindricalshell, 4, 0, Qt::AlignLeft);
    grid_layout_select_shape->addWidget(rad_but_type_curve, 5, 0, Qt::AlignLeft);
    grid_layout_select_shape->addWidget(rad_but_type_wire, 6, 0, Qt::AlignLeft);
    grid_layout_select_shape->addWidget(rad_but_type_polygon, 7, 0, Qt::AlignLeft);
    grid_layout_select_shape->addWidget(rad_but_type_extrudedpolygon, 8, 0, Qt::AlignLeft);
    grid_layout_select_shape->addWidget(rad_but_type_rotationalpolygon, 9, 0, Qt::AlignLeft);
    grid_layout_select_shape->addWidget(rad_but_type_polyhedron, 10, 0, Qt::AlignLeft);
    grid_layout_select_shape->addWidget(rad_but_type_stlfile, 11, 0, Qt::AlignLeft);

    shape_select_groupbox->setLayout(grid_layout_select_shape);
}


void PageGeometry::ShapeListLayout(void)
{
    shape_list_groupbox = new QGroupBox(tr("Shapes list"));
    QGridLayout *grid_layout_shape_list = new QGridLayout;

    shapes_list_widget = new QListWidget(this);
    connect(shapes_list_widget, SIGNAL(itemClicked(QListWidgetItem*)), this, SLOT(OnGetSelectedShape(QListWidgetItem*)));

    QPushButton *button_add_edit_shape = new QPushButton("New/Edit", this);
    connect(button_add_edit_shape, SIGNAL(released()), this, SLOT(OnAddOrChangeShape()));
    QPushButton *button_remove_shape = new QPushButton("Remove", this);
    connect(button_remove_shape, SIGNAL(released()), this, SLOT(OnRemoveShape()));

    grid_layout_shape_list->addWidget(button_add_edit_shape, 8, 0, Qt::AlignLeft);
    grid_layout_shape_list->addWidget(button_remove_shape, 8, 1, Qt::AlignLeft);
    grid_layout_shape_list->addWidget(shapes_list_widget, 0, 0, 7, 2, Qt::AlignLeft);

    shape_list_groupbox->setLayout(grid_layout_shape_list);
}

void PageGeometry::ShapeTransformsLayout(void)  //settings of transformations (move, rotate, scale) of shapes
{
    //main groupbox and layout
    transforms_groupbox = new QGroupBox(tr("Transforms"));
    QVBoxLayout *vert_layout_transforms = new QVBoxLayout;

    //selecting order of transforms
    QGroupBox *groupbox_transf_order = new QGroupBox(tr("Order of transforms"));
    QGridLayout *grid_layout_transf_order = new QGridLayout;
    transforms_list_widget = new QListWidget(this);
    button_transform_scale = new QPushButton("Scale", this);
    connect(button_transform_scale, SIGNAL(released()), this, SLOT(OnChangeTransformOrder()));
    button_transform_rotate = new QPushButton("Rotate", this);
    connect(button_transform_rotate, SIGNAL(released()), this, SLOT(OnChangeTransformOrder()));
    button_transform_move = new QPushButton("Move", this);
    connect(button_transform_move, SIGNAL(released()), this, SLOT(OnChangeTransformOrder()));
    button_transform_remove = new QPushButton("Remove transforms", this);
    connect(button_transform_remove, SIGNAL(released()), this, SLOT(OnChangeTransformOrder()));
    grid_layout_transf_order->addWidget(transforms_list_widget, 0, 0, 3, 1, Qt::AlignLeft);
    grid_layout_transf_order->addWidget(button_transform_scale, 0, 1, Qt::AlignLeft);
    grid_layout_transf_order->addWidget(button_transform_rotate, 1, 1, Qt::AlignLeft);
    grid_layout_transf_order->addWidget(button_transform_move, 2, 1, Qt::AlignLeft);
    grid_layout_transf_order->addWidget(button_transform_remove, 3, 0, 1, 2, Qt::AlignCenter);
    groupbox_transf_order->setLayout(grid_layout_transf_order);

    //controls for scale transform
    QGroupBox *groupbox_transf_scale = new QGroupBox(tr("Scale"));
    QGridLayout *grid_layout_scale = new QGridLayout;
    QLabel *transf_statictext_scale_x = new QLabel("x", this);
    QLabel *transf_statictext_scale_y = new QLabel("y", this);
    QLabel *transf_statictext_scale_z = new QLabel("z", this);
    transf_scale_x = new QLineEdit(this);
    transf_scale_y = new QLineEdit(this);
    transf_scale_z = new QLineEdit(this);
    grid_layout_scale->addWidget(transf_statictext_scale_x, 0, 1, Qt::AlignCenter);
    grid_layout_scale->addWidget(transf_statictext_scale_y, 0, 2, Qt::AlignCenter);
    grid_layout_scale->addWidget(transf_statictext_scale_z, 0, 3, Qt::AlignCenter);
    grid_layout_scale->addWidget(transf_scale_x, 1, 1, Qt::AlignLeft);
    grid_layout_scale->addWidget(transf_scale_y, 1, 2, Qt::AlignLeft);
    grid_layout_scale->addWidget(transf_scale_z, 1, 3, Qt::AlignLeft);
    groupbox_transf_scale->setLayout(grid_layout_scale);

    //controls for rotate transform
    QGroupBox *groupbox_transf_rotate = new QGroupBox(tr("Rotate"));
    QGridLayout *grid_layout_rotate = new QGridLayout;
    QLabel *transf_statictext_rot_ax = new QLabel("axis x", this);
    QLabel *transf_statictext_rot_ay = new QLabel("axis y", this);
    QLabel *transf_statictext_rot_az = new QLabel("axis z", this);
    QLabel *transf_statictext_rot_angle = new QLabel("angle", this);
    transf_rotate_ax = new QLineEdit(this);
    transf_rotate_ay = new QLineEdit(this);
    transf_rotate_az = new QLineEdit(this);
    transf_rotate_angle = new QLineEdit(this);
    grid_layout_rotate->addWidget(transf_statictext_rot_ax, 0, 1, Qt::AlignCenter);
    grid_layout_rotate->addWidget(transf_statictext_rot_ay, 0, 2, Qt::AlignCenter);
    grid_layout_rotate->addWidget(transf_statictext_rot_az, 0, 3, Qt::AlignCenter);
    grid_layout_rotate->addWidget(transf_rotate_ax, 1, 1, Qt::AlignLeft);
    grid_layout_rotate->addWidget(transf_rotate_ay, 1, 2, Qt::AlignLeft);
    grid_layout_rotate->addWidget(transf_rotate_az, 1, 3, Qt::AlignLeft);
    grid_layout_rotate->addWidget(transf_statictext_rot_angle, 2, 1, 1, 3, Qt::AlignCenter);
    grid_layout_rotate->addWidget(transf_rotate_angle, 3, 1, 1, 3, Qt::AlignCenter);
    groupbox_transf_rotate->setLayout(grid_layout_rotate);

    //controls for move transform
    QGroupBox *groupbox_transf_move = new QGroupBox(tr("Move"));
    QGridLayout *grid_layout_move = new QGridLayout;
    QLabel *transf_statictext_move_x = new QLabel("x", this);
    QLabel *transf_statictext_move_y = new QLabel("y", this);
    QLabel *transf_statictext_move_z = new QLabel("z", this);
    transf_move_x = new QLineEdit(this);
    transf_move_y = new QLineEdit(this);
    transf_move_z = new QLineEdit(this);
    grid_layout_move->addWidget(transf_statictext_move_x, 0, 1, Qt::AlignCenter);
    grid_layout_move->addWidget(transf_statictext_move_y, 0, 2, Qt::AlignCenter);
    grid_layout_move->addWidget(transf_statictext_move_z, 0, 3, Qt::AlignCenter);
    grid_layout_move->addWidget(transf_move_x, 1, 1, Qt::AlignLeft);
    grid_layout_move->addWidget(transf_move_y, 1, 2, Qt::AlignLeft);
    grid_layout_move->addWidget(transf_move_z, 1, 3, Qt::AlignLeft);
    groupbox_transf_move->setLayout(grid_layout_move);

    //adding groups of controls to main layout
    vert_layout_transforms->addWidget(groupbox_transf_order, Qt::AlignTop);
    vert_layout_transforms->addWidget(groupbox_transf_scale, Qt::AlignTop);
    vert_layout_transforms->addWidget(groupbox_transf_rotate, Qt::AlignTop);
    vert_layout_transforms->addWidget(groupbox_transf_move, Qt::AlignTop);
    transforms_groupbox->setLayout(vert_layout_transforms);
}

void PageGeometry::ShapeBoxSettings(void)
{
    groupbox_box_settings = new QGroupBox(tr("Box settings"));
    QGridLayout *grid_layout_shape_box = new QGridLayout;

    QGroupBox *groupbox_box_params = new QGroupBox(tr("General"));
    QGridLayout *grid_layout_box_params = new QGridLayout;
    QLabel *sh_box_statictext_name = new QLabel("name", this);
    sh_box_name = new QLineEdit(this);
    QLabel *sh_box_statictext_priority = new QLabel("priority", this);
    sh_box_priority = new QLineEdit(this);
    QLabel *sh_box_statictext_material = new QLabel("material", this);
    sh_box_material = new QComboBox(this);
    grid_layout_box_params->addWidget(sh_box_statictext_name, 0, 0, Qt::AlignLeft);
    grid_layout_box_params->addWidget(sh_box_statictext_priority, 1, 0, Qt::AlignLeft);
    grid_layout_box_params->addWidget(sh_box_statictext_material, 2, 0, Qt::AlignLeft);
    grid_layout_box_params->addWidget(sh_box_name, 0, 1, Qt::AlignLeft);
    grid_layout_box_params->addWidget(sh_box_priority, 1, 1, Qt::AlignLeft);
    grid_layout_box_params->addWidget(sh_box_material, 2, 1, Qt::AlignLeft);
    groupbox_box_params->setLayout(grid_layout_box_params);
    QLabel *sh_box_statictext_placeholder = new QLabel("", this);

    QGroupBox *groupbox_box_coords = new QGroupBox(tr("Box coordinates"));
    QGridLayout *grid_layout_box_coords = new QGridLayout;
    QLabel *coord_statictext_coord1_label = new QLabel("Start", this);
    QLabel *coord_statictext_coord2_label = new QLabel("Stop", this);
    QLabel *coord_statictext_coord_x = new QLabel("x", this);
    QLabel *coord_statictext_coord_y = new QLabel("y", this);
    QLabel *coord_statictext_coord_z = new QLabel("z", this);
    sh_box_x_coord_1 = new QLineEdit(this);
    sh_box_x_coord_2 = new QLineEdit(this);
    sh_box_y_coord_1 = new QLineEdit(this);
    sh_box_y_coord_2 = new QLineEdit(this);
    sh_box_z_coord_1 = new QLineEdit(this);
    sh_box_z_coord_2 = new QLineEdit(this);
    grid_layout_box_coords->addWidget(coord_statictext_coord1_label, 1, 0, Qt::AlignLeft);
    grid_layout_box_coords->addWidget(coord_statictext_coord2_label, 2, 0, Qt::AlignLeft);
    grid_layout_box_coords->addWidget(coord_statictext_coord_x, 0, 1, Qt::AlignCenter);
    grid_layout_box_coords->addWidget(coord_statictext_coord_y, 0, 2, Qt::AlignCenter);
    grid_layout_box_coords->addWidget(coord_statictext_coord_z, 0, 3, Qt::AlignCenter);
    grid_layout_box_coords->addWidget(sh_box_x_coord_1, 1, 1, Qt::AlignLeft);
    grid_layout_box_coords->addWidget(sh_box_y_coord_1, 1, 2, Qt::AlignLeft);
    grid_layout_box_coords->addWidget(sh_box_z_coord_1, 1, 3, Qt::AlignLeft);
    grid_layout_box_coords->addWidget(sh_box_x_coord_2, 2, 1, Qt::AlignLeft);
    grid_layout_box_coords->addWidget(sh_box_y_coord_2, 2, 2, Qt::AlignLeft);
    grid_layout_box_coords->addWidget(sh_box_z_coord_2, 2, 3, Qt::AlignLeft);
    groupbox_box_coords->setLayout(grid_layout_box_coords);

    connect(sh_box_name, SIGNAL(editingFinished()), this, SLOT(OnSetShapeTypeLayout()));

    grid_layout_shape_box->addWidget(groupbox_box_params, 0, 0, Qt::AlignTop);
    grid_layout_shape_box->addWidget(groupbox_box_coords, 1, 0, Qt::AlignTop);
    grid_layout_shape_box->addWidget(sh_box_statictext_placeholder, 2, 0, Qt::AlignTop);

    groupbox_box_settings->setLayout(grid_layout_shape_box);
}

void PageGeometry::ShapeSphereSettings(void)
{
    groupbox_sphere_settings = new QGroupBox(tr("Sphere settings"));
    QGridLayout *grid_layout_shape_sphere = new QGridLayout;

    QGroupBox *groupbox_sphere_params = new QGroupBox(tr("General"));
    QGridLayout *grid_layout_sphere_params = new QGridLayout;
    QLabel *sh_sphere_statictext_name = new QLabel("name", this);
    sh_sphere_name = new QLineEdit(this);
    QLabel *sh_sphere_statictext_priority = new QLabel("priority", this);
    sh_sphere_priority = new QLineEdit(this);
    QLabel *sh_sphere_statictext_material = new QLabel("material", this);
    sh_sphere_material = new QComboBox(this);
    grid_layout_sphere_params->addWidget(sh_sphere_statictext_name, 0, 0, Qt::AlignLeft);
    grid_layout_sphere_params->addWidget(sh_sphere_statictext_priority, 1, 0, Qt::AlignLeft);
    grid_layout_sphere_params->addWidget(sh_sphere_statictext_material, 2, 0, Qt::AlignLeft);
    grid_layout_sphere_params->addWidget(sh_sphere_name, 0, 1, Qt::AlignLeft);
    grid_layout_sphere_params->addWidget(sh_sphere_priority, 1, 1, Qt::AlignLeft);
    grid_layout_sphere_params->addWidget(sh_sphere_material, 2, 1, Qt::AlignLeft);
    groupbox_sphere_params->setLayout(grid_layout_sphere_params);
    QLabel *sh_sphere_statictext_placeholder = new QLabel("", this);

    QGroupBox *groupbox_sphere_coords = new QGroupBox(tr("Sphere coordinates"));
    QGridLayout *grid_layout_sphere_coords = new QGridLayout;
    QLabel *coord_statictext_coord1_label = new QLabel("Center", this);
    QLabel *coord_statictext_coord_x = new QLabel("x", this);
    QLabel *coord_statictext_coord_y = new QLabel("y", this);
    QLabel *coord_statictext_coord_z = new QLabel("z", this);
    QLabel *coord_statictext_radius = new QLabel("radius", this);
    sh_sphere_x_coord = new QLineEdit(this);
    sh_sphere_y_coord = new QLineEdit(this);
    sh_sphere_z_coord = new QLineEdit(this);
    sh_sphere_radius = new QLineEdit(this);
    grid_layout_sphere_coords->addWidget(coord_statictext_coord1_label, 1, 0, Qt::AlignLeft);
    grid_layout_sphere_coords->addWidget(coord_statictext_coord_x, 0, 1, Qt::AlignCenter);
    grid_layout_sphere_coords->addWidget(coord_statictext_coord_y, 0, 2, Qt::AlignCenter);
    grid_layout_sphere_coords->addWidget(coord_statictext_coord_z, 0, 3, Qt::AlignCenter);
    grid_layout_sphere_coords->addWidget(coord_statictext_radius, 2, 0, Qt::AlignCenter);
    grid_layout_sphere_coords->addWidget(sh_sphere_x_coord, 1, 1, Qt::AlignLeft);
    grid_layout_sphere_coords->addWidget(sh_sphere_y_coord, 1, 2, Qt::AlignLeft);
    grid_layout_sphere_coords->addWidget(sh_sphere_z_coord, 1, 3, Qt::AlignLeft);
    grid_layout_sphere_coords->addWidget(sh_sphere_radius, 2, 1, Qt::AlignLeft);
    groupbox_sphere_coords->setLayout(grid_layout_sphere_coords);

    connect(sh_sphere_name, SIGNAL(editingFinished()), this, SLOT(OnSetShapeTypeLayout()));

    grid_layout_shape_sphere->addWidget(groupbox_sphere_params, 0, 0, Qt::AlignTop);
    grid_layout_shape_sphere->addWidget(groupbox_sphere_coords, 1, 0, Qt::AlignTop);
    grid_layout_shape_sphere->addWidget(sh_sphere_statictext_placeholder, 2, 0, Qt::AlignTop);

    groupbox_sphere_settings->setLayout(grid_layout_shape_sphere);
}

void PageGeometry::ShapeSphericalshellSettings(void)
{
    groupbox_sphericalshell_settings = new QGroupBox(tr("Spherical Shell settings"));
    QGridLayout *grid_layout_shape_sphericalshell = new QGridLayout;

    QGroupBox *groupbox_sphericalshell_params = new QGroupBox(tr("General"));
    QGridLayout *grid_layout_sphericalshell_params = new QGridLayout;
    QLabel *sh_sphericalshell_statictext_name = new QLabel("name", this);
    sh_sphericalshell_name = new QLineEdit(this);
    QLabel *sh_sphericalshell_statictext_priority = new QLabel("priority", this);
    sh_sphericalshell_priority = new QLineEdit(this);
    QLabel *sh_sphericalshell_statictext_material = new QLabel("material", this);
    sh_sphericalshell_material = new QComboBox(this);
    grid_layout_sphericalshell_params->addWidget(sh_sphericalshell_statictext_name, 0, 0, Qt::AlignLeft);
    grid_layout_sphericalshell_params->addWidget(sh_sphericalshell_statictext_priority, 1, 0, Qt::AlignLeft);
    grid_layout_sphericalshell_params->addWidget(sh_sphericalshell_statictext_material, 2, 0, Qt::AlignLeft);
    grid_layout_sphericalshell_params->addWidget(sh_sphericalshell_name, 0, 1, Qt::AlignLeft);
    grid_layout_sphericalshell_params->addWidget(sh_sphericalshell_priority, 1, 1, Qt::AlignLeft);
    grid_layout_sphericalshell_params->addWidget(sh_sphericalshell_material, 2, 1, Qt::AlignLeft);
    groupbox_sphericalshell_params->setLayout(grid_layout_sphericalshell_params);
    QLabel *sh_sphericalshell_statictext_placeholder = new QLabel("", this);

    QGroupBox *groupbox_sphericalshell_coords = new QGroupBox(tr("Sphere coordinates"));
    QGridLayout *grid_layout_sphericalshell_coords = new QGridLayout;
    QLabel *coord_statictext_coord1_label = new QLabel("Center", this);
    QLabel *coord_statictext_coord_x = new QLabel("x", this);
    QLabel *coord_statictext_coord_y = new QLabel("y", this);
    QLabel *coord_statictext_coord_z = new QLabel("z", this);
    QLabel *coord_statictext_radius_outer = new QLabel("radius outer", this);
    QLabel *coord_statictext_radius_inner = new QLabel("radius inner", this);
    sh_sphericalshell_x_coord = new QLineEdit(this);
    sh_sphericalshell_y_coord = new QLineEdit(this);
    sh_sphericalshell_z_coord = new QLineEdit(this);
    sh_sphericalshell_radius_outer = new QLineEdit(this);
    sh_sphericalshell_radius_inner = new QLineEdit(this);
    grid_layout_sphericalshell_coords->addWidget(coord_statictext_coord1_label, 1, 0, Qt::AlignLeft);
    grid_layout_sphericalshell_coords->addWidget(coord_statictext_coord_x, 0, 1, Qt::AlignCenter);
    grid_layout_sphericalshell_coords->addWidget(coord_statictext_coord_y, 0, 2, Qt::AlignCenter);
    grid_layout_sphericalshell_coords->addWidget(coord_statictext_coord_z, 0, 3, Qt::AlignCenter);
    grid_layout_sphericalshell_coords->addWidget(coord_statictext_radius_outer, 3, 0, Qt::AlignCenter);
    grid_layout_sphericalshell_coords->addWidget(coord_statictext_radius_inner, 4, 0, Qt::AlignCenter);
    grid_layout_sphericalshell_coords->addWidget(sh_sphericalshell_x_coord, 1, 1, Qt::AlignLeft);
    grid_layout_sphericalshell_coords->addWidget(sh_sphericalshell_y_coord, 1, 2, Qt::AlignLeft);
    grid_layout_sphericalshell_coords->addWidget(sh_sphericalshell_z_coord, 1, 3, Qt::AlignLeft);
    grid_layout_sphericalshell_coords->addWidget(sh_sphericalshell_radius_outer, 3, 1, Qt::AlignLeft);
    grid_layout_sphericalshell_coords->addWidget(sh_sphericalshell_radius_inner, 4, 1, Qt::AlignLeft);
    groupbox_sphericalshell_coords->setLayout(grid_layout_sphericalshell_coords);

    connect(sh_sphericalshell_name, SIGNAL(editingFinished()), this, SLOT(OnSetShapeTypeLayout()));

    grid_layout_shape_sphericalshell->addWidget(groupbox_sphericalshell_params, 0, 0, Qt::AlignTop);
    grid_layout_shape_sphericalshell->addWidget(groupbox_sphericalshell_coords, 1, 0, Qt::AlignTop);
    grid_layout_shape_sphericalshell->addWidget(sh_sphericalshell_statictext_placeholder, 2, 0, Qt::AlignTop);

    groupbox_sphericalshell_settings->setLayout(grid_layout_shape_sphericalshell);
}

void PageGeometry::ShapeCylinderSettings(void)
{
    groupbox_cylinder_settings = new QGroupBox(tr("Cylinder settings"));
    QGridLayout *grid_layout_shape_cylinder = new QGridLayout;

    QGroupBox *groupbox_cylinder_params = new QGroupBox(tr("General"));
    QGridLayout *grid_layout_cylinder_params = new QGridLayout;
    QLabel *sh_cylinder_statictext_name = new QLabel("name", this);
    sh_cylinder_name = new QLineEdit(this);
    QLabel *sh_cylinder_statictext_priority = new QLabel("priority", this);
    sh_cylinder_priority = new QLineEdit(this);
    QLabel *sh_cylinder_statictext_material = new QLabel("material", this);
    sh_cylinder_material = new QComboBox(this);
    grid_layout_cylinder_params->addWidget(sh_cylinder_statictext_name, 0, 0, Qt::AlignLeft);
    grid_layout_cylinder_params->addWidget(sh_cylinder_statictext_priority, 1, 0, Qt::AlignLeft);
    grid_layout_cylinder_params->addWidget(sh_cylinder_statictext_material, 2, 0, Qt::AlignLeft);
    grid_layout_cylinder_params->addWidget(sh_cylinder_name, 0, 1, Qt::AlignLeft);
    grid_layout_cylinder_params->addWidget(sh_cylinder_priority, 1, 1, Qt::AlignLeft);
    grid_layout_cylinder_params->addWidget(sh_cylinder_material, 2, 1, Qt::AlignLeft);
    groupbox_cylinder_params->setLayout(grid_layout_cylinder_params);
    QLabel *sh_cylinder_statictext_placeholder = new QLabel("", this);

    QGroupBox *groupbox_cylinder_coords = new QGroupBox(tr("Cylinder coordinates"));
    QGridLayout *grid_layout_cylinder_coords = new QGridLayout;
    QLabel *coord_statictext_coord1_label = new QLabel("Start", this);
    QLabel *coord_statictext_coord2_label = new QLabel("Stop", this);
    QLabel *coord_statictext_coord_x = new QLabel("x", this);
    QLabel *coord_statictext_coord_y = new QLabel("y", this);
    QLabel *coord_statictext_coord_z = new QLabel("z", this);
    QLabel *coord_statictext_radius = new QLabel("radius", this);
    sh_cylinder_x_coord_1 = new QLineEdit(this);
    sh_cylinder_x_coord_2 = new QLineEdit(this);
    sh_cylinder_y_coord_1 = new QLineEdit(this);
    sh_cylinder_y_coord_2 = new QLineEdit(this);
    sh_cylinder_z_coord_1 = new QLineEdit(this);
    sh_cylinder_z_coord_2 = new QLineEdit(this);
    sh_cylinder_radius = new QLineEdit(this);
    grid_layout_cylinder_coords->addWidget(coord_statictext_coord1_label, 1, 0, Qt::AlignLeft);
    grid_layout_cylinder_coords->addWidget(coord_statictext_coord2_label, 2, 0, Qt::AlignLeft);
    grid_layout_cylinder_coords->addWidget(coord_statictext_coord_x, 0, 1, Qt::AlignCenter);
    grid_layout_cylinder_coords->addWidget(coord_statictext_coord_y, 0, 2, Qt::AlignCenter);
    grid_layout_cylinder_coords->addWidget(coord_statictext_coord_z, 0, 3, Qt::AlignCenter);
    grid_layout_cylinder_coords->addWidget(coord_statictext_radius, 3, 0, Qt::AlignLeft);
    grid_layout_cylinder_coords->addWidget(sh_cylinder_x_coord_1, 1, 1, Qt::AlignLeft);
    grid_layout_cylinder_coords->addWidget(sh_cylinder_y_coord_1, 1, 2, Qt::AlignLeft);
    grid_layout_cylinder_coords->addWidget(sh_cylinder_z_coord_1, 1, 3, Qt::AlignLeft);
    grid_layout_cylinder_coords->addWidget(sh_cylinder_x_coord_2, 2, 1, Qt::AlignLeft);
    grid_layout_cylinder_coords->addWidget(sh_cylinder_y_coord_2, 2, 2, Qt::AlignLeft);
    grid_layout_cylinder_coords->addWidget(sh_cylinder_z_coord_2, 2, 3, Qt::AlignLeft);
    grid_layout_cylinder_coords->addWidget(sh_cylinder_radius, 3, 1, Qt::AlignCenter);
    groupbox_cylinder_coords->setLayout(grid_layout_cylinder_coords);

    connect(sh_cylinder_name, SIGNAL(editingFinished()), this, SLOT(OnSetShapeTypeLayout()));

    grid_layout_shape_cylinder->addWidget(groupbox_cylinder_params, 0, 0, Qt::AlignTop);
    grid_layout_shape_cylinder->addWidget(groupbox_cylinder_coords, 1, 0, Qt::AlignTop);
    grid_layout_shape_cylinder->addWidget(sh_cylinder_statictext_placeholder, 2, 0, Qt::AlignTop);

    groupbox_cylinder_settings->setLayout(grid_layout_shape_cylinder);
}

void PageGeometry::ShapeCylindricalshellSettings(void)
{
    groupbox_cylindricalshell_settings = new QGroupBox(tr("Cylindrical Shell settings"));
    QGridLayout *grid_layout_shape_cylindricalshell = new QGridLayout;

    QGroupBox *groupbox_cylindricalshell_params = new QGroupBox(tr("General"));
    QGridLayout *grid_layout_cylindricalshell_params = new QGridLayout;
    QLabel *sh_cylindricalshell_statictext_name = new QLabel("name", this);
    sh_cylindricalshell_name = new QLineEdit(this);
    QLabel *sh_cylindricalshell_statictext_priority = new QLabel("priority", this);
    sh_cylindricalshell_priority = new QLineEdit(this);
    QLabel *sh_cylindricalshell_statictext_material = new QLabel("material", this);
    sh_cylindricalshell_material = new QComboBox(this);
    grid_layout_cylindricalshell_params->addWidget(sh_cylindricalshell_statictext_name, 0, 0, Qt::AlignLeft);
    grid_layout_cylindricalshell_params->addWidget(sh_cylindricalshell_statictext_priority, 1, 0, Qt::AlignLeft);
    grid_layout_cylindricalshell_params->addWidget(sh_cylindricalshell_statictext_material, 2, 0, Qt::AlignLeft);
    grid_layout_cylindricalshell_params->addWidget(sh_cylindricalshell_name, 0, 1, Qt::AlignLeft);
    grid_layout_cylindricalshell_params->addWidget(sh_cylindricalshell_priority, 1, 1, Qt::AlignLeft);
    grid_layout_cylindricalshell_params->addWidget(sh_cylindricalshell_material, 2, 1, Qt::AlignLeft);
    groupbox_cylindricalshell_params->setLayout(grid_layout_cylindricalshell_params);
    QLabel *sh_cylindricalshell_statictext_placeholder = new QLabel("", this);

    QGroupBox *groupbox_cylindricalshell_coords = new QGroupBox(tr("Cylinder coordinates"));
    QGridLayout *grid_layout_cylindricalshell_coords = new QGridLayout;
    QLabel *coord_statictext_coord1_label = new QLabel("Start", this);
    QLabel *coord_statictext_coord2_label = new QLabel("Stop", this);
    QLabel *coord_statictext_coord_x = new QLabel("x", this);
    QLabel *coord_statictext_coord_y = new QLabel("y", this);
    QLabel *coord_statictext_coord_z = new QLabel("z", this);
    QLabel *coord_statictext_radius_outer = new QLabel("radius outer", this);
    QLabel *coord_statictext_radius_inner = new QLabel("radius inner", this);
    sh_cylindricalshell_x_coord_1 = new QLineEdit(this);
    sh_cylindricalshell_x_coord_2 = new QLineEdit(this);
    sh_cylindricalshell_y_coord_1 = new QLineEdit(this);
    sh_cylindricalshell_y_coord_2 = new QLineEdit(this);
    sh_cylindricalshell_z_coord_1 = new QLineEdit(this);
    sh_cylindricalshell_z_coord_2 = new QLineEdit(this);
    sh_cylindricalshell_radius_outer = new QLineEdit(this);
    sh_cylindricalshell_radius_inner = new QLineEdit(this);
    grid_layout_cylindricalshell_coords->addWidget(coord_statictext_coord1_label, 1, 0, Qt::AlignLeft);
    grid_layout_cylindricalshell_coords->addWidget(coord_statictext_coord2_label, 2, 0, Qt::AlignLeft);
    grid_layout_cylindricalshell_coords->addWidget(coord_statictext_coord_x, 0, 1, Qt::AlignCenter);
    grid_layout_cylindricalshell_coords->addWidget(coord_statictext_coord_y, 0, 2, Qt::AlignCenter);
    grid_layout_cylindricalshell_coords->addWidget(coord_statictext_coord_z, 0, 3, Qt::AlignCenter);
    grid_layout_cylindricalshell_coords->addWidget(coord_statictext_radius_outer, 3, 0, Qt::AlignLeft);
    grid_layout_cylindricalshell_coords->addWidget(coord_statictext_radius_inner, 4, 0, Qt::AlignLeft);
    grid_layout_cylindricalshell_coords->addWidget(sh_cylindricalshell_x_coord_1, 1, 1, Qt::AlignLeft);
    grid_layout_cylindricalshell_coords->addWidget(sh_cylindricalshell_y_coord_1, 1, 2, Qt::AlignLeft);
    grid_layout_cylindricalshell_coords->addWidget(sh_cylindricalshell_z_coord_1, 1, 3, Qt::AlignLeft);
    grid_layout_cylindricalshell_coords->addWidget(sh_cylindricalshell_x_coord_2, 2, 1, Qt::AlignLeft);
    grid_layout_cylindricalshell_coords->addWidget(sh_cylindricalshell_y_coord_2, 2, 2, Qt::AlignLeft);
    grid_layout_cylindricalshell_coords->addWidget(sh_cylindricalshell_z_coord_2, 2, 3, Qt::AlignLeft);
    grid_layout_cylindricalshell_coords->addWidget(sh_cylindricalshell_radius_outer, 3, 1, Qt::AlignCenter);
    grid_layout_cylindricalshell_coords->addWidget(sh_cylindricalshell_radius_inner, 4, 1, Qt::AlignCenter);
    groupbox_cylindricalshell_coords->setLayout(grid_layout_cylindricalshell_coords);

    connect(sh_cylindricalshell_name, SIGNAL(editingFinished()), this, SLOT(OnSetShapeTypeLayout()));

    grid_layout_shape_cylindricalshell->addWidget(groupbox_cylindricalshell_params, 0, 0, Qt::AlignTop);
    grid_layout_shape_cylindricalshell->addWidget(groupbox_cylindricalshell_coords, 1, 0, Qt::AlignTop);
    grid_layout_shape_cylindricalshell->addWidget(sh_cylindricalshell_statictext_placeholder, 2, 0, Qt::AlignTop);

    groupbox_cylindricalshell_settings->setLayout(grid_layout_shape_cylindricalshell);
}

void PageGeometry::ShapeCurveSettings(void)
{
    groupbox_curve_settings = new QGroupBox(tr("Curve settings"));
    QGridLayout *grid_layout_shape_curve = new QGridLayout;

    QGroupBox *groupbox_curve_params = new QGroupBox(tr("General"));
    QGridLayout *grid_layout_curve_params = new QGridLayout;
    QLabel *sh_curve_statictext_name = new QLabel("name", this);
    sh_curve_name = new QLineEdit(this);
    QLabel *sh_curve_statictext_priority = new QLabel("priority", this);
    sh_curve_priority = new QLineEdit(this);
    QLabel *sh_curve_statictext_material = new QLabel("material", this);
    sh_curve_material = new QComboBox(this);
    grid_layout_curve_params->addWidget(sh_curve_statictext_name, 0, 0, Qt::AlignLeft);
    grid_layout_curve_params->addWidget(sh_curve_statictext_priority, 1, 0, Qt::AlignLeft);
    grid_layout_curve_params->addWidget(sh_curve_statictext_material, 2, 0, Qt::AlignLeft);
    grid_layout_curve_params->addWidget(sh_curve_name, 0, 1, Qt::AlignLeft);
    grid_layout_curve_params->addWidget(sh_curve_priority, 1, 1, Qt::AlignLeft);
    grid_layout_curve_params->addWidget(sh_curve_material, 2, 1, Qt::AlignLeft);
    groupbox_curve_params->setLayout(grid_layout_curve_params);
    QLabel *sh_curve_statictext_placeholder = new QLabel("", this);

    QGroupBox *groupbox_curve_coords = new QGroupBox(tr("Curve coordinates"));
    QGridLayout *grid_layout_curve_coords = new QGridLayout;
    QLabel *sh_curve_statictext_pointslist = new QLabel("list of points:", this);
    sh_curve_pointslist = new QTableWidget(this);
    sh_curve_pointslist->setColumnCount(3);
    sh_curve_pointslist->setRowCount(1);
    QStringList table_header;
    table_header << "x" << "y" << "z";
    sh_curve_pointslist->setHorizontalHeaderLabels(table_header);
    sh_curve_pointslist->horizontalHeader()->setSectionResizeMode(QHeaderView::Stretch);
    connect(sh_curve_pointslist, SIGNAL(cellChanged(int, int)), this, SLOT(OnPointslistUpdate(int, int)));

    grid_layout_curve_coords->addWidget(sh_curve_statictext_pointslist, 0, 0, Qt::AlignLeft);
    grid_layout_curve_coords->addWidget(sh_curve_pointslist, 1, 0, 5, 2, Qt::AlignLeft);
    groupbox_curve_coords->setLayout(grid_layout_curve_coords);

    connect(sh_curve_name, SIGNAL(editingFinished()), this, SLOT(OnSetShapeTypeLayout()));

    grid_layout_shape_curve->addWidget(groupbox_curve_params, 0, 0, Qt::AlignTop);
    grid_layout_shape_curve->addWidget(groupbox_curve_coords, 1, 0, Qt::AlignTop);
    grid_layout_shape_curve->addWidget(sh_curve_statictext_placeholder, 2, 0, Qt::AlignTop);

    groupbox_curve_settings->setLayout(grid_layout_shape_curve);
}

void PageGeometry::ShapeWireSettings(void)
{
    groupbox_wire_settings = new QGroupBox(tr("Wire settings"));
    QGridLayout *grid_layout_shape_wire = new QGridLayout;

    QGroupBox *groupbox_wire_params = new QGroupBox(tr("General"));
    QGridLayout *grid_layout_wire_params = new QGridLayout;
    QLabel *sh_wire_statictext_name = new QLabel("name", this);
    sh_wire_name = new QLineEdit(this);
    QLabel *sh_wire_statictext_priority = new QLabel("priority", this);
    sh_wire_priority = new QLineEdit(this);
    QLabel *sh_wire_statictext_material = new QLabel("material", this);
    sh_wire_material = new QComboBox(this);
    grid_layout_wire_params->addWidget(sh_wire_statictext_name, 0, 0, Qt::AlignLeft);
    grid_layout_wire_params->addWidget(sh_wire_statictext_priority, 1, 0, Qt::AlignLeft);
    grid_layout_wire_params->addWidget(sh_wire_statictext_material, 2, 0, Qt::AlignLeft);
    grid_layout_wire_params->addWidget(sh_wire_name, 0, 1, Qt::AlignLeft);
    grid_layout_wire_params->addWidget(sh_wire_priority, 1, 1, Qt::AlignLeft);
    grid_layout_wire_params->addWidget(sh_wire_material, 2, 1, Qt::AlignLeft);
    groupbox_wire_params->setLayout(grid_layout_wire_params);
    QLabel *sh_wire_statictext_placeholder = new QLabel("", this);

    QGroupBox *groupbox_wire_coords = new QGroupBox(tr("Wire coordinates"));
    QGridLayout *grid_layout_wire_coords = new QGridLayout;
    QLabel *sh_wire_statictext_radius = new QLabel("radius", this);
    sh_wire_radius = new QLineEdit(this);
    QLabel *sh_wire_statictext_pointslist = new QLabel("list of points:", this);
    sh_wire_pointslist = new QTableWidget(this);
    sh_wire_pointslist->setColumnCount(3);
    sh_wire_pointslist->setRowCount(1);
    QStringList table_header;
    table_header << "x" << "y" << "z";
    sh_wire_pointslist->setHorizontalHeaderLabels(table_header);
    sh_wire_pointslist->horizontalHeader()->setSectionResizeMode(QHeaderView::Stretch);
    connect(sh_wire_pointslist, SIGNAL(cellChanged(int, int)), this, SLOT(OnPointslistUpdate(int, int)));

    grid_layout_wire_coords->addWidget(sh_wire_statictext_radius, 0, 0, Qt::AlignLeft);
    grid_layout_wire_coords->addWidget(sh_wire_radius, 0, 1, Qt::AlignLeft);
    grid_layout_wire_coords->addWidget(sh_wire_statictext_pointslist, 1, 0, Qt::AlignLeft);
    grid_layout_wire_coords->addWidget(sh_wire_pointslist, 2, 0, 5, 2, Qt::AlignLeft);
    groupbox_wire_coords->setLayout(grid_layout_wire_coords);

    connect(sh_wire_name, SIGNAL(editingFinished()), this, SLOT(OnSetShapeTypeLayout()));

    grid_layout_shape_wire->addWidget(groupbox_wire_params, 0, 0, Qt::AlignTop);
    grid_layout_shape_wire->addWidget(groupbox_wire_coords, 1, 0, Qt::AlignTop);
    grid_layout_shape_wire->addWidget(sh_wire_statictext_placeholder, 2, 0, Qt::AlignTop);

    groupbox_wire_settings->setLayout(grid_layout_shape_wire);
}

void PageGeometry::ShapePolygonSettings(void)
{
    groupbox_polygon_settings = new QGroupBox(tr("Polygon settings"));
    QGridLayout *grid_layout_shape_polygon = new QGridLayout;

    QGroupBox *groupbox_polygon_params = new QGroupBox(tr("General"));
    QGridLayout *grid_layout_polygon_params = new QGridLayout;
    QLabel *sh_polygon_statictext_name = new QLabel("name", this);
    sh_polygon_name = new QLineEdit(this);
    QLabel *sh_polygon_statictext_priority = new QLabel("priority", this);
    sh_polygon_priority = new QLineEdit(this);
    QLabel *sh_polygon_statictext_material = new QLabel("material", this);
    sh_polygon_material = new QComboBox(this);
    grid_layout_polygon_params->addWidget(sh_polygon_statictext_name, 0, 0, Qt::AlignLeft);
    grid_layout_polygon_params->addWidget(sh_polygon_statictext_priority, 1, 0, Qt::AlignLeft);
    grid_layout_polygon_params->addWidget(sh_polygon_statictext_material, 2, 0, Qt::AlignLeft);
    grid_layout_polygon_params->addWidget(sh_polygon_name, 0, 1, Qt::AlignLeft);
    grid_layout_polygon_params->addWidget(sh_polygon_priority, 1, 1, Qt::AlignLeft);
    grid_layout_polygon_params->addWidget(sh_polygon_material, 2, 1, Qt::AlignLeft);
    groupbox_polygon_params->setLayout(grid_layout_polygon_params);
    QLabel *sh_polygon_statictext_placeholder = new QLabel("", this);

    QGroupBox *groupbox_polygon_coords = new QGroupBox(tr("Polygon coordinates"));
    QGridLayout *grid_layout_polygon_coords = new QGridLayout;
    QLabel *sh_polygon_statictext_norm_dir = new QLabel("normal direction", this);
    sh_polygon_norm_dir = new QLineEdit(this);
    QLabel *sh_polygon_statictext_elevation = new QLabel("elevation", this);
    sh_polygon_elevation= new QLineEdit(this);
    QLabel *sh_polygon_statictext_pointslist = new QLabel("list of points:", this);
    sh_polygon_pointslist = new QTableWidget(this);
    sh_polygon_pointslist->setColumnCount(2);
    sh_polygon_pointslist->setRowCount(1);
    QStringList table_header;
    table_header << "x" << "y";
    sh_polygon_pointslist->setHorizontalHeaderLabels(table_header);
    sh_polygon_pointslist->horizontalHeader()->setSectionResizeMode(QHeaderView::Stretch);
    connect(sh_polygon_pointslist, SIGNAL(cellChanged(int, int)), this, SLOT(OnPointslistUpdate(int, int)));

    grid_layout_polygon_coords->addWidget(sh_polygon_statictext_norm_dir, 0, 0, Qt::AlignLeft);
    grid_layout_polygon_coords->addWidget(sh_polygon_norm_dir, 0, 1, Qt::AlignLeft);
    grid_layout_polygon_coords->addWidget(sh_polygon_statictext_elevation, 1, 0, Qt::AlignLeft);
    grid_layout_polygon_coords->addWidget(sh_polygon_elevation, 1, 1, Qt::AlignLeft);
    grid_layout_polygon_coords->addWidget(sh_polygon_statictext_pointslist, 2, 0, Qt::AlignLeft);
    grid_layout_polygon_coords->addWidget(sh_polygon_pointslist, 3, 0, 5, 2, Qt::AlignLeft);
    groupbox_polygon_coords->setLayout(grid_layout_polygon_coords);

    connect(sh_polygon_name, SIGNAL(editingFinished()), this, SLOT(OnSetShapeTypeLayout()));

    grid_layout_shape_polygon->addWidget(groupbox_polygon_params, 0, 0, Qt::AlignTop);
    grid_layout_shape_polygon->addWidget(groupbox_polygon_coords, 1, 0, Qt::AlignTop);
    grid_layout_shape_polygon->addWidget(sh_polygon_statictext_placeholder, 2, 0, Qt::AlignTop);

    groupbox_polygon_settings->setLayout(grid_layout_shape_polygon);
}

void PageGeometry::ShapeExtrudedPolygonSettings()
{
    groupbox_extrudedpolygon_settings = new QGroupBox(tr("Extruded polygon settings"));
    QGridLayout *grid_layout_shape_extrudedpolygon = new QGridLayout;

    QGroupBox *groupbox_extrudedpolygon_params = new QGroupBox(tr("General"));
    QGridLayout *grid_layout_extrudedpolygon_params = new QGridLayout;
    QLabel *sh_extrudedpolygon_statictext_name = new QLabel("name", this);
    sh_extrudedpolygon_name = new QLineEdit(this);
    QLabel *sh_extrudedpolygon_statictext_priority = new QLabel("priority", this);
    sh_extrudedpolygon_priority = new QLineEdit(this);
    QLabel *sh_extrudedpolygon_statictext_material = new QLabel("material", this);
    sh_extrudedpolygon_material = new QComboBox(this);
    grid_layout_extrudedpolygon_params->addWidget(sh_extrudedpolygon_statictext_name, 0, 0, Qt::AlignLeft);
    grid_layout_extrudedpolygon_params->addWidget(sh_extrudedpolygon_statictext_priority, 1, 0, Qt::AlignLeft);
    grid_layout_extrudedpolygon_params->addWidget(sh_extrudedpolygon_statictext_material, 2, 0, Qt::AlignLeft);
    grid_layout_extrudedpolygon_params->addWidget(sh_extrudedpolygon_name, 0, 1, Qt::AlignLeft);
    grid_layout_extrudedpolygon_params->addWidget(sh_extrudedpolygon_priority, 1, 1, Qt::AlignLeft);
    grid_layout_extrudedpolygon_params->addWidget(sh_extrudedpolygon_material, 2, 1, Qt::AlignLeft);
    groupbox_extrudedpolygon_params->setLayout(grid_layout_extrudedpolygon_params);
    QLabel *sh_extrudedpolygon_statictext_placeholder = new QLabel("", this);

    QGroupBox *groupbox_extrudedpolygon_coords = new QGroupBox(tr("Extruded polygon coordinates"));
    QGridLayout *grid_layout_extrudedpolygon_coords = new QGridLayout;
    QLabel *sh_extrudedpolygon_statictext_norm_dir = new QLabel("normal direction", this);
    sh_extrudedpolygon_norm_dir = new QLineEdit(this);
    QLabel *sh_extrudedpolygon_statictext_elevation = new QLabel("elevation", this);
    sh_extrudedpolygon_elevation= new QLineEdit(this);
    QLabel *sh_extrudedpolygon_statictext_length = new QLabel("length", this);
    sh_extrudedpolygon_length= new QLineEdit(this);
    QLabel *sh_extrudedpolygon_statictext_pointslist = new QLabel("list of points:", this);
    sh_extrudedpolygon_pointslist = new QTableWidget(this);
    sh_extrudedpolygon_pointslist->setColumnCount(2);
    sh_extrudedpolygon_pointslist->setRowCount(1);
    QStringList table_header;
    table_header << "x" << "y";
    sh_extrudedpolygon_pointslist->setHorizontalHeaderLabels(table_header);
    sh_extrudedpolygon_pointslist->horizontalHeader()->setSectionResizeMode(QHeaderView::Stretch);
    connect(sh_extrudedpolygon_pointslist, SIGNAL(cellChanged(int, int)), this, SLOT(OnPointslistUpdate(int, int)));

    grid_layout_extrudedpolygon_coords->addWidget(sh_extrudedpolygon_statictext_norm_dir, 0, 0, Qt::AlignLeft);
    grid_layout_extrudedpolygon_coords->addWidget(sh_extrudedpolygon_norm_dir, 0, 1, Qt::AlignLeft);
    grid_layout_extrudedpolygon_coords->addWidget(sh_extrudedpolygon_statictext_elevation, 1, 0, Qt::AlignLeft);
    grid_layout_extrudedpolygon_coords->addWidget(sh_extrudedpolygon_elevation, 1, 1, Qt::AlignLeft);
    grid_layout_extrudedpolygon_coords->addWidget(sh_extrudedpolygon_statictext_length, 2, 0, Qt::AlignLeft);
    grid_layout_extrudedpolygon_coords->addWidget(sh_extrudedpolygon_length, 2, 1, Qt::AlignLeft);
    grid_layout_extrudedpolygon_coords->addWidget(sh_extrudedpolygon_statictext_pointslist, 3, 0, Qt::AlignLeft);
    grid_layout_extrudedpolygon_coords->addWidget(sh_extrudedpolygon_pointslist, 4, 0, 5, 2, Qt::AlignLeft);
    groupbox_extrudedpolygon_coords->setLayout(grid_layout_extrudedpolygon_coords);

    connect(sh_extrudedpolygon_name, SIGNAL(editingFinished()), this, SLOT(OnSetShapeTypeLayout()));

    grid_layout_shape_extrudedpolygon->addWidget(groupbox_extrudedpolygon_params, 0, 0, Qt::AlignTop);
    grid_layout_shape_extrudedpolygon->addWidget(groupbox_extrudedpolygon_coords, 1, 0, Qt::AlignTop);
    grid_layout_shape_extrudedpolygon->addWidget(sh_extrudedpolygon_statictext_placeholder, 2, 0, Qt::AlignTop);

    groupbox_extrudedpolygon_settings->setLayout(grid_layout_shape_extrudedpolygon);
}

void PageGeometry::ShapeRotationalPolygonSettings(void)
{
    groupbox_rotationalpolygon_settings = new QGroupBox(tr("Rotational polygon settings"));
    QGridLayout *grid_layout_shape_rotationalpolygon = new QGridLayout;

    QGroupBox *groupbox_rotationalpolygon_params = new QGroupBox(tr("General"));
    QGridLayout *grid_layout_rotationalpolygon_params = new QGridLayout;
    QLabel *sh_rotationalpolygon_statictext_name = new QLabel("name", this);
    sh_rotationalpolygon_name = new QLineEdit(this);
    QLabel *sh_rotationalpolygon_statictext_priority = new QLabel("priority", this);
    sh_rotationalpolygon_priority = new QLineEdit(this);
    QLabel *sh_rotationalpolygon_statictext_material = new QLabel("material", this);
    sh_rotationalpolygon_material = new QComboBox(this);
    grid_layout_rotationalpolygon_params->addWidget(sh_rotationalpolygon_statictext_name, 0, 0, Qt::AlignLeft);
    grid_layout_rotationalpolygon_params->addWidget(sh_rotationalpolygon_statictext_priority, 1, 0, Qt::AlignLeft);
    grid_layout_rotationalpolygon_params->addWidget(sh_rotationalpolygon_statictext_material, 2, 0, Qt::AlignLeft);
    grid_layout_rotationalpolygon_params->addWidget(sh_rotationalpolygon_name, 0, 1, Qt::AlignLeft);
    grid_layout_rotationalpolygon_params->addWidget(sh_rotationalpolygon_priority, 1, 1, Qt::AlignLeft);
    grid_layout_rotationalpolygon_params->addWidget(sh_rotationalpolygon_material, 2, 1, Qt::AlignLeft);
    groupbox_rotationalpolygon_params->setLayout(grid_layout_rotationalpolygon_params);
    QLabel *sh_rotationalpolygon_statictext_placeholder = new QLabel("", this);

    QGroupBox *groupbox_rotationalpolygon_coords = new QGroupBox(tr("Rotational polygon coordinates"));
    QGridLayout *grid_layout_rotationalpolygon_coords = new QGridLayout;
    QLabel *sh_rotationalpolygon_statictext_norm_dir = new QLabel("normal direction", this);
    sh_rotationalpolygon_norm_dir = new QLineEdit(this);
    QLabel *sh_rotationalpolygon_statictext_rot_axis = new QLabel("rotation axis", this);
    sh_rotationalpolygon_rot_axis = new QLineEdit(this);
    QLabel *sh_rotationalpolygon_statictext_angle1 = new QLabel("angle start", this);
    sh_rotationalpolygon_angle1 = new QLineEdit(this);
    QLabel *sh_rotationalpolygon_statictext_angle2 = new QLabel("angle end", this);
    sh_rotationalpolygon_angle2 = new QLineEdit(this);
    QLabel *sh_rotationalpolygon_statictext_pointslist = new QLabel("list of points:", this);
    sh_rotationalpolygon_pointslist = new QTableWidget(this);
    sh_rotationalpolygon_pointslist->setColumnCount(2);
    sh_rotationalpolygon_pointslist->setRowCount(1);
    QStringList table_header;
    table_header << "x" << "y";
    sh_rotationalpolygon_pointslist->setHorizontalHeaderLabels(table_header);
    sh_rotationalpolygon_pointslist->horizontalHeader()->setSectionResizeMode(QHeaderView::Stretch);
    connect(sh_rotationalpolygon_pointslist, SIGNAL(cellChanged(int, int)), this, SLOT(OnPointslistUpdate(int, int)));

    grid_layout_rotationalpolygon_coords->addWidget(sh_rotationalpolygon_statictext_norm_dir, 0, 0, Qt::AlignLeft);
    grid_layout_rotationalpolygon_coords->addWidget(sh_rotationalpolygon_norm_dir, 0, 1, Qt::AlignLeft);
    grid_layout_rotationalpolygon_coords->addWidget(sh_rotationalpolygon_statictext_rot_axis, 1, 0, Qt::AlignLeft);
    grid_layout_rotationalpolygon_coords->addWidget(sh_rotationalpolygon_rot_axis, 1, 1, Qt::AlignLeft);
    grid_layout_rotationalpolygon_coords->addWidget(sh_rotationalpolygon_statictext_angle1, 2, 0, Qt::AlignLeft);
    grid_layout_rotationalpolygon_coords->addWidget(sh_rotationalpolygon_angle1, 2, 1, Qt::AlignLeft);
    grid_layout_rotationalpolygon_coords->addWidget(sh_rotationalpolygon_statictext_angle2, 3, 0, Qt::AlignLeft);
    grid_layout_rotationalpolygon_coords->addWidget(sh_rotationalpolygon_angle2, 3, 1, Qt::AlignLeft);
    grid_layout_rotationalpolygon_coords->addWidget(sh_rotationalpolygon_statictext_pointslist, 4, 0, Qt::AlignLeft);
    grid_layout_rotationalpolygon_coords->addWidget(sh_rotationalpolygon_pointslist, 5, 0, 4, 2, Qt::AlignLeft);
    groupbox_rotationalpolygon_coords->setLayout(grid_layout_rotationalpolygon_coords);

    connect(sh_rotationalpolygon_name, SIGNAL(editingFinished()), this, SLOT(OnSetShapeTypeLayout()));

    grid_layout_shape_rotationalpolygon->addWidget(groupbox_rotationalpolygon_params, 0, 0, Qt::AlignTop);
    grid_layout_shape_rotationalpolygon->addWidget(groupbox_rotationalpolygon_coords, 1, 0, Qt::AlignTop);
    grid_layout_shape_rotationalpolygon->addWidget(sh_rotationalpolygon_statictext_placeholder, 2, 0, Qt::AlignTop);

    groupbox_rotationalpolygon_settings->setLayout(grid_layout_shape_rotationalpolygon);
}

void PageGeometry::ShapePolyhedronSettings()
{
    groupbox_polyhedron_settings = new QGroupBox(tr("Polyhedron settings"));
    QGridLayout *grid_layout_shape_polyhedron = new QGridLayout;

    QGroupBox *groupbox_polyhedron_params = new QGroupBox(tr("General"));
    QGridLayout *grid_layout_polyhedron_params = new QGridLayout;
    QLabel *sh_polyhedron_statictext_name = new QLabel("name", this);
    sh_polyhedron_name = new QLineEdit(this);
    QLabel *sh_polyhedron_statictext_priority = new QLabel("priority", this);
    sh_polyhedron_priority = new QLineEdit(this);
    QLabel *sh_polyhedron_statictext_material = new QLabel("material", this);
    sh_polyhedron_material = new QComboBox(this);
    grid_layout_polyhedron_params->addWidget(sh_polyhedron_statictext_name, 0, 0, Qt::AlignLeft);
    grid_layout_polyhedron_params->addWidget(sh_polyhedron_statictext_priority, 1, 0, Qt::AlignLeft);
    grid_layout_polyhedron_params->addWidget(sh_polyhedron_statictext_material, 2, 0, Qt::AlignLeft);
    grid_layout_polyhedron_params->addWidget(sh_polyhedron_name, 0, 1, Qt::AlignLeft);
    grid_layout_polyhedron_params->addWidget(sh_polyhedron_priority, 1, 1, Qt::AlignLeft);
    grid_layout_polyhedron_params->addWidget(sh_polyhedron_material, 2, 1, Qt::AlignLeft);
    groupbox_polyhedron_params->setLayout(grid_layout_polyhedron_params);
    QLabel *sh_polyhedron_statictext_placeholder = new QLabel("", this);

    QGroupBox *groupbox_polyhedron_coords = new QGroupBox(tr("Polyhedron coordinates"));
    QGridLayout *grid_layout_polyhedron_coords = new QGridLayout;

    QLabel *sh_polyhedron_statictext_verticeslist = new QLabel("list of vertices:", this);
    sh_polyhedron_verticeslist = new QTableWidget(this);
    sh_polyhedron_verticeslist->setColumnCount(3);
    sh_polyhedron_verticeslist->setRowCount(1);
    QStringList table_vertices_header;
    table_vertices_header << "x" << "y" << "z";
    sh_polyhedron_verticeslist->setHorizontalHeaderLabels(table_vertices_header);
    sh_polyhedron_verticeslist->horizontalHeader()->setSectionResizeMode(QHeaderView::Stretch);
    connect(sh_polyhedron_verticeslist, SIGNAL(cellChanged(int, int)), this, SLOT(OnPointslistUpdate(int, int)));

    QLabel *sh_polyhedron_statictext_faceslist = new QLabel("list of faces:", this);
    sh_polyhedron_faceslist = new QTableWidget(this);
    sh_polyhedron_faceslist->setColumnCount(3);
    sh_polyhedron_faceslist->setRowCount(1);
    QStringList table_faces_header;
    table_faces_header << "x" << "y" << "z";
    sh_polyhedron_faceslist->setHorizontalHeaderLabels(table_faces_header);
    sh_polyhedron_faceslist->horizontalHeader()->setSectionResizeMode(QHeaderView::Stretch);
    connect(sh_polyhedron_faceslist, SIGNAL(cellChanged(int, int)), this, SLOT(OnPointslistUpdate(int, int)));


    grid_layout_polyhedron_coords->addWidget(sh_polyhedron_statictext_verticeslist, 3, 0, Qt::AlignLeft);
    grid_layout_polyhedron_coords->addWidget(sh_polyhedron_verticeslist, 4, 0, 2, 2, Qt::AlignLeft);
    grid_layout_polyhedron_coords->addWidget(sh_polyhedron_statictext_faceslist, 6, 0, Qt::AlignLeft);
    grid_layout_polyhedron_coords->addWidget(sh_polyhedron_faceslist, 7, 0, 9, 2, Qt::AlignLeft);
    groupbox_polyhedron_coords->setLayout(grid_layout_polyhedron_coords);

    connect(sh_polyhedron_name, SIGNAL(editingFinished()), this, SLOT(OnSetShapeTypeLayout()));

    grid_layout_shape_polyhedron->addWidget(groupbox_polyhedron_params, 0, 0, Qt::AlignTop);
    grid_layout_shape_polyhedron->addWidget(groupbox_polyhedron_coords, 1, 0, Qt::AlignTop);
    grid_layout_shape_polyhedron->addWidget(sh_polyhedron_statictext_placeholder, 2, 0, Qt::AlignTop);

    groupbox_polyhedron_settings->setLayout(grid_layout_shape_polyhedron);
}

void PageGeometry::ShapeSTLfileSettings()
{
    groupbox_stlfile_settings = new QGroupBox(tr("STL file settings"));
    QGridLayout *grid_layout_shape_stlfile = new QGridLayout;

    QGroupBox *groupbox_stlfile_params = new QGroupBox(tr("General"));
    QGridLayout *grid_layout_stlfile_params = new QGridLayout;
    QLabel *sh_stlfile_statictext_name = new QLabel("name", this);
    sh_stlfile_name = new QLineEdit(this);
    QLabel *sh_stlfile_statictext_priority = new QLabel("priority", this);
    sh_stlfile_priority = new QLineEdit(this);
    QLabel *sh_stlfile_statictext_material = new QLabel("material", this);
    sh_stlfile_material = new QComboBox(this);
    grid_layout_stlfile_params->addWidget(sh_stlfile_statictext_name, 0, 0, Qt::AlignLeft);
    grid_layout_stlfile_params->addWidget(sh_stlfile_statictext_priority, 1, 0, Qt::AlignLeft);
    grid_layout_stlfile_params->addWidget(sh_stlfile_statictext_material, 2, 0, Qt::AlignLeft);
    grid_layout_stlfile_params->addWidget(sh_stlfile_name, 0, 1, Qt::AlignLeft);
    grid_layout_stlfile_params->addWidget(sh_stlfile_priority, 1, 1, Qt::AlignLeft);
    grid_layout_stlfile_params->addWidget(sh_stlfile_material, 2, 1, Qt::AlignLeft);
    groupbox_stlfile_params->setLayout(grid_layout_stlfile_params);
    QLabel *sh_stlfile_statictext_placeholder = new QLabel("", this);

    QGroupBox *groupbox_stlfile_coords = new QGroupBox(tr("STL file path"));
    QGridLayout *grid_layout_stlfile_coords = new QGridLayout;
    QLabel *sh_stlfile_statictext_path = new QLabel("file path", this);
    sh_stlfile_path = new QLineEdit(this);

    grid_layout_stlfile_coords->addWidget(sh_stlfile_statictext_path, 0, 0, Qt::AlignLeft);
    grid_layout_stlfile_coords->addWidget(sh_stlfile_path, 0, 1, Qt::AlignLeft);
    groupbox_stlfile_coords->setLayout(grid_layout_stlfile_coords);

    connect(sh_stlfile_name, SIGNAL(editingFinished()), this, SLOT(OnSetShapeTypeLayout()));

    grid_layout_shape_stlfile->addWidget(groupbox_stlfile_params, 0, 0, Qt::AlignTop);
    grid_layout_shape_stlfile->addWidget(groupbox_stlfile_coords, 1, 0, Qt::AlignTop);
    grid_layout_shape_stlfile->addWidget(sh_stlfile_statictext_placeholder, 2, 0, Qt::AlignTop);

    groupbox_stlfile_settings->setLayout(grid_layout_shape_stlfile);
}


void PageGeometry::OnAddOrChangeShape(void) //adding new shape to list and viewer, changing them if shape with the same name already exist
{
    shape_parameters *shape_ptr;
    if(rad_but_type_box->isChecked())   //do this for selected type of shape
    {
        shape_box_parameters *shape_tmp_ptr = new shape_box_parameters; //object that will be filled with parameters from user input controls and then added to list (after casting)
        shape_tmp_ptr->name = sh_box_name->text();
        shape_tmp_ptr->type = "box";
        shape_tmp_ptr->priority = sh_box_priority->text();
        shape_tmp_ptr->x_coord_1 = sh_box_x_coord_1->text();
        shape_tmp_ptr->x_coord_2 = sh_box_x_coord_2->text();
        shape_tmp_ptr->y_coord_1 = sh_box_y_coord_1->text();
        shape_tmp_ptr->y_coord_2 = sh_box_y_coord_2->text();
        shape_tmp_ptr->z_coord_1 = sh_box_z_coord_1->text();
        shape_tmp_ptr->z_coord_2 = sh_box_z_coord_2->text();
        shape_tmp_ptr->material = sh_box_material->currentText();
        shape_ptr = shape_tmp_ptr;
    }
    else if(rad_but_type_sphere->isChecked())
    {
        shape_sphere_parameters *shape_tmp_ptr = new shape_sphere_parameters;
        shape_tmp_ptr->name = sh_sphere_name->text();
        shape_tmp_ptr->type = "sphere";
        shape_tmp_ptr->priority = sh_sphere_priority->text();
        shape_tmp_ptr->x_coord = sh_sphere_x_coord->text();
        shape_tmp_ptr->y_coord = sh_sphere_y_coord->text();
        shape_tmp_ptr->z_coord = sh_sphere_z_coord->text();
        shape_tmp_ptr->radius = sh_sphere_radius->text();
        shape_tmp_ptr->material = sh_sphere_material->currentText();
        shape_ptr = shape_tmp_ptr;
    }
    else if(rad_but_type_sphericalshell->isChecked())
    {
        shape_sphericalshell_parameters *shape_tmp_ptr = new shape_sphericalshell_parameters;
        shape_tmp_ptr->name = sh_sphericalshell_name->text();
        shape_tmp_ptr->type = "sphericalshell";
        shape_tmp_ptr->priority = sh_sphericalshell_priority->text();
        shape_tmp_ptr->x_coord = sh_sphericalshell_x_coord->text();
        shape_tmp_ptr->y_coord = sh_sphericalshell_y_coord->text();
        shape_tmp_ptr->z_coord = sh_sphericalshell_z_coord->text();
        shape_tmp_ptr->radius_outer = sh_sphericalshell_radius_outer->text();
        shape_tmp_ptr->radius_inner = sh_sphericalshell_radius_inner->text();
        shape_tmp_ptr->material = sh_sphericalshell_material->currentText();
        shape_ptr = shape_tmp_ptr;
    }
    else if(rad_but_type_cylinder->isChecked())
    {
        shape_cylinder_parameters *shape_tmp_ptr = new shape_cylinder_parameters;
        shape_tmp_ptr->name = sh_cylinder_name->text();
        shape_tmp_ptr->type = "cylinder";
        shape_tmp_ptr->priority = sh_cylinder_priority->text();
        shape_tmp_ptr->x_coord_1 = sh_cylinder_x_coord_1->text();
        shape_tmp_ptr->x_coord_2 = sh_cylinder_x_coord_2->text();
        shape_tmp_ptr->y_coord_1 = sh_cylinder_y_coord_1->text();
        shape_tmp_ptr->y_coord_2 = sh_cylinder_y_coord_2->text();
        shape_tmp_ptr->z_coord_1 = sh_cylinder_z_coord_1->text();
        shape_tmp_ptr->z_coord_2 = sh_cylinder_z_coord_2->text();
        shape_tmp_ptr->radius = sh_cylinder_radius->text();
        shape_tmp_ptr->material = sh_cylinder_material->currentText();
        shape_ptr = shape_tmp_ptr;
    }
    else if(rad_but_type_cylindricalshell->isChecked())
    {
        shape_cylindricalshell_parameters *shape_tmp_ptr = new shape_cylindricalshell_parameters;
        shape_tmp_ptr->name = sh_cylindricalshell_name->text();
        shape_tmp_ptr->type = "cylindricalshell";
        shape_tmp_ptr->priority = sh_cylindricalshell_priority->text();
        shape_tmp_ptr->x_coord_1 = sh_cylindricalshell_x_coord_1->text();
        shape_tmp_ptr->x_coord_2 = sh_cylindricalshell_x_coord_2->text();
        shape_tmp_ptr->y_coord_1 = sh_cylindricalshell_y_coord_1->text();
        shape_tmp_ptr->y_coord_2 = sh_cylindricalshell_y_coord_2->text();
        shape_tmp_ptr->z_coord_1 = sh_cylindricalshell_z_coord_1->text();
        shape_tmp_ptr->z_coord_2 = sh_cylindricalshell_z_coord_2->text();
        shape_tmp_ptr->radius_outer = sh_cylindricalshell_radius_outer->text();
        shape_tmp_ptr->radius_inner = sh_cylindricalshell_radius_inner->text();
        shape_tmp_ptr->material = sh_cylindricalshell_material->currentText();
        shape_ptr = shape_tmp_ptr;
    }
    else if(rad_but_type_curve->isChecked())
    {
        shape_curve_parameters *shape_tmp_ptr = new shape_curve_parameters;
        shape_tmp_ptr->name = sh_curve_name->text();
        shape_tmp_ptr->type = "curve";
        shape_tmp_ptr->priority = sh_curve_priority->text();
        shape_tmp_ptr->points_x.clear();
        shape_tmp_ptr->points_y.clear();
        shape_tmp_ptr->points_z.clear();
        for(int i_pcpy = 0; sh_curve_pointslist->item(i_pcpy, 0) != NULL && sh_curve_pointslist->item(i_pcpy, 1) != NULL && sh_curve_pointslist->item(i_pcpy, 2) != NULL; ++i_pcpy)
        {
            shape_tmp_ptr->points_x.push_back(sh_curve_pointslist->item(i_pcpy, 0)->text());
            shape_tmp_ptr->points_y.push_back(sh_curve_pointslist->item(i_pcpy, 1)->text());
            shape_tmp_ptr->points_z.push_back(sh_curve_pointslist->item(i_pcpy, 2)->text());
        }
        shape_tmp_ptr->material = sh_curve_material->currentText();
        shape_ptr = shape_tmp_ptr;
    }
    else if(rad_but_type_wire->isChecked())
    {
        shape_wire_parameters *shape_tmp_ptr = new shape_wire_parameters;
        shape_tmp_ptr->name = sh_wire_name->text();
        shape_tmp_ptr->type = "wire";
        shape_tmp_ptr->priority = sh_wire_priority->text();
        shape_tmp_ptr->radius = sh_wire_radius->text();
        shape_tmp_ptr->points_x.clear();
        shape_tmp_ptr->points_y.clear();
        shape_tmp_ptr->points_z.clear();
        for(int i_pcpy = 0; sh_wire_pointslist->item(i_pcpy, 0) != NULL && sh_wire_pointslist->item(i_pcpy, 1) != NULL && sh_wire_pointslist->item(i_pcpy, 2) != NULL; ++i_pcpy)
        {
            shape_tmp_ptr->points_x.push_back(sh_wire_pointslist->item(i_pcpy, 0)->text());
            shape_tmp_ptr->points_y.push_back(sh_wire_pointslist->item(i_pcpy, 1)->text());
            shape_tmp_ptr->points_z.push_back(sh_wire_pointslist->item(i_pcpy, 2)->text());
        }
        shape_tmp_ptr->material = sh_wire_material->currentText();
        shape_ptr = shape_tmp_ptr;
    }
    else if(rad_but_type_polygon->isChecked())
    {
        shape_polygon_parameters *shape_tmp_ptr = new shape_polygon_parameters;
        shape_tmp_ptr->name = sh_polygon_name->text();
        shape_tmp_ptr->type = "polygon";
        shape_tmp_ptr->priority = sh_polygon_priority->text();
        shape_tmp_ptr->normal_dir = sh_polygon_norm_dir->text();
        shape_tmp_ptr->elevation = sh_polygon_elevation->text();
        shape_tmp_ptr->points_x.clear();
        shape_tmp_ptr->points_y.clear();
        for(int i_pcpy = 0; sh_polygon_pointslist->item(i_pcpy, 0) != NULL && sh_polygon_pointslist->item(i_pcpy, 1) != NULL; ++i_pcpy)
        {
            shape_tmp_ptr->points_x.push_back(sh_polygon_pointslist->item(i_pcpy, 0)->text());
            shape_tmp_ptr->points_y.push_back(sh_polygon_pointslist->item(i_pcpy, 1)->text());
        }
        shape_tmp_ptr->material = sh_polygon_material->currentText();
        shape_ptr = shape_tmp_ptr;
    }
    else if(rad_but_type_extrudedpolygon->isChecked())
    {
        shape_extrudedpolygon_parameters *shape_tmp_ptr = new shape_extrudedpolygon_parameters;
        shape_tmp_ptr->name = sh_extrudedpolygon_name->text();
        shape_tmp_ptr->type = "extrudedpolygon";
        shape_tmp_ptr->priority = sh_extrudedpolygon_priority->text();
        shape_tmp_ptr->normal_dir = sh_extrudedpolygon_norm_dir->text();
        shape_tmp_ptr->elevation = sh_extrudedpolygon_elevation->text();
        shape_tmp_ptr->length = sh_extrudedpolygon_length->text();
        shape_tmp_ptr->points_x.clear();
        shape_tmp_ptr->points_y.clear();
        for(int i_pcpy = 0; sh_extrudedpolygon_pointslist->item(i_pcpy, 0) != NULL && sh_extrudedpolygon_pointslist->item(i_pcpy, 1) != NULL; ++i_pcpy)
        {
            shape_tmp_ptr->points_x.push_back(sh_extrudedpolygon_pointslist->item(i_pcpy, 0)->text());
            shape_tmp_ptr->points_y.push_back(sh_extrudedpolygon_pointslist->item(i_pcpy, 1)->text());
        }
        shape_tmp_ptr->material = sh_extrudedpolygon_material->currentText();
        shape_ptr = shape_tmp_ptr;
    }
    else if(rad_but_type_rotationalpolygon->isChecked())
    {
        shape_rotationalpolygon_parameters *shape_tmp_ptr = new shape_rotationalpolygon_parameters;
        shape_tmp_ptr->name = sh_rotationalpolygon_name->text();
        shape_tmp_ptr->type = "rotationalpolygon";
        shape_tmp_ptr->priority = sh_rotationalpolygon_priority->text();
        shape_tmp_ptr->normal_dir = sh_rotationalpolygon_norm_dir->text();
        shape_tmp_ptr->rot_axis_dir = sh_rotationalpolygon_rot_axis->text();
        shape_tmp_ptr->angle1 = sh_rotationalpolygon_angle1->text();
        shape_tmp_ptr->angle2 = sh_rotationalpolygon_angle2->text();
        shape_tmp_ptr->points_x.clear();
        shape_tmp_ptr->points_y.clear();
        for(int i_pcpy = 0; sh_rotationalpolygon_pointslist->item(i_pcpy, 0) != NULL && sh_rotationalpolygon_pointslist->item(i_pcpy, 1) != NULL; ++i_pcpy)
        {
            shape_tmp_ptr->points_x.push_back(sh_rotationalpolygon_pointslist->item(i_pcpy, 0)->text());
            shape_tmp_ptr->points_y.push_back(sh_rotationalpolygon_pointslist->item(i_pcpy, 1)->text());
        }
        shape_tmp_ptr->material = sh_rotationalpolygon_material->currentText();
        shape_ptr = shape_tmp_ptr;
    }
    else if(rad_but_type_polyhedron->isChecked())
    {
        shape_polyhedron_parameters *shape_tmp_ptr = new shape_polyhedron_parameters;
        shape_tmp_ptr->name = sh_polyhedron_name->text();
        shape_tmp_ptr->type = "polyhedron";
        shape_tmp_ptr->priority = sh_polyhedron_priority->text();
        shape_tmp_ptr->vertices_x.clear();
        shape_tmp_ptr->vertices_y.clear();
        shape_tmp_ptr->vertices_z.clear();
        shape_tmp_ptr->faces_x.clear();
        shape_tmp_ptr->faces_y.clear();
        shape_tmp_ptr->faces_z.clear();
        for(int i_pcpy = 0; sh_polyhedron_verticeslist->item(i_pcpy, 0) != NULL && sh_polyhedron_verticeslist->item(i_pcpy, 1) != NULL && sh_polyhedron_verticeslist->item(i_pcpy, 2) != NULL; ++i_pcpy)
        {
            shape_tmp_ptr->vertices_x.push_back(sh_polyhedron_verticeslist->item(i_pcpy, 0)->text());
            shape_tmp_ptr->vertices_y.push_back(sh_polyhedron_verticeslist->item(i_pcpy, 1)->text());
            shape_tmp_ptr->vertices_z.push_back(sh_polyhedron_verticeslist->item(i_pcpy, 2)->text());
            shape_tmp_ptr->faces_x.push_back(sh_polyhedron_faceslist->item(i_pcpy, 0)->text());
            shape_tmp_ptr->faces_y.push_back(sh_polyhedron_faceslist->item(i_pcpy, 1)->text());
            shape_tmp_ptr->faces_z.push_back(sh_polyhedron_faceslist->item(i_pcpy, 2)->text());
        }
        shape_tmp_ptr->material = sh_polyhedron_material->currentText();
        shape_ptr = shape_tmp_ptr;
    }
    else if(rad_but_type_stlfile->isChecked())
    {
        shape_stlfile_parameters *shape_tmp_ptr = new shape_stlfile_parameters;
        shape_tmp_ptr->name = sh_stlfile_name->text();
        shape_tmp_ptr->type = "stlfile";
        shape_tmp_ptr->priority = sh_stlfile_priority->text();
        shape_tmp_ptr->path = sh_stlfile_path->text();
        shape_tmp_ptr->material = sh_stlfile_material->currentText();
        shape_ptr = shape_tmp_ptr;
    }

    //shapes transforms - they can be set the same way to any type of shape (they are in patent class of all shapes)
    shape_ptr->transf_scale_x = transf_scale_x->text();
    shape_ptr->transf_scale_y = transf_scale_y->text();
    shape_ptr->transf_scale_z = transf_scale_z->text();
    shape_ptr->transf_rotate_ax = transf_rotate_ax->text();
    shape_ptr->transf_rotate_ay = transf_rotate_ay->text();
    shape_ptr->transf_rotate_az = transf_rotate_az->text();
    shape_ptr->transf_rotate_angle = transf_rotate_angle->text();
    shape_ptr->transf_move_x = transf_move_x->text();
    shape_ptr->transf_move_y = transf_move_y->text();
    shape_ptr->transf_move_z = transf_move_z->text();
    for(int i_tr = 0; i_tr < 3; ++i_tr)
    {
        if(i_tr < transforms_list_widget->count())
            shape_ptr->transf_order[i_tr] = transforms_list_widget->item(i_tr)->text();
        else
            shape_ptr->transf_order[i_tr] = "";
    }

    // Add the configured above primitive to the lists in the wizard and in the QCSXCAD:
    if(!shape_ptr->name.isEmpty())
    {
        if(shapes_param_list_ptr->empty() || shapes_param_list_ptr->at(shapes_list_widget->currentRow())->name != shape_ptr->name)
        {
            shapes_param_list_ptr->push_back(shape_ptr);
            shapes_list_widget->addItem(shapes_param_list_ptr->at(shapes_param_list_ptr->size()-1)->name);
            shapes_list_widget->setCurrentRow(shapes_list_widget->count()-1);
            int id_tmp = UploadShapesToViewer(true);
            shapes_param_list_ptr->at(shapes_list_widget->currentRow())->id = id_tmp;
        }
        else if(shapes_param_list_ptr->at(shapes_list_widget->currentRow())->name == shape_ptr->name)
        {
            shape_ptr->id = shapes_param_list_ptr->at(shapes_list_widget->currentRow())->id;
            shapes_param_list_ptr->replace(shapes_list_widget->currentRow(), shape_ptr);
            UploadShapesToViewer(false);
        }
    }
}



void PageGeometry::OnRemoveShape(void)
{
    if(!shapes_param_list_ptr->empty())
    {
        shape_parameters *shape_to_del = shapes_param_list_ptr->at(shapes_list_widget->currentRow());
        RemoveShapesFromViewer();
        shapes_param_list_ptr->remove(shapes_list_widget->currentRow());
        shapes_list_widget->takeItem(shapes_list_widget->currentRow());
        delete shape_to_del;    //TODO FIXME i dont know if it's the right way to delete shape item created by "new" in OnAddOrChangeShape
    }
}



void PageGeometry::OnGetSelectedShape(QListWidgetItem* item)
{
    shape_parameters *shape_tmp_ptr;
    shape_tmp_ptr = shapes_param_list_ptr->at(shapes_list_widget->currentRow());

    if(!QString::compare(shape_tmp_ptr->type, "box"))
    {
        shape_box_parameters *shape_box_tmp = (shape_box_parameters *)(shape_tmp_ptr);
        rad_but_type_box->setChecked(true);
        sh_box_name->setText(shape_box_tmp->name);
        sh_box_priority->setText(shape_box_tmp->priority);
        sh_box_x_coord_1->setText(shape_box_tmp->x_coord_1);
        sh_box_x_coord_2->setText(shape_box_tmp->x_coord_2);
        sh_box_y_coord_1->setText(shape_box_tmp->y_coord_1);
        sh_box_y_coord_2->setText(shape_box_tmp->y_coord_2);
        sh_box_z_coord_1->setText(shape_box_tmp->z_coord_1);
        sh_box_z_coord_2->setText(shape_box_tmp->z_coord_2);
        sh_box_material->setCurrentIndex(sh_box_material->findText(shape_box_tmp->material));
    }
    else if(!QString::compare(shape_tmp_ptr->type, "sphere"))
    {
        shape_sphere_parameters *shape_sphere_tmp = (shape_sphere_parameters *)(shape_tmp_ptr);
        rad_but_type_sphere->setChecked(true);
        sh_sphere_name->setText(shape_sphere_tmp->name);
        sh_sphere_priority->setText(shape_sphere_tmp->priority);
        sh_sphere_x_coord->setText(shape_sphere_tmp->x_coord);
        sh_sphere_y_coord->setText(shape_sphere_tmp->y_coord);
        sh_sphere_z_coord->setText(shape_sphere_tmp->z_coord);
        sh_sphere_radius->setText(shape_sphere_tmp->radius);
        sh_sphere_material->setCurrentIndex(sh_sphere_material->findText(shape_sphere_tmp->material));
    }
    else if(!QString::compare(shape_tmp_ptr->type, "sphericalshell"))
    {
        shape_sphericalshell_parameters *shape_sphericalshell_tmp = (shape_sphericalshell_parameters *)(shape_tmp_ptr);
        rad_but_type_sphericalshell->setChecked(true);
        sh_sphericalshell_name->setText(shape_sphericalshell_tmp->name);
        sh_sphericalshell_priority->setText(shape_sphericalshell_tmp->priority);
        sh_sphericalshell_x_coord->setText(shape_sphericalshell_tmp->x_coord);
        sh_sphericalshell_y_coord->setText(shape_sphericalshell_tmp->y_coord);
        sh_sphericalshell_z_coord->setText(shape_sphericalshell_tmp->z_coord);
        sh_sphericalshell_radius_outer->setText(shape_sphericalshell_tmp->radius_outer);
        sh_sphericalshell_radius_inner->setText(shape_sphericalshell_tmp->radius_inner);
        sh_sphericalshell_material->setCurrentIndex(sh_sphericalshell_material->findText(shape_sphericalshell_tmp->material));
    }
    else if(!QString::compare(shape_tmp_ptr->type, "cylinder"))
    {
        shape_cylinder_parameters *shape_cylinder_tmp = (shape_cylinder_parameters *)(shape_tmp_ptr);
        rad_but_type_cylinder->setChecked(true);
        sh_cylinder_name->setText(shape_cylinder_tmp->name);
        sh_cylinder_priority->setText(shape_cylinder_tmp->priority);
        sh_cylinder_x_coord_1->setText(shape_cylinder_tmp->x_coord_1);
        sh_cylinder_x_coord_2->setText(shape_cylinder_tmp->x_coord_2);
        sh_cylinder_y_coord_1->setText(shape_cylinder_tmp->y_coord_1);
        sh_cylinder_y_coord_2->setText(shape_cylinder_tmp->y_coord_2);
        sh_cylinder_z_coord_1->setText(shape_cylinder_tmp->z_coord_1);
        sh_cylinder_z_coord_2->setText(shape_cylinder_tmp->z_coord_2);
        sh_cylinder_radius->setText(shape_cylinder_tmp->radius);
        sh_cylinder_material->setCurrentIndex(sh_cylinder_material->findText(shape_cylinder_tmp->material));
    }
    else if(!QString::compare(shape_tmp_ptr->type, "cylindricalshell"))
    {
        shape_cylindricalshell_parameters *shape_cylindricalshell_tmp = (shape_cylindricalshell_parameters *)(shape_tmp_ptr);
        rad_but_type_cylindricalshell->setChecked(true);
        sh_cylindricalshell_name->setText(shape_cylindricalshell_tmp->name);
        sh_cylindricalshell_priority->setText(shape_cylindricalshell_tmp->priority);
        sh_cylindricalshell_x_coord_1->setText(shape_cylindricalshell_tmp->x_coord_1);
        sh_cylindricalshell_x_coord_2->setText(shape_cylindricalshell_tmp->x_coord_2);
        sh_cylindricalshell_y_coord_1->setText(shape_cylindricalshell_tmp->y_coord_1);
        sh_cylindricalshell_y_coord_2->setText(shape_cylindricalshell_tmp->y_coord_2);
        sh_cylindricalshell_z_coord_1->setText(shape_cylindricalshell_tmp->z_coord_1);
        sh_cylindricalshell_z_coord_2->setText(shape_cylindricalshell_tmp->z_coord_2);
        sh_cylindricalshell_radius_outer->setText(shape_cylindricalshell_tmp->radius_outer);
        sh_cylindricalshell_radius_inner->setText(shape_cylindricalshell_tmp->radius_inner);
        sh_cylindricalshell_material->setCurrentIndex(sh_cylindricalshell_material->findText(shape_cylindricalshell_tmp->material));
    }
    else if(!QString::compare(shape_tmp_ptr->type, "curve"))
    {
        shape_curve_parameters *shape_curve_tmp = (shape_curve_parameters *)(shape_tmp_ptr);
        rad_but_type_curve->setChecked(true);
        sh_curve_name->setText(shape_curve_tmp->name);
        sh_curve_priority->setText(shape_curve_tmp->priority);
        sh_curve_pointslist->clear();
        for(int i_pcpy = 0; i_pcpy < shape_curve_tmp->points_x.size() && i_pcpy < shape_curve_tmp->points_y.size() && i_pcpy < shape_curve_tmp->points_z.size(); ++i_pcpy)
        {
            QTableWidgetItem *item_x = new QTableWidgetItem;
            QTableWidgetItem *item_y = new QTableWidgetItem;
            QTableWidgetItem *item_z = new QTableWidgetItem;
            item_x->setText(shape_curve_tmp->points_x.at(i_pcpy));
            item_y->setText(shape_curve_tmp->points_y.at(i_pcpy));
            item_z->setText(shape_curve_tmp->points_z.at(i_pcpy));
            sh_curve_pointslist->setItem(i_pcpy, 0, item_x);
            sh_curve_pointslist->setItem(i_pcpy, 1, item_y);
            sh_curve_pointslist->setItem(i_pcpy, 2, item_z);
        }
        sh_curve_material->setCurrentIndex(sh_curve_material->findText(shape_curve_tmp->material));
    }
    else if(!QString::compare(shape_tmp_ptr->type, "wire"))
    {
        shape_wire_parameters *shape_wire_tmp = (shape_wire_parameters *)(shape_tmp_ptr);
        rad_but_type_wire->setChecked(true);
        sh_wire_name->setText(shape_wire_tmp->name);
        sh_wire_priority->setText(shape_wire_tmp->priority);
        sh_wire_radius->setText(shape_wire_tmp->radius);
        sh_wire_pointslist->clear();
        for(int i_pcpy = 0; i_pcpy < shape_wire_tmp->points_x.size() && i_pcpy < shape_wire_tmp->points_y.size() && i_pcpy < shape_wire_tmp->points_z.size(); ++i_pcpy)
        {
            QTableWidgetItem *item_x = new QTableWidgetItem;
            QTableWidgetItem *item_y = new QTableWidgetItem;
            QTableWidgetItem *item_z = new QTableWidgetItem;
            item_x->setText(shape_wire_tmp->points_x.at(i_pcpy));
            item_y->setText(shape_wire_tmp->points_y.at(i_pcpy));
            item_z->setText(shape_wire_tmp->points_z.at(i_pcpy));
            sh_wire_pointslist->setItem(i_pcpy, 0, item_x);
            sh_wire_pointslist->setItem(i_pcpy, 1, item_y);
            sh_wire_pointslist->setItem(i_pcpy, 2, item_z);
        }
        sh_wire_material->setCurrentIndex(sh_wire_material->findText(shape_wire_tmp->material));
    }
    else if(!QString::compare(shape_tmp_ptr->type, "polygon"))
    {
        shape_polygon_parameters *shape_polygon_tmp = (shape_polygon_parameters *)(shape_tmp_ptr);
        rad_but_type_polygon->setChecked(true);
        sh_polygon_name->setText(shape_polygon_tmp->name);
        sh_polygon_priority->setText(shape_polygon_tmp->priority);
        sh_polygon_norm_dir->setText(shape_polygon_tmp->normal_dir);
        sh_polygon_elevation->setText(shape_polygon_tmp->elevation);
        sh_polygon_pointslist->clear();
        for(int i_pcpy = 0; i_pcpy < shape_polygon_tmp->points_x.size() && i_pcpy < shape_polygon_tmp->points_y.size(); ++i_pcpy)
        {
            QTableWidgetItem *item_x = new QTableWidgetItem;
            QTableWidgetItem *item_y = new QTableWidgetItem;
            item_x->setText(shape_polygon_tmp->points_x.at(i_pcpy));
            item_y->setText(shape_polygon_tmp->points_y.at(i_pcpy));
            sh_polygon_pointslist->setItem(i_pcpy, 0, item_x);
            sh_polygon_pointslist->setItem(i_pcpy, 1, item_y);
        }
        sh_polygon_material->setCurrentIndex(sh_polygon_material->findText(shape_polygon_tmp->material));
    }
    else if(!QString::compare(shape_tmp_ptr->type, "extrudedpolygon"))
    {
        shape_extrudedpolygon_parameters *shape_extrudedpolygon_tmp = (shape_extrudedpolygon_parameters *)(shape_tmp_ptr);
        rad_but_type_extrudedpolygon->setChecked(true);
        sh_extrudedpolygon_name->setText(shape_extrudedpolygon_tmp->name);
        sh_extrudedpolygon_priority->setText(shape_extrudedpolygon_tmp->priority);
        sh_extrudedpolygon_norm_dir->setText(shape_extrudedpolygon_tmp->normal_dir);
        sh_extrudedpolygon_elevation->setText(shape_extrudedpolygon_tmp->elevation);
        sh_extrudedpolygon_length->setText(shape_extrudedpolygon_tmp->length);
        sh_extrudedpolygon_pointslist->clear();
        for(int i_pcpy = 0; i_pcpy < shape_extrudedpolygon_tmp->points_x.size() && i_pcpy < shape_extrudedpolygon_tmp->points_y.size(); ++i_pcpy)
        {
            QTableWidgetItem *item_x = new QTableWidgetItem;
            QTableWidgetItem *item_y = new QTableWidgetItem;
            item_x->setText(shape_extrudedpolygon_tmp->points_x.at(i_pcpy));
            item_y->setText(shape_extrudedpolygon_tmp->points_y.at(i_pcpy));
            sh_extrudedpolygon_pointslist->setItem(i_pcpy, 0, item_x);
            sh_extrudedpolygon_pointslist->setItem(i_pcpy, 1, item_y);
        }
        sh_extrudedpolygon_material->setCurrentIndex(sh_extrudedpolygon_material->findText(shape_extrudedpolygon_tmp->material));
    }
    else if(!QString::compare(shape_tmp_ptr->type, "rotationalpolygon"))
    {
        shape_rotationalpolygon_parameters *shape_rotationalpolygon_tmp = (shape_rotationalpolygon_parameters *)(shape_tmp_ptr);
        rad_but_type_rotationalpolygon->setChecked(true);
        sh_rotationalpolygon_name->setText(shape_rotationalpolygon_tmp->name);
        sh_rotationalpolygon_priority->setText(shape_rotationalpolygon_tmp->priority);
        sh_rotationalpolygon_norm_dir->setText(shape_rotationalpolygon_tmp->normal_dir);
        sh_rotationalpolygon_rot_axis->setText(shape_rotationalpolygon_tmp->rot_axis_dir);
        sh_rotationalpolygon_angle1->setText(shape_rotationalpolygon_tmp->angle1);
        sh_rotationalpolygon_angle2->setText(shape_rotationalpolygon_tmp->angle2);
        sh_rotationalpolygon_pointslist->clear();
        for(int i_pcpy = 0; i_pcpy < shape_rotationalpolygon_tmp->points_x.size() && i_pcpy < shape_rotationalpolygon_tmp->points_y.size(); ++i_pcpy)
        {
            QTableWidgetItem *item_x = new QTableWidgetItem;
            QTableWidgetItem *item_y = new QTableWidgetItem;
            item_x->setText(shape_rotationalpolygon_tmp->points_x.at(i_pcpy));
            item_y->setText(shape_rotationalpolygon_tmp->points_y.at(i_pcpy));
            sh_rotationalpolygon_pointslist->setItem(i_pcpy, 0, item_x);
            sh_rotationalpolygon_pointslist->setItem(i_pcpy, 1, item_y);
        }
        sh_rotationalpolygon_material->setCurrentIndex(sh_rotationalpolygon_material->findText(shape_rotationalpolygon_tmp->material));
    }
    else if(!QString::compare(shape_tmp_ptr->type, "polyhedron"))
    {
        shape_polyhedron_parameters *shape_polyhedron_tmp = (shape_polyhedron_parameters *)(shape_tmp_ptr);
        rad_but_type_polyhedron->setChecked(true);
        sh_polyhedron_name->setText(shape_polyhedron_tmp->name);
        sh_polyhedron_priority->setText(shape_polyhedron_tmp->priority);
        sh_polyhedron_verticeslist->clear();
        sh_polyhedron_faceslist->clear();
        for(int i_pcpy = 0; i_pcpy < shape_polyhedron_tmp->vertices_x.size() && i_pcpy < shape_polyhedron_tmp->vertices_y.size() && i_pcpy < shape_polyhedron_tmp->vertices_z.size(); ++i_pcpy)
        {
            QTableWidgetItem *item_v_x = new QTableWidgetItem;
            QTableWidgetItem *item_v_y = new QTableWidgetItem;
            QTableWidgetItem *item_v_z = new QTableWidgetItem;
            QTableWidgetItem *item_f_x = new QTableWidgetItem;
            QTableWidgetItem *item_f_y = new QTableWidgetItem;
            QTableWidgetItem *item_f_z = new QTableWidgetItem;
            item_v_x->setText(shape_polyhedron_tmp->vertices_x.at(i_pcpy));
            item_v_y->setText(shape_polyhedron_tmp->vertices_y.at(i_pcpy));
            item_v_z->setText(shape_polyhedron_tmp->vertices_z.at(i_pcpy));
            item_f_x->setText(shape_polyhedron_tmp->faces_x.at(i_pcpy));
            item_f_y->setText(shape_polyhedron_tmp->faces_y.at(i_pcpy));
            item_f_z->setText(shape_polyhedron_tmp->faces_z.at(i_pcpy));
            sh_polyhedron_verticeslist->setItem(i_pcpy, 0, item_v_x);
            sh_polyhedron_verticeslist->setItem(i_pcpy, 1, item_v_y);
            sh_polyhedron_verticeslist->setItem(i_pcpy, 2, item_v_z);
            sh_polyhedron_faceslist->setItem(i_pcpy, 0, item_v_x);
            sh_polyhedron_faceslist->setItem(i_pcpy, 1, item_v_y);
            sh_polyhedron_faceslist->setItem(i_pcpy, 2, item_v_z);
        }
        sh_polyhedron_material->setCurrentIndex(sh_polyhedron_material->findText(shape_polyhedron_tmp->material));
    }
    else if(!QString::compare(shape_tmp_ptr->type, "stlfile"))
    {
        shape_stlfile_parameters *shape_stlfile_tmp = (shape_stlfile_parameters *)(shape_tmp_ptr);
        rad_but_type_stlfile->setChecked(true);
        sh_stlfile_name->setText(shape_stlfile_tmp->name);
        sh_stlfile_priority->setText(shape_stlfile_tmp->priority);
        sh_stlfile_path->setText(shape_stlfile_tmp->path);
        sh_stlfile_material->setCurrentIndex(sh_stlfile_material->findText(shape_stlfile_tmp->material));
    }

    //transforms (the same way for any type of shape)
    transf_scale_x->setText(shape_tmp_ptr->transf_scale_x);
    transf_scale_y->setText(shape_tmp_ptr->transf_scale_y);
    transf_scale_z->setText(shape_tmp_ptr->transf_scale_z);
    transf_rotate_ax->setText(shape_tmp_ptr->transf_rotate_ax);
    transf_rotate_ay->setText(shape_tmp_ptr->transf_rotate_ay);
    transf_rotate_az->setText(shape_tmp_ptr->transf_rotate_az);
    transf_rotate_angle->setText(shape_tmp_ptr->transf_rotate_angle);
    transf_move_x->setText(shape_tmp_ptr->transf_move_x);
    transf_move_y->setText(shape_tmp_ptr->transf_move_y);
    transf_move_z->setText(shape_tmp_ptr->transf_move_z);
    transforms_list_widget->clear();
    button_transform_move->show();
    button_transform_scale->show();
    button_transform_rotate->show();
    for(int i_tr = 0; i_tr < 3; ++i_tr)
    {
        if(shape_tmp_ptr->transf_order[i_tr] != "")
            transforms_list_widget->addItem(shape_tmp_ptr->transf_order[i_tr]);
        if(shape_tmp_ptr->transf_order[i_tr] == "Move")
            button_transform_move->hide();
        if(shape_tmp_ptr->transf_order[i_tr] == "Scale")
            button_transform_scale->hide();
        if(shape_tmp_ptr->transf_order[i_tr] == "Rotate")
            button_transform_rotate->hide();
    }

    OnSetShapeTypeLayout();
}


void PageGeometry::OnSetShapeTypeLayout(void)   //called to change layout according to selection of shape type and to select proper shape on the list (according to name, to prevent adding more items with the same name)
{
    if(rad_but_type_box->isChecked())
    {
        stackedLayout->setCurrentIndex(0);
        for(int i = 0 ; i < shapes_list_widget->count(); ++i)
            if(shapes_list_widget->item(i)->text() == sh_box_name->text())
                shapes_list_widget->setCurrentRow(i);
    }
    else if(rad_but_type_sphere->isChecked())
    {
        stackedLayout->setCurrentIndex(1);
        for(int i = 0 ; i < shapes_list_widget->count(); ++i)
            if(shapes_list_widget->item(i)->text() == sh_sphere_name->text())
                shapes_list_widget->setCurrentRow(i);
    }
    else if(rad_but_type_sphericalshell->isChecked())
    {
        stackedLayout->setCurrentIndex(2);
        for(int i = 0 ; i < shapes_list_widget->count(); ++i)
            if(shapes_list_widget->item(i)->text() == sh_sphericalshell_name->text())
                shapes_list_widget->setCurrentRow(i);
    }
    else if(rad_but_type_cylinder->isChecked())
    {
        stackedLayout->setCurrentIndex(3);
        for(int i = 0 ; i < shapes_list_widget->count(); ++i)
            if(shapes_list_widget->item(i)->text() == sh_cylinder_name->text())
                shapes_list_widget->setCurrentRow(i);
    }
    else if(rad_but_type_cylindricalshell->isChecked())
    {
        stackedLayout->setCurrentIndex(4);
        for(int i = 0 ; i < shapes_list_widget->count(); ++i)
            if(shapes_list_widget->item(i)->text() == sh_cylindricalshell_name->text())
                shapes_list_widget->setCurrentRow(i);
    }
    else if(rad_but_type_curve->isChecked())
    {
        stackedLayout->setCurrentIndex(5);
        for(int i = 0 ; i < shapes_list_widget->count(); ++i)
            if(shapes_list_widget->item(i)->text() == sh_curve_name->text())
                shapes_list_widget->setCurrentRow(i);
    }
    else if(rad_but_type_wire->isChecked())
    {
        stackedLayout->setCurrentIndex(6);
        for(int i = 0 ; i < shapes_list_widget->count(); ++i)
            if(shapes_list_widget->item(i)->text() == sh_wire_name->text())
                shapes_list_widget->setCurrentRow(i);
    }
    else if(rad_but_type_polygon->isChecked())
    {
        stackedLayout->setCurrentIndex(7);
        for(int i = 0 ; i < shapes_list_widget->count(); ++i)
            if(shapes_list_widget->item(i)->text() == sh_polygon_name->text())
                shapes_list_widget->setCurrentRow(i);
    }
    else if(rad_but_type_extrudedpolygon->isChecked())
    {
        stackedLayout->setCurrentIndex(8);
        for(int i = 0 ; i < shapes_list_widget->count(); ++i)
            if(shapes_list_widget->item(i)->text() == sh_extrudedpolygon_name->text())
                shapes_list_widget->setCurrentRow(i);
    }
    else if(rad_but_type_rotationalpolygon->isChecked())
    {
        stackedLayout->setCurrentIndex(9);
        for(int i = 0 ; i < shapes_list_widget->count(); ++i)
            if(shapes_list_widget->item(i)->text() == sh_rotationalpolygon_name->text())
                shapes_list_widget->setCurrentRow(i);
    }
    else if(rad_but_type_polyhedron->isChecked())
    {
        stackedLayout->setCurrentIndex(10);
        for(int i = 0 ; i < shapes_list_widget->count(); ++i)
            if(shapes_list_widget->item(i)->text() == sh_polyhedron_name->text())
                shapes_list_widget->setCurrentRow(i);
    }
    else if(rad_but_type_stlfile->isChecked())
    {
        stackedLayout->setCurrentIndex(11);
        for(int i = 0 ; i < shapes_list_widget->count(); ++i)
            if(shapes_list_widget->item(i)->text() == sh_stlfile_name->text())
                shapes_list_widget->setCurrentRow(i);
    }
}


void PageGeometry::initializePage() //load all materials, to be accessible to select for shapes
{
    sh_box_material->clear();
    sh_sphere_material->clear();
    sh_sphericalshell_material->clear();
    sh_cylinder_material->clear();
    sh_cylindricalshell_material->clear();
    sh_curve_material->clear();
    sh_wire_material->clear();
    sh_polygon_material->clear();
    sh_extrudedpolygon_material->clear();
    sh_rotationalpolygon_material->clear();
    sh_polyhedron_material->clear();
    sh_stlfile_material->clear();

    for (int i = 0; i < wizardsparent_tmp->GetQtyProperties(); ++i)
    {
        QString str;
        CSProperties *prop = wizardsparent_tmp->GetProperty(i);
        str=QString(prop->GetName().c_str());

        sh_box_material->addItem(str);  //add to all primitives type (could be avoided if material were not in QStackedLayout)
        sh_sphere_material->addItem(str);
        sh_sphericalshell_material->addItem(str);
        sh_cylinder_material->addItem(str);
        sh_cylindricalshell_material->addItem(str);
        sh_curve_material->addItem(str);
        sh_wire_material->addItem(str);
        sh_polygon_material->addItem(str);
        sh_extrudedpolygon_material->addItem(str);
        sh_rotationalpolygon_material->addItem(str);
        sh_polyhedron_material->addItem(str);
        sh_stlfile_material->addItem(str);
    }

    LoadSettings();
}


double PageGeometry::EvaluateVar(QString var_to_eval)
{
    return var_edit->GetExprEngine()->evaluate(var_to_eval).toString().toDouble();
}

void PageGeometry::OnPointslistUpdate(int row, int column)
{
    QTableWidget* tableSender = qobject_cast<QTableWidget*>(sender()); // retrieve the table you have clicked
    if(tableSender->rowCount() == row + 1)  //if clicked the last row then append a new one
        tableSender->setRowCount(row + 2);
}

void PageGeometry::OnChangeTransformOrder(void)
{
    QPushButton* buttonSender = qobject_cast<QPushButton*>(sender()); // retrieve the button you have clicked
    QString buttonText = buttonSender->text(); // retrive the text from the button clicked

    if(buttonText == "Scale")
    {
        transforms_list_widget->addItem("Scale");
        buttonSender->hide();
    }
    if(buttonText == "Rotate")
    {
        transforms_list_widget->addItem("Rotate");
        buttonSender->hide();
    }
    if(buttonText == "Move")
    {
        transforms_list_widget->addItem("Move");
        buttonSender->hide();
    }
    if(buttonText == "Remove transforms" && transforms_list_widget->count())
    {
        button_transform_scale->show();
        button_transform_rotate->show();
        button_transform_move->show();
        transforms_list_widget->clear();

    }
}
