#include "PageGeometry.h"

PageGeometry::PageGeometry(QWizard *parent, QCSXCAD *wizardsparent, VariablesEditor *var_edit_main): QWizardPage(parent)
{
    wizardsparent_tmp = wizardsparent;

    QVector<shape_parameters *> *shapes_param_list = new QVector<shape_parameters *>;
    shapes_param_list_ptr = shapes_param_list;
    var_edit = var_edit_main;

    ShapeSelectLayout();
    ShapeListLayout();
    ShapeTransformsLayout();

    ShapeBoxSettings();
    ShapeSphereSettings();
    ShapeSphericalshellSettings();
    ShapeCylinderSettings();
    ShapeCylindricalshellSettings();

    stackedLayout = new QStackedLayout;
    stackedLayout->addWidget(groupbox_box_settings);
    stackedLayout->addWidget(groupbox_sphere_settings);
    stackedLayout->addWidget(groupbox_sphericalshell_settings);
    stackedLayout->addWidget(groupbox_cylinder_settings);
    stackedLayout->addWidget(groupbox_cylindricalshell_settings);

    main_layout_shapes = new QHBoxLayout;
    main_layout_shapes->addWidget(shape_select_groupbox);
    main_layout_shapes->addLayout(stackedLayout);
    main_layout_shapes->addWidget(shape_list_groupbox);
    main_layout_shapes->addWidget(transforms_groupbox);

    setLayout(main_layout_shapes);
}


bool PageGeometry::validatePage()
{
    SaveToSimScriptBuffer();
    return true;
}


void PageGeometry::SaveToSimScriptBuffer(void)
{
    text_save_to_simscript.clear();
    text_save_to_simscript.append("##<OUTPUT_AUTOGENERATED_PageGeometry>##\n");

    for(int i_sh = 0; i_sh < shapes_param_list_ptr->count(); ++i_sh)
    {
        if(shapes_param_list_ptr->at(i_sh)->type == "box")
        {
            shape_box_parameters *shape_box_tmp = (shape_box_parameters *)(shapes_param_list_ptr->at(i_sh));
            text_save_to_simscript.append(QString("CSX = AddBox(CSX, '%1', %2, ").arg(shape_box_tmp->material).arg(EvaluateVar(shape_box_tmp->priority)));
            text_save_to_simscript.append(QString("[%1 %2 %3], ").arg(EvaluateVar(shape_box_tmp->x_coord_1)).arg(EvaluateVar(shape_box_tmp->y_coord_1)).arg(EvaluateVar(shape_box_tmp->z_coord_1)));
            text_save_to_simscript.append(QString("[%1 %2 %3]").arg(EvaluateVar(shape_box_tmp->x_coord_2)).arg(EvaluateVar(shape_box_tmp->y_coord_2)).arg(EvaluateVar(shape_box_tmp->z_coord_2)));

            if(shape_box_tmp->transf_order[0] == "Scale" || shape_box_tmp->transf_order[0] == "Rotate" || shape_box_tmp->transf_order[0] == "Move")
            {
                text_save_to_simscript.append(QString(", 'Transform',{"));
                for(int i_tr = 0; shape_box_tmp->transf_order[i_tr] != "" && i_tr < 3; ++i_tr)
                {
                    if(shape_box_tmp->transf_order[i_tr] == "Scale")
                        text_save_to_simscript.append(QString("'Scale', '%1, %2, %3', ").arg(EvaluateVar(shape_box_tmp->transf_scale_x)).arg(EvaluateVar(shape_box_tmp->transf_scale_y)).arg(EvaluateVar(shape_box_tmp->transf_scale_z)));
                    if(shape_box_tmp->transf_order[i_tr] == "Rotate")
                        text_save_to_simscript.append(QString("'Rotate', '%1, %2, %3, %4', ").arg(EvaluateVar(shape_box_tmp->transf_rotate_ax)).arg(EvaluateVar(shape_box_tmp->transf_rotate_ay)).arg(EvaluateVar(shape_box_tmp->transf_rotate_az)).arg(EvaluateVar(shape_box_tmp->transf_rotate_angle)));
                    if(shape_box_tmp->transf_order[i_tr] == "Move")
                        text_save_to_simscript.append(QString("'Translate', '%1,%2,%3', ").arg(EvaluateVar(shape_box_tmp->transf_move_x)).arg(EvaluateVar(shape_box_tmp->transf_move_y)).arg(EvaluateVar(shape_box_tmp->transf_move_z)));
                }
                text_save_to_simscript.chop(2); //cut the last space and comma
                text_save_to_simscript.append(QString("}"));
            }
            text_save_to_simscript.append(QString(");\n"));
        }
        else if(shapes_param_list_ptr->at(i_sh)->type == "sphere")
        {
            shape_sphere_parameters *shape_sphere_tmp = (shape_sphere_parameters *)(shapes_param_list_ptr->at(i_sh));
            text_save_to_simscript.append(QString("CSX = AddSphere(CSX, '%1', %2, ").arg(shape_sphere_tmp->material).arg(EvaluateVar(shape_sphere_tmp->priority)));
            text_save_to_simscript.append(QString("[%1 %2 %3], ").arg(EvaluateVar(shape_sphere_tmp->x_coord)).arg(EvaluateVar(shape_sphere_tmp->y_coord)).arg(EvaluateVar(shape_sphere_tmp->z_coord)));
            text_save_to_simscript.append(QString("%1").arg(EvaluateVar(shape_sphere_tmp->radius)));

            if(shape_sphere_tmp->transf_order[0] == "Scale" || shape_sphere_tmp->transf_order[0] == "Rotate" || shape_sphere_tmp->transf_order[0] == "Move")
            {
                text_save_to_simscript.append(QString(", 'Transform',{"));
                for(int i_tr = 0; shape_sphere_tmp->transf_order[i_tr] != "" && i_tr < 3; ++i_tr)
                {
                    if(shape_sphere_tmp->transf_order[i_tr] == "Scale")
                        text_save_to_simscript.append(QString("'Scale', '%1, %2, %3', ").arg(EvaluateVar(shape_sphere_tmp->transf_scale_x)).arg(EvaluateVar(shape_sphere_tmp->transf_scale_y)).arg(EvaluateVar(shape_sphere_tmp->transf_scale_z)));
                    if(shape_sphere_tmp->transf_order[i_tr] == "Rotate")
                        text_save_to_simscript.append(QString("'Rotate', '%1, %2, %3, %4', ").arg(EvaluateVar(shape_sphere_tmp->transf_rotate_ax)).arg(EvaluateVar(shape_sphere_tmp->transf_rotate_ay)).arg(EvaluateVar(shape_sphere_tmp->transf_rotate_az)).arg(EvaluateVar(shape_sphere_tmp->transf_rotate_angle)));
                    if(shape_sphere_tmp->transf_order[i_tr] == "Move")
                        text_save_to_simscript.append(QString("'Translate', '%1,%2,%3', ").arg(EvaluateVar(shape_sphere_tmp->transf_move_x)).arg(EvaluateVar(shape_sphere_tmp->transf_move_y)).arg(EvaluateVar(shape_sphere_tmp->transf_move_z)));
                }
                text_save_to_simscript.chop(2); //cut the last space and comma
                text_save_to_simscript.append(QString("}"));
            }
            text_save_to_simscript.append(QString(");\n"));
        }
        else if(shapes_param_list_ptr->at(i_sh)->type == "sphericalshell")
        {
            shape_sphericalshell_parameters *shape_sphericalshell_tmp = (shape_sphericalshell_parameters *)(shapes_param_list_ptr->at(i_sh));
            text_save_to_simscript.append(QString("CSX = AddSphericalShell(CSX, '%1', %2, ").arg(shape_sphericalshell_tmp->material).arg(EvaluateVar(shape_sphericalshell_tmp->priority)));
            text_save_to_simscript.append(QString("[%1 %2 %3], ").arg(EvaluateVar(shape_sphericalshell_tmp->x_coord)).arg(EvaluateVar(shape_sphericalshell_tmp->y_coord)).arg(EvaluateVar(shape_sphericalshell_tmp->z_coord)));
            text_save_to_simscript.append(QString("%1, %2").arg((EvaluateVar(shape_sphericalshell_tmp->radius_outer)+EvaluateVar(shape_sphericalshell_tmp->radius_inner))/2).arg(EvaluateVar(shape_sphericalshell_tmp->radius_outer)-EvaluateVar(shape_sphericalshell_tmp->radius_inner)));

            if(shape_sphericalshell_tmp->transf_order[0] == "Scale" || shape_sphericalshell_tmp->transf_order[0] == "Rotate" || shape_sphericalshell_tmp->transf_order[0] == "Move")
            {
                text_save_to_simscript.append(QString(", 'Transform',{"));
                for(int i_tr = 0; shape_sphericalshell_tmp->transf_order[i_tr] != "" && i_tr < 3; ++i_tr)
                {
                    if(shape_sphericalshell_tmp->transf_order[i_tr] == "Scale")
                        text_save_to_simscript.append(QString("'Scale', '%1, %2, %3', ").arg(EvaluateVar(shape_sphericalshell_tmp->transf_scale_x)).arg(EvaluateVar(shape_sphericalshell_tmp->transf_scale_y)).arg(EvaluateVar(shape_sphericalshell_tmp->transf_scale_z)));
                    if(shape_sphericalshell_tmp->transf_order[i_tr] == "Rotate")
                        text_save_to_simscript.append(QString("'Rotate', '%1, %2, %3, %4', ").arg(EvaluateVar(shape_sphericalshell_tmp->transf_rotate_ax)).arg(EvaluateVar(shape_sphericalshell_tmp->transf_rotate_ay)).arg(EvaluateVar(shape_sphericalshell_tmp->transf_rotate_az)).arg(EvaluateVar(shape_sphericalshell_tmp->transf_rotate_angle)));
                    if(shape_sphericalshell_tmp->transf_order[i_tr] == "Move")
                        text_save_to_simscript.append(QString("'Translate', '%1,%2,%3', ").arg(EvaluateVar(shape_sphericalshell_tmp->transf_move_x)).arg(EvaluateVar(shape_sphericalshell_tmp->transf_move_y)).arg(EvaluateVar(shape_sphericalshell_tmp->transf_move_z)));
                }
                text_save_to_simscript.chop(2); //cut the last space and comma
                text_save_to_simscript.append(QString("}"));
            }
            text_save_to_simscript.append(QString(");\n"));
        }
        else if(shapes_param_list_ptr->at(i_sh)->type == "cylinder")
        {
            shape_cylinder_parameters *shape_cylinder_tmp = (shape_cylinder_parameters *)(shapes_param_list_ptr->at(i_sh));
            text_save_to_simscript.append(QString("CSX = AddCylinder(CSX, '%1', %2, ").arg(shape_cylinder_tmp->material).arg(EvaluateVar(shape_cylinder_tmp->priority)));
            text_save_to_simscript.append(QString("[%1 %2 %3], ").arg(EvaluateVar(shape_cylinder_tmp->x_coord_1)).arg(EvaluateVar(shape_cylinder_tmp->y_coord_1)).arg(EvaluateVar(shape_cylinder_tmp->z_coord_1)));
            text_save_to_simscript.append(QString("[%1 %2 %3], ").arg(EvaluateVar(shape_cylinder_tmp->x_coord_2)).arg(EvaluateVar(shape_cylinder_tmp->y_coord_2)).arg(EvaluateVar(shape_cylinder_tmp->z_coord_2)));
            text_save_to_simscript.append(QString("%1").arg(EvaluateVar(shape_cylinder_tmp->radius)));

            if(shape_cylinder_tmp->transf_order[0] == "Scale" || shape_cylinder_tmp->transf_order[0] == "Rotate" || shape_cylinder_tmp->transf_order[0] == "Move")
            {
                text_save_to_simscript.append(QString(", 'Transform',{"));
                for(int i_tr = 0; shape_cylinder_tmp->transf_order[i_tr] != "" && i_tr < 3; ++i_tr)
                {
                    if(shape_cylinder_tmp->transf_order[i_tr] == "Scale")
                        text_save_to_simscript.append(QString("'Scale', '%1, %2, %3', ").arg(EvaluateVar(shape_cylinder_tmp->transf_scale_x)).arg(EvaluateVar(shape_cylinder_tmp->transf_scale_y)).arg(EvaluateVar(shape_cylinder_tmp->transf_scale_z)));
                    if(shape_cylinder_tmp->transf_order[i_tr] == "Rotate")
                        text_save_to_simscript.append(QString("'Rotate', '%1, %2, %3, %4', ").arg(EvaluateVar(shape_cylinder_tmp->transf_rotate_ax)).arg(EvaluateVar(shape_cylinder_tmp->transf_rotate_ay)).arg(EvaluateVar(shape_cylinder_tmp->transf_rotate_az)).arg(EvaluateVar(shape_cylinder_tmp->transf_rotate_angle)));
                    if(shape_cylinder_tmp->transf_order[i_tr] == "Move")
                        text_save_to_simscript.append(QString("'Translate', '%1,%2,%3', ").arg(EvaluateVar(shape_cylinder_tmp->transf_move_x)).arg(EvaluateVar(shape_cylinder_tmp->transf_move_y)).arg(EvaluateVar(shape_cylinder_tmp->transf_move_z)));
                }
                text_save_to_simscript.chop(2); //cut the last space and comma
                text_save_to_simscript.append(QString("}"));
            }
            text_save_to_simscript.append(QString(");\n"));
        }
        else if(shapes_param_list_ptr->at(i_sh)->type == "cylindricalshell")
        {
            shape_cylindricalshell_parameters *shape_cylindricalshell_tmp = (shape_cylindricalshell_parameters *)(shapes_param_list_ptr->at(i_sh));

            text_save_to_simscript.append(QString("CSX = AddCylindricalShell(CSX, '%1', %2, ").arg(shape_cylindricalshell_tmp->material).arg(EvaluateVar(shape_cylindricalshell_tmp->priority)));
            text_save_to_simscript.append(QString("[%1 %2 %3], ").arg(EvaluateVar(shape_cylindricalshell_tmp->x_coord_1)).arg(EvaluateVar(shape_cylindricalshell_tmp->y_coord_1)).arg(EvaluateVar(shape_cylindricalshell_tmp->z_coord_1)));
            text_save_to_simscript.append(QString("[%1 %2 %3], ").arg(EvaluateVar(shape_cylindricalshell_tmp->x_coord_2)).arg(EvaluateVar(shape_cylindricalshell_tmp->y_coord_2)).arg(EvaluateVar(shape_cylindricalshell_tmp->z_coord_2)));
            text_save_to_simscript.append(QString("%1, %2").arg((EvaluateVar(shape_cylindricalshell_tmp->radius_outer)+EvaluateVar(shape_cylindricalshell_tmp->radius_inner))/2).arg(EvaluateVar(shape_cylindricalshell_tmp->radius_outer)-EvaluateVar(shape_cylindricalshell_tmp->radius_inner)));

            if(shape_cylindricalshell_tmp->transf_order[0] == "Scale" || shape_cylindricalshell_tmp->transf_order[0] == "Rotate" || shape_cylindricalshell_tmp->transf_order[0] == "Move")
            {
                text_save_to_simscript.append(QString(", 'Transform',{"));
                for(int i_tr = 0; shape_cylindricalshell_tmp->transf_order[i_tr] != "" && i_tr < 3; ++i_tr)
                {
                    if(shape_cylindricalshell_tmp->transf_order[i_tr] == "Scale")
                        text_save_to_simscript.append(QString("'Scale', '%1, %2, %3', ").arg(EvaluateVar(shape_cylindricalshell_tmp->transf_scale_x)).arg(EvaluateVar(shape_cylindricalshell_tmp->transf_scale_y)).arg(EvaluateVar(shape_cylindricalshell_tmp->transf_scale_z)));
                    if(shape_cylindricalshell_tmp->transf_order[i_tr] == "Rotate")
                        text_save_to_simscript.append(QString("'Rotate', '%1, %2, %3, %4', ").arg(EvaluateVar(shape_cylindricalshell_tmp->transf_rotate_ax)).arg(EvaluateVar(shape_cylindricalshell_tmp->transf_rotate_ay)).arg(EvaluateVar(shape_cylindricalshell_tmp->transf_rotate_az)).arg(EvaluateVar(shape_cylindricalshell_tmp->transf_rotate_angle)));
                    if(shape_cylindricalshell_tmp->transf_order[i_tr] == "Move")
                        text_save_to_simscript.append(QString("'Translate', '%1,%2,%3', ").arg(EvaluateVar(shape_cylindricalshell_tmp->transf_move_x)).arg(EvaluateVar(shape_cylindricalshell_tmp->transf_move_y)).arg(EvaluateVar(shape_cylindricalshell_tmp->transf_move_z)));
                }
                text_save_to_simscript.chop(2); //cut the last space and comma
                text_save_to_simscript.append(QString("}"));
            }
            text_save_to_simscript.append(QString(");\n"));
        }
    }

    text_save_to_simscript.append("##<END_OUTPUT_AUTOGENERATED_PageGeometry>##\n");
    qDebug("%s", qUtf8Printable(text_save_to_simscript));
}


void PageGeometry::ReadFromSimScriptBuffer(void)
{

}


unsigned int PageGeometry::UploadShapesToViewer(bool is_new)
{
    CSPrimitives *prim;
    std::string old_prop_name;
    CSProperties* material_property;
    shape_parameters *shape_selected_general = shapes_param_list_ptr->at(shapes_list_widget->currentRow());

    if(rad_but_type_box->isChecked())
    {
        shape_box_parameters *shape_selected = (shape_box_parameters *)(shape_selected_general);   //get data about the shape stored here - in the wizard
        material_property = wizardsparent_tmp->GetPropertiesByName(shape_selected->material.toStdString()).at(0); //get proprty class from QCSXCAD according to selection in wizard (assumed only one with the name) TODO FIXME different shapes can have the same name!
        CSPrimBox *prim_box;

        if(is_new)
        {
            prim_box = new CSPrimBox(wizardsparent_tmp->clParaSet, material_property);
        }
        else    //if shape is to be changed, not added
        {
            int id_tmp = shapes_param_list_ptr->at(shapes_list_widget->currentRow())->id; //get id of the shape selected in the wizard, to find the corresponding object in QCSXCAD
            CSPrimitives *prim_box_tmp = wizardsparent_tmp->GetPrimitiveByID(id_tmp); //create pointer to access the object in QCSXCAD
            prim_box = prim_box_tmp->ToBox();
            old_prop_name = prim_box_tmp->GetProperty()->GetName();
        }

        prim_box->SetPriority(shape_selected->priority.toInt());
        prim_box->SetCoord(0, EvaluateVar(shape_selected->x_coord_1));
        prim_box->SetCoord(1, EvaluateVar(shape_selected->x_coord_2));
        prim_box->SetCoord(2, EvaluateVar(shape_selected->y_coord_1));
        prim_box->SetCoord(3, EvaluateVar(shape_selected->y_coord_2));
        prim_box->SetCoord(4, EvaluateVar(shape_selected->z_coord_1));
        prim_box->SetCoord(5, EvaluateVar(shape_selected->z_coord_2));

        prim = (CSPrimitives *)(prim_box);
    }
    else if(rad_but_type_sphere->isChecked())
    {
        shape_sphere_parameters *shape_selected = (shape_sphere_parameters *)(shape_selected_general);   //get data about the shape stored here - in the wizard
        material_property = wizardsparent_tmp->GetPropertiesByName(shape_selected->material.toStdString()).at(0); //get proprty class from QCSXCAD according to selection in wizard (assumed only one with the name) TODO FIXME different shapes can have the same name!
        CSPrimSphere *prim_sphere;

        if(is_new)
        {
            prim_sphere = new CSPrimSphere(wizardsparent_tmp->clParaSet, material_property);
        }
        else    //if shape is to be changed, not added
        {
            int id_tmp = shapes_param_list_ptr->at(shapes_list_widget->currentRow())->id; //get id of the shape selected in the wizard, to find the corresponding object in QCSXCAD
            CSPrimitives *prim_sphere_tmp = wizardsparent_tmp->GetPrimitiveByID(id_tmp); //create pointer to access the object in QCSXCAD
            prim_sphere = prim_sphere_tmp->ToSphericalShell();
            old_prop_name = prim_sphere_tmp->GetProperty()->GetName();
        }

        prim_sphere->SetPriority(shape_selected->priority.toInt());
        prim_sphere->SetCoord(0, EvaluateVar(shape_selected->x_coord));
        prim_sphere->SetCoord(2, EvaluateVar(shape_selected->y_coord));
        prim_sphere->SetCoord(4, EvaluateVar(shape_selected->z_coord));
        prim_sphere->SetRadius(EvaluateVar(shape_selected->radius));

        prim = (CSPrimitives *)(prim_sphere);
    }
    else if(rad_but_type_sphericalshell->isChecked())
    {
        shape_sphericalshell_parameters *shape_selected = (shape_sphericalshell_parameters *)(shape_selected_general);   //get data about the shape stored here - in the wizard
        material_property = wizardsparent_tmp->GetPropertiesByName(shape_selected->material.toStdString()).at(0); //get proprty class from QCSXCAD according to selection in wizard (assumed only one with the name) TODO FIXME different shapes can have the same name!

        CSPrimSphericalShell *prim_sphericalshell;

        if(is_new)
        {
            prim_sphericalshell = new CSPrimSphericalShell(wizardsparent_tmp->clParaSet, material_property);
        }
        else    //if shape is to be changed, not added
        {
            int id_tmp = shapes_param_list_ptr->at(shapes_list_widget->currentRow())->id; //get id of the shape selected in the wizard, to find the corresponding object in QCSXCAD
            CSPrimitives *prim_sphericalshell_tmp = wizardsparent_tmp->GetPrimitiveByID(id_tmp); //create pointer to access the object in QCSXCAD
            prim_sphericalshell = prim_sphericalshell_tmp->ToSphericalShell();
            old_prop_name = prim_sphericalshell_tmp->GetProperty()->GetName();
        }

        prim_sphericalshell->SetPriority(shape_selected->priority.toInt());
        prim_sphericalshell->SetCoord(0, EvaluateVar(shape_selected->x_coord));
        prim_sphericalshell->SetCoord(2, EvaluateVar(shape_selected->y_coord));
        prim_sphericalshell->SetCoord(4, EvaluateVar(shape_selected->z_coord));
        prim_sphericalshell->SetRadius((EvaluateVar(shape_selected->radius_outer)+EvaluateVar(shape_selected->radius_inner))/2);
        prim_sphericalshell->SetShellWidth(EvaluateVar(shape_selected->radius_outer)-EvaluateVar(shape_selected->radius_inner));

        prim = (CSPrimitives *)(prim_sphericalshell);
    }
    else if(rad_but_type_cylinder->isChecked())
    {
        shape_cylinder_parameters *shape_selected = (shape_cylinder_parameters *)(shape_selected_general);   //get data about the shape stored here - in the wizard
        material_property = wizardsparent_tmp->GetPropertiesByName(shape_selected->material.toStdString()).at(0); //get proprty class from QCSXCAD according to selection in wizard (assumed only one with the name) TODO FIXME different shapes can have the same name!

        CSPrimCylinder *prim_cylinder;

        if(is_new)
        {
            prim_cylinder = new CSPrimCylinder(wizardsparent_tmp->clParaSet, material_property);
        }
        else    //if shape is to be changed, not added
        {
            int id_tmp = shapes_param_list_ptr->at(shapes_list_widget->currentRow())->id; //get id of the shape selected in the wizard, to find the corresponding object in QCSXCAD
            CSPrimitives *prim_cylinder_tmp = wizardsparent_tmp->GetPrimitiveByID(id_tmp); //create pointer to access the object in QCSXCAD
            prim_cylinder = prim_cylinder_tmp->ToCylindricalShell();
            old_prop_name = prim_cylinder_tmp->GetProperty()->GetName();
        }

        prim_cylinder->SetPriority(shape_selected->priority.toInt());
        prim_cylinder->SetCoord(0, EvaluateVar(shape_selected->x_coord_1));
        prim_cylinder->SetCoord(1, EvaluateVar(shape_selected->x_coord_2));
        prim_cylinder->SetCoord(2, EvaluateVar(shape_selected->y_coord_1));
        prim_cylinder->SetCoord(3, EvaluateVar(shape_selected->y_coord_2));
        prim_cylinder->SetCoord(4, EvaluateVar(shape_selected->z_coord_1));
        prim_cylinder->SetCoord(5, EvaluateVar(shape_selected->z_coord_2));
        prim_cylinder->SetRadius(EvaluateVar(shape_selected->radius));

        prim = (CSPrimitives *)(prim_cylinder);
    }
    else if(rad_but_type_cylindricalshell->isChecked())
    {
        shape_cylindricalshell_parameters *shape_selected = (shape_cylindricalshell_parameters *)(shape_selected_general);   //get data about the shape stored here - in the wizard
        material_property = wizardsparent_tmp->GetPropertiesByName(shape_selected->material.toStdString()).at(0); //get proprty class from QCSXCAD according to selection in wizard (assumed only one with the name) TODO FIXME different shapes can have the same name!

        CSPrimCylindricalShell *prim_cylindricalshell;

        if(is_new)
        {
            prim_cylindricalshell = new CSPrimCylindricalShell(wizardsparent_tmp->clParaSet, material_property);
        }
        else    //if shape is to be changed, not added
        {
            int id_tmp = shapes_param_list_ptr->at(shapes_list_widget->currentRow())->id; //get id of the shape selected in the wizard, to find the corresponding object in QCSXCAD
            CSPrimitives *prim_cylindricalshell_tmp = wizardsparent_tmp->GetPrimitiveByID(id_tmp); //create pointer to access the object in QCSXCAD
            prim_cylindricalshell = prim_cylindricalshell_tmp->ToCylindricalShell();
            old_prop_name = prim_cylindricalshell_tmp->GetProperty()->GetName();
        }

        prim_cylindricalshell->SetPriority(shape_selected->priority.toInt());
        prim_cylindricalshell->SetCoord(0, EvaluateVar(shape_selected->x_coord_1));
        prim_cylindricalshell->SetCoord(1, EvaluateVar(shape_selected->x_coord_2));
        prim_cylindricalshell->SetCoord(2, EvaluateVar(shape_selected->y_coord_1));
        prim_cylindricalshell->SetCoord(3, EvaluateVar(shape_selected->y_coord_2));
        prim_cylindricalshell->SetCoord(4, EvaluateVar(shape_selected->z_coord_1));
        prim_cylindricalshell->SetCoord(5, EvaluateVar(shape_selected->z_coord_2));
        prim_cylindricalshell->SetRadius((EvaluateVar(shape_selected->radius_outer)+EvaluateVar(shape_selected->radius_inner))/2);
        prim_cylindricalshell->SetShellWidth(EvaluateVar(shape_selected->radius_outer)-EvaluateVar(shape_selected->radius_inner));

        prim = (CSPrimitives *)(prim_cylindricalshell);
    }

    prim->GetTransform()->Reset();
    for(int i_tr = 0; i_tr < 3; ++i_tr)
    {
        if(shape_selected_general->transf_order[i_tr] == "Scale")
        {
            double transf_arr_scale[3] = {  EvaluateVar(shape_selected_general->transf_scale_x),
                                            EvaluateVar(shape_selected_general->transf_scale_y),
                                            EvaluateVar(shape_selected_general->transf_scale_z)};
            prim->GetTransform()->Scale(transf_arr_scale, true);
        }
        if(shape_selected_general->transf_order[i_tr] == "Rotate")
        {
            double transf_arr_rotate[3] = { EvaluateVar(shape_selected_general->transf_rotate_ax),
                                            EvaluateVar(shape_selected_general->transf_rotate_ay),
                                            EvaluateVar(shape_selected_general->transf_rotate_az)};
            prim->GetTransform()->RotateOrigin(transf_arr_rotate, EvaluateVar(shape_selected_general->transf_rotate_angle), true);
        }
        if(shape_selected_general->transf_order[i_tr] == "Move")
        {
            double transf_arr_transl[3] = {   EvaluateVar(shape_selected_general->transf_move_x),
                                             EvaluateVar(shape_selected_general->transf_move_y),
                                             EvaluateVar(shape_selected_general->transf_move_z)};
            prim->GetTransform()->Translate(transf_arr_transl, true);
        }
    }

    if(is_new)
    {
        wizardsparent_tmp->setModified();
        wizardsparent_tmp->CSTree->AddPrimItem(prim);
        return prim->GetID();
    }
    else
    {
        if(material_property->GetName() != old_prop_name)
        {
            material_property->AddPrimitive(prim);
            wizardsparent_tmp->CSTree->SwitchProperty((CSPrimitives *)(prim), material_property);
        }
        wizardsparent_tmp->setModified();
    }
}


void PageGeometry::RemoveShapesFromViewer(void)
{
    int id_tmp = shapes_param_list_ptr->at(shapes_list_widget->currentRow())->id;
    CSPrimitives *prim_tmp = wizardsparent_tmp->GetPrimitiveByID(id_tmp);
    wizardsparent_tmp->CSTree->DeletePrimItem(prim_tmp);
    wizardsparent_tmp->DeletePrimitive(prim_tmp);
    wizardsparent_tmp->setModified();
}


void PageGeometry::ShapeSelectLayout(void)
{
    shape_select_groupbox = new QGroupBox(tr("Select shape type"));
    QGridLayout *grid_layout_select_shape = new QGridLayout;

    rad_but_type_box = new QRadioButton("Box", this);
    rad_but_type_sphere = new QRadioButton("Sphere", this);
    rad_but_type_sphericalshell = new QRadioButton("Spherical Shell", this);
    rad_but_type_cylinder = new QRadioButton("Cylinder", this);
    rad_but_type_cylindricalshell = new QRadioButton("Cylindrical Shell", this);
    rad_but_type_curve = new QRadioButton("Curve", this);
    rad_but_type_wire = new QRadioButton("Wire", this);
    rad_but_type_polygon = new QRadioButton("Polygon", this);
    rad_but_type_extruded_polygon = new QRadioButton("Extruded polygon", this);
    rad_but_type_rotational_solid = new QRadioButton("Rotational Solid", this);
    rad_but_type_polyhedron = new QRadioButton("Polyhedron", this);
    connect(rad_but_type_box, SIGNAL(clicked()), this, SLOT(OnSetShapeTypeLayout()));
    connect(rad_but_type_sphere, SIGNAL(clicked()), this, SLOT(OnSetShapeTypeLayout()));
    connect(rad_but_type_sphericalshell, SIGNAL(clicked()), this, SLOT(OnSetShapeTypeLayout()));
    connect(rad_but_type_cylinder, SIGNAL(clicked()), this, SLOT(OnSetShapeTypeLayout()));
    connect(rad_but_type_cylindricalshell, SIGNAL(clicked()), this, SLOT(OnSetShapeTypeLayout()));
    connect(rad_but_type_curve, SIGNAL(clicked()), this, SLOT(OnSetShapeTypeLayout()));
    connect(rad_but_type_wire, SIGNAL(clicked()), this, SLOT(OnSetShapeTypeLayout()));
    connect(rad_but_type_polygon, SIGNAL(clicked()), this, SLOT(OnSetShapeTypeLayout()));
    connect(rad_but_type_extruded_polygon, SIGNAL(clicked()), this, SLOT(OnSetShapeTypeLayout()));
    connect(rad_but_type_rotational_solid, SIGNAL(clicked()), this, SLOT(OnSetShapeTypeLayout()));
    connect(rad_but_type_polyhedron, SIGNAL(clicked()), this, SLOT(OnSetShapeTypeLayout()));
    rad_but_type_box->setChecked(true);

    grid_layout_select_shape->addWidget(rad_but_type_box, 0, 0, Qt::AlignLeft);
    grid_layout_select_shape->addWidget(rad_but_type_sphere, 1, 0, Qt::AlignLeft);
    grid_layout_select_shape->addWidget(rad_but_type_sphericalshell, 2, 0, Qt::AlignLeft);
    grid_layout_select_shape->addWidget(rad_but_type_cylinder, 3, 0, Qt::AlignLeft);
    grid_layout_select_shape->addWidget(rad_but_type_cylindricalshell, 4, 0, Qt::AlignLeft);
    grid_layout_select_shape->addWidget(rad_but_type_curve, 5, 0, Qt::AlignLeft);
    grid_layout_select_shape->addWidget(rad_but_type_wire, 6, 0, Qt::AlignLeft);
    grid_layout_select_shape->addWidget(rad_but_type_polygon, 7, 0, Qt::AlignLeft);
    grid_layout_select_shape->addWidget(rad_but_type_extruded_polygon, 8, 0, Qt::AlignLeft);
    grid_layout_select_shape->addWidget(rad_but_type_rotational_solid, 9, 0, Qt::AlignLeft);
    grid_layout_select_shape->addWidget(rad_but_type_polyhedron, 10, 0, Qt::AlignLeft);

    shape_select_groupbox->setLayout(grid_layout_select_shape);
}


void PageGeometry::ShapeListLayout(void)
{
    shape_list_groupbox = new QGroupBox(tr("Shapes list"));
    QGridLayout *grid_layout_shape_list = new QGridLayout;

    shapes_list_widget = new QListWidget(this);
    connect(shapes_list_widget, SIGNAL(itemClicked(QListWidgetItem*)), this, SLOT(OnGetSelectedShape(QListWidgetItem*)));

    QPushButton *button_add_edit_shape = new QPushButton("New/Edit", this);
    connect(button_add_edit_shape, SIGNAL(released()), this, SLOT(OnAddOrChangeShape()));
    QPushButton *button_remove_shape = new QPushButton("Remove", this);
    connect(button_remove_shape, SIGNAL(released()), this, SLOT(OnRemoveShape()));

    grid_layout_shape_list->addWidget(button_add_edit_shape, 8, 0, Qt::AlignLeft);
    grid_layout_shape_list->addWidget(button_remove_shape, 8, 1, Qt::AlignLeft);
    grid_layout_shape_list->addWidget(shapes_list_widget, 0, 0, 7, 2, Qt::AlignLeft);

    shape_list_groupbox->setLayout(grid_layout_shape_list);
}

void PageGeometry::ShapeTransformsLayout(void)  //settings of transformations (move, rotate, scale) of shapes
{
    //main groupbox and layout
    transforms_groupbox = new QGroupBox(tr("Transforms"));
    QVBoxLayout *vert_layout_transforms = new QVBoxLayout;

    //selecting order of transforms
    QGroupBox *groupbox_transf_order = new QGroupBox(tr("Order of transforms"));
    QGridLayout *grid_layout_transf_order = new QGridLayout;
    transforms_list_widget = new QListWidget(this);
    button_transform_scale = new QPushButton("Scale", this);
    connect(button_transform_scale, SIGNAL(released()), this, SLOT(OnChangeTransformOrder()));
    button_transform_rotate = new QPushButton("Rotate", this);
    connect(button_transform_rotate, SIGNAL(released()), this, SLOT(OnChangeTransformOrder()));
    button_transform_move = new QPushButton("Move", this);
    connect(button_transform_move, SIGNAL(released()), this, SLOT(OnChangeTransformOrder()));
    button_transform_remove = new QPushButton("Remove transforms", this);
    connect(button_transform_remove, SIGNAL(released()), this, SLOT(OnChangeTransformOrder()));
    grid_layout_transf_order->addWidget(transforms_list_widget, 0, 0, 3, 1, Qt::AlignLeft);
    grid_layout_transf_order->addWidget(button_transform_scale, 0, 1, Qt::AlignLeft);
    grid_layout_transf_order->addWidget(button_transform_rotate, 1, 1, Qt::AlignLeft);
    grid_layout_transf_order->addWidget(button_transform_move, 2, 1, Qt::AlignLeft);
    grid_layout_transf_order->addWidget(button_transform_remove, 3, 0, 1, 2, Qt::AlignCenter);
    groupbox_transf_order->setLayout(grid_layout_transf_order);

    //controls for scale transform
    QGroupBox *groupbox_transf_scale = new QGroupBox(tr("Scale"));
    QGridLayout *grid_layout_scale = new QGridLayout;
    QLabel *transf_statictext_scale_x = new QLabel("x", this);
    QLabel *transf_statictext_scale_y = new QLabel("y", this);
    QLabel *transf_statictext_scale_z = new QLabel("z", this);
    transf_scale_x = new QLineEdit(this);
    transf_scale_y = new QLineEdit(this);
    transf_scale_z = new QLineEdit(this);
    grid_layout_scale->addWidget(transf_statictext_scale_x, 0, 1, Qt::AlignCenter);
    grid_layout_scale->addWidget(transf_statictext_scale_y, 0, 2, Qt::AlignCenter);
    grid_layout_scale->addWidget(transf_statictext_scale_z, 0, 3, Qt::AlignCenter);
    grid_layout_scale->addWidget(transf_scale_x, 1, 1, Qt::AlignLeft);
    grid_layout_scale->addWidget(transf_scale_y, 1, 2, Qt::AlignLeft);
    grid_layout_scale->addWidget(transf_scale_z, 1, 3, Qt::AlignLeft);
    groupbox_transf_scale->setLayout(grid_layout_scale);

    //controls for rotate transform
    QGroupBox *groupbox_transf_rotate = new QGroupBox(tr("Rotate"));
    QGridLayout *grid_layout_rotate = new QGridLayout;
    QLabel *transf_statictext_rot_ax = new QLabel("axis x", this);
    QLabel *transf_statictext_rot_ay = new QLabel("axis y", this);
    QLabel *transf_statictext_rot_az = new QLabel("axis z", this);
    QLabel *transf_statictext_rot_angle = new QLabel("angle", this);
    transf_rotate_ax = new QLineEdit(this);
    transf_rotate_ay = new QLineEdit(this);
    transf_rotate_az = new QLineEdit(this);
    transf_rotate_angle = new QLineEdit(this);
    grid_layout_rotate->addWidget(transf_statictext_rot_ax, 0, 1, Qt::AlignCenter);
    grid_layout_rotate->addWidget(transf_statictext_rot_ay, 0, 2, Qt::AlignCenter);
    grid_layout_rotate->addWidget(transf_statictext_rot_az, 0, 3, Qt::AlignCenter);
    grid_layout_rotate->addWidget(transf_rotate_ax, 1, 1, Qt::AlignLeft);
    grid_layout_rotate->addWidget(transf_rotate_ay, 1, 2, Qt::AlignLeft);
    grid_layout_rotate->addWidget(transf_rotate_az, 1, 3, Qt::AlignLeft);
    grid_layout_rotate->addWidget(transf_statictext_rot_angle, 2, 1, 1, 3, Qt::AlignCenter);
    grid_layout_rotate->addWidget(transf_rotate_angle, 3, 1, 1, 3, Qt::AlignCenter);
    groupbox_transf_rotate->setLayout(grid_layout_rotate);

    //controls for move transform
    QGroupBox *groupbox_transf_move = new QGroupBox(tr("Move"));
    QGridLayout *grid_layout_move = new QGridLayout;
    QLabel *transf_statictext_move_x = new QLabel("x", this);
    QLabel *transf_statictext_move_y = new QLabel("y", this);
    QLabel *transf_statictext_move_z = new QLabel("z", this);
    transf_move_x = new QLineEdit(this);
    transf_move_y = new QLineEdit(this);
    transf_move_z = new QLineEdit(this);
    grid_layout_move->addWidget(transf_statictext_move_x, 0, 1, Qt::AlignCenter);
    grid_layout_move->addWidget(transf_statictext_move_y, 0, 2, Qt::AlignCenter);
    grid_layout_move->addWidget(transf_statictext_move_z, 0, 3, Qt::AlignCenter);
    grid_layout_move->addWidget(transf_move_x, 1, 1, Qt::AlignLeft);
    grid_layout_move->addWidget(transf_move_y, 1, 2, Qt::AlignLeft);
    grid_layout_move->addWidget(transf_move_z, 1, 3, Qt::AlignLeft);
    groupbox_transf_move->setLayout(grid_layout_move);

    //adding groups of controls to main layout
    vert_layout_transforms->addWidget(groupbox_transf_order, Qt::AlignTop);
    vert_layout_transforms->addWidget(groupbox_transf_scale, Qt::AlignTop);
    vert_layout_transforms->addWidget(groupbox_transf_rotate, Qt::AlignTop);
    vert_layout_transforms->addWidget(groupbox_transf_move, Qt::AlignTop);
    transforms_groupbox->setLayout(vert_layout_transforms);
}

void PageGeometry::ShapeBoxSettings(void)
{
    groupbox_box_settings = new QGroupBox(tr("Box settings"));
    QGridLayout *grid_layout_shape_box = new QGridLayout;

    QGroupBox *groupbox_box_params = new QGroupBox(tr("Box coordinates"));
    QGridLayout *grid_layout_box_params = new QGridLayout;
    QLabel *sh_box_statictext_name = new QLabel("name", this);
    sh_box_name = new QLineEdit(this);
    QLabel *sh_box_statictext_priority = new QLabel("priority", this);
    sh_box_priority = new QLineEdit(this);
    QLabel *sh_box_statictext_material = new QLabel("material", this);
    sh_box_material = new QComboBox(this);
    grid_layout_box_params->addWidget(sh_box_statictext_name, 0, 0, Qt::AlignLeft);
    grid_layout_box_params->addWidget(sh_box_statictext_priority, 1, 0, Qt::AlignLeft);
    grid_layout_box_params->addWidget(sh_box_statictext_material, 2, 0, Qt::AlignLeft);
    grid_layout_box_params->addWidget(sh_box_name, 0, 1, Qt::AlignLeft);
    grid_layout_box_params->addWidget(sh_box_priority, 1, 1, Qt::AlignLeft);
    grid_layout_box_params->addWidget(sh_box_material, 2, 1, Qt::AlignLeft);
    groupbox_box_params->setLayout(grid_layout_box_params);
    QLabel *sh_box_statictext_placeholder = new QLabel("", this);

    QGroupBox *groupbox_box_coords = new QGroupBox(tr("Box coordinates"));
    QGridLayout *grid_layout_box_coords = new QGridLayout;
    QLabel *coord_statictext_coord1_label = new QLabel("Start", this);
    QLabel *coord_statictext_coord2_label = new QLabel("Stop", this);
    QLabel *coord_statictext_coord_x = new QLabel("x", this);
    QLabel *coord_statictext_coord_y = new QLabel("y", this);
    QLabel *coord_statictext_coord_z = new QLabel("z", this);
    sh_box_x_coord_1 = new QLineEdit(this);
    sh_box_x_coord_2 = new QLineEdit(this);
    sh_box_y_coord_1 = new QLineEdit(this);
    sh_box_y_coord_2 = new QLineEdit(this);
    sh_box_z_coord_1 = new QLineEdit(this);
    sh_box_z_coord_2 = new QLineEdit(this);
    grid_layout_box_coords->addWidget(coord_statictext_coord1_label, 1, 0, Qt::AlignLeft);
    grid_layout_box_coords->addWidget(coord_statictext_coord2_label, 2, 0, Qt::AlignLeft);
    grid_layout_box_coords->addWidget(coord_statictext_coord_x, 0, 1, Qt::AlignCenter);
    grid_layout_box_coords->addWidget(coord_statictext_coord_y, 0, 2, Qt::AlignCenter);
    grid_layout_box_coords->addWidget(coord_statictext_coord_z, 0, 3, Qt::AlignCenter);
    grid_layout_box_coords->addWidget(sh_box_x_coord_1, 1, 1, Qt::AlignLeft);
    grid_layout_box_coords->addWidget(sh_box_y_coord_1, 1, 2, Qt::AlignLeft);
    grid_layout_box_coords->addWidget(sh_box_z_coord_1, 1, 3, Qt::AlignLeft);
    grid_layout_box_coords->addWidget(sh_box_x_coord_2, 2, 1, Qt::AlignLeft);
    grid_layout_box_coords->addWidget(sh_box_y_coord_2, 2, 2, Qt::AlignLeft);
    grid_layout_box_coords->addWidget(sh_box_z_coord_2, 2, 3, Qt::AlignLeft);
    groupbox_box_coords->setLayout(grid_layout_box_coords);

    connect(sh_box_name, SIGNAL(editingFinished()), this, SLOT(OnSetShapeTypeLayout()));

    grid_layout_shape_box->addWidget(groupbox_box_params, 0, 0, Qt::AlignTop);
    grid_layout_shape_box->addWidget(groupbox_box_coords, 1, 0, Qt::AlignTop);
    grid_layout_shape_box->addWidget(sh_box_statictext_placeholder, 2, 0, Qt::AlignTop);

    groupbox_box_settings->setLayout(grid_layout_shape_box);
}

void PageGeometry::ShapeSphereSettings(void)
{
    groupbox_sphere_settings = new QGroupBox(tr("Sphere settings"));
    QGridLayout *grid_layout_shape_sphere = new QGridLayout;

    QGroupBox *groupbox_sphere_params = new QGroupBox(tr("Sphere coordinates"));
    QGridLayout *grid_layout_sphere_params = new QGridLayout;
    QLabel *sh_sphere_statictext_name = new QLabel("name", this);
    sh_sphere_name = new QLineEdit(this);
    QLabel *sh_sphere_statictext_priority = new QLabel("priority", this);
    sh_sphere_priority = new QLineEdit(this);
    QLabel *sh_sphere_statictext_material = new QLabel("material", this);
    sh_sphere_material = new QComboBox(this);
    grid_layout_sphere_params->addWidget(sh_sphere_statictext_name, 0, 0, Qt::AlignLeft);
    grid_layout_sphere_params->addWidget(sh_sphere_statictext_priority, 1, 0, Qt::AlignLeft);
    grid_layout_sphere_params->addWidget(sh_sphere_statictext_material, 2, 0, Qt::AlignLeft);
    grid_layout_sphere_params->addWidget(sh_sphere_name, 0, 1, Qt::AlignLeft);
    grid_layout_sphere_params->addWidget(sh_sphere_priority, 1, 1, Qt::AlignLeft);
    grid_layout_sphere_params->addWidget(sh_sphere_material, 2, 1, Qt::AlignLeft);
    groupbox_sphere_params->setLayout(grid_layout_sphere_params);
    QLabel *sh_sphere_statictext_placeholder = new QLabel("", this);

    QGroupBox *groupbox_sphere_coords = new QGroupBox(tr("Sphere coordinates"));
    QGridLayout *grid_layout_sphere_coords = new QGridLayout;
    QLabel *coord_statictext_coord1_label = new QLabel("Center", this);
    QLabel *coord_statictext_coord_x = new QLabel("x", this);
    QLabel *coord_statictext_coord_y = new QLabel("y", this);
    QLabel *coord_statictext_coord_z = new QLabel("z", this);
    QLabel *coord_statictext_radius = new QLabel("radius", this);
    sh_sphere_x_coord = new QLineEdit(this);
    sh_sphere_y_coord = new QLineEdit(this);
    sh_sphere_z_coord = new QLineEdit(this);
    sh_sphere_radius = new QLineEdit(this);
    grid_layout_sphere_coords->addWidget(coord_statictext_coord1_label, 1, 0, Qt::AlignLeft);
    grid_layout_sphere_coords->addWidget(coord_statictext_coord_x, 0, 1, Qt::AlignCenter);
    grid_layout_sphere_coords->addWidget(coord_statictext_coord_y, 0, 2, Qt::AlignCenter);
    grid_layout_sphere_coords->addWidget(coord_statictext_coord_z, 0, 3, Qt::AlignCenter);
    grid_layout_sphere_coords->addWidget(coord_statictext_radius, 2, 0, Qt::AlignCenter);
    grid_layout_sphere_coords->addWidget(sh_sphere_x_coord, 1, 1, Qt::AlignLeft);
    grid_layout_sphere_coords->addWidget(sh_sphere_y_coord, 1, 2, Qt::AlignLeft);
    grid_layout_sphere_coords->addWidget(sh_sphere_z_coord, 1, 3, Qt::AlignLeft);
    grid_layout_sphere_coords->addWidget(sh_sphere_radius, 2, 1, Qt::AlignLeft);
    groupbox_sphere_coords->setLayout(grid_layout_sphere_coords);

    connect(sh_sphere_name, SIGNAL(editingFinished()), this, SLOT(OnSetShapeTypeLayout()));

    grid_layout_shape_sphere->addWidget(groupbox_sphere_params, 0, 0, Qt::AlignTop);
    grid_layout_shape_sphere->addWidget(groupbox_sphere_coords, 1, 0, Qt::AlignTop);
    grid_layout_shape_sphere->addWidget(sh_sphere_statictext_placeholder, 2, 0, Qt::AlignTop);

    groupbox_sphere_settings->setLayout(grid_layout_shape_sphere);
}

void PageGeometry::ShapeSphericalshellSettings(void)
{
    groupbox_sphericalshell_settings = new QGroupBox(tr("Spherical Shell settings"));
    QGridLayout *grid_layout_shape_sphericalshell = new QGridLayout;

    QGroupBox *groupbox_sphericalshell_params = new QGroupBox(tr("Sphere coordinates"));
    QGridLayout *grid_layout_sphericalshell_params = new QGridLayout;
    QLabel *sh_sphericalshell_statictext_name = new QLabel("name", this);
    sh_sphericalshell_name = new QLineEdit(this);
    QLabel *sh_sphericalshell_statictext_priority = new QLabel("priority", this);
    sh_sphericalshell_priority = new QLineEdit(this);
    QLabel *sh_sphericalshell_statictext_material = new QLabel("material", this);
    sh_sphericalshell_material = new QComboBox(this);
    grid_layout_sphericalshell_params->addWidget(sh_sphericalshell_statictext_name, 0, 0, Qt::AlignLeft);
    grid_layout_sphericalshell_params->addWidget(sh_sphericalshell_statictext_priority, 1, 0, Qt::AlignLeft);
    grid_layout_sphericalshell_params->addWidget(sh_sphericalshell_statictext_material, 2, 0, Qt::AlignLeft);
    grid_layout_sphericalshell_params->addWidget(sh_sphericalshell_name, 0, 1, Qt::AlignLeft);
    grid_layout_sphericalshell_params->addWidget(sh_sphericalshell_priority, 1, 1, Qt::AlignLeft);
    grid_layout_sphericalshell_params->addWidget(sh_sphericalshell_material, 2, 1, Qt::AlignLeft);
    groupbox_sphericalshell_params->setLayout(grid_layout_sphericalshell_params);
    QLabel *sh_sphericalshell_statictext_placeholder = new QLabel("", this);

    QGroupBox *groupbox_sphericalshell_coords = new QGroupBox(tr("Sphere coordinates"));
    QGridLayout *grid_layout_sphericalshell_coords = new QGridLayout;
    QLabel *coord_statictext_coord1_label = new QLabel("Center", this);
    QLabel *coord_statictext_coord_x = new QLabel("x", this);
    QLabel *coord_statictext_coord_y = new QLabel("y", this);
    QLabel *coord_statictext_coord_z = new QLabel("z", this);
    QLabel *coord_statictext_radius_outer = new QLabel("radius outer", this);
    QLabel *coord_statictext_radius_inner = new QLabel("radius inner", this);
    sh_sphericalshell_x_coord = new QLineEdit(this);
    sh_sphericalshell_y_coord = new QLineEdit(this);
    sh_sphericalshell_z_coord = new QLineEdit(this);
    sh_sphericalshell_radius_outer = new QLineEdit(this);
    sh_sphericalshell_radius_inner = new QLineEdit(this);
    grid_layout_sphericalshell_coords->addWidget(coord_statictext_coord1_label, 1, 0, Qt::AlignLeft);
    grid_layout_sphericalshell_coords->addWidget(coord_statictext_coord_x, 0, 1, Qt::AlignCenter);
    grid_layout_sphericalshell_coords->addWidget(coord_statictext_coord_y, 0, 2, Qt::AlignCenter);
    grid_layout_sphericalshell_coords->addWidget(coord_statictext_coord_z, 0, 3, Qt::AlignCenter);
    grid_layout_sphericalshell_coords->addWidget(coord_statictext_radius_outer, 3, 0, Qt::AlignCenter);
    grid_layout_sphericalshell_coords->addWidget(coord_statictext_radius_inner, 4, 0, Qt::AlignCenter);
    grid_layout_sphericalshell_coords->addWidget(sh_sphericalshell_x_coord, 1, 1, Qt::AlignLeft);
    grid_layout_sphericalshell_coords->addWidget(sh_sphericalshell_y_coord, 1, 2, Qt::AlignLeft);
    grid_layout_sphericalshell_coords->addWidget(sh_sphericalshell_z_coord, 1, 3, Qt::AlignLeft);
    grid_layout_sphericalshell_coords->addWidget(sh_sphericalshell_radius_outer, 3, 1, Qt::AlignLeft);
    grid_layout_sphericalshell_coords->addWidget(sh_sphericalshell_radius_inner, 4, 1, Qt::AlignLeft);
    groupbox_sphericalshell_coords->setLayout(grid_layout_sphericalshell_coords);

    connect(sh_sphericalshell_name, SIGNAL(editingFinished()), this, SLOT(OnSetShapeTypeLayout()));

    grid_layout_shape_sphericalshell->addWidget(groupbox_sphericalshell_params, 0, 0, Qt::AlignTop);
    grid_layout_shape_sphericalshell->addWidget(groupbox_sphericalshell_coords, 1, 0, Qt::AlignTop);
    grid_layout_shape_sphericalshell->addWidget(sh_sphericalshell_statictext_placeholder, 2, 0, Qt::AlignTop);

    groupbox_sphericalshell_settings->setLayout(grid_layout_shape_sphericalshell);
}

void PageGeometry::ShapeCylinderSettings(void)
{
    groupbox_cylinder_settings = new QGroupBox(tr("Cylinder settings"));
    QGridLayout *grid_layout_shape_cylinder = new QGridLayout;

    QGroupBox *groupbox_cylinder_params = new QGroupBox(tr("Cylinder coordinates"));
    QGridLayout *grid_layout_cylinder_params = new QGridLayout;
    QLabel *sh_cylinder_statictext_name = new QLabel("name", this);
    sh_cylinder_name = new QLineEdit(this);
    QLabel *sh_cylinder_statictext_priority = new QLabel("priority", this);
    sh_cylinder_priority = new QLineEdit(this);
    QLabel *sh_cylinder_statictext_material = new QLabel("material", this);
    sh_cylinder_material = new QComboBox(this);
    grid_layout_cylinder_params->addWidget(sh_cylinder_statictext_name, 0, 0, Qt::AlignLeft);
    grid_layout_cylinder_params->addWidget(sh_cylinder_statictext_priority, 1, 0, Qt::AlignLeft);
    grid_layout_cylinder_params->addWidget(sh_cylinder_statictext_material, 2, 0, Qt::AlignLeft);
    grid_layout_cylinder_params->addWidget(sh_cylinder_name, 0, 1, Qt::AlignLeft);
    grid_layout_cylinder_params->addWidget(sh_cylinder_priority, 1, 1, Qt::AlignLeft);
    grid_layout_cylinder_params->addWidget(sh_cylinder_material, 2, 1, Qt::AlignLeft);
    groupbox_cylinder_params->setLayout(grid_layout_cylinder_params);
    QLabel *sh_cylinder_statictext_placeholder = new QLabel("", this);

    QGroupBox *groupbox_cylinder_coords = new QGroupBox(tr("Cylinder coordinates"));
    QGridLayout *grid_layout_cylinder_coords = new QGridLayout;
    QLabel *coord_statictext_coord1_label = new QLabel("Start", this);
    QLabel *coord_statictext_coord2_label = new QLabel("Stop", this);
    QLabel *coord_statictext_coord_x = new QLabel("x", this);
    QLabel *coord_statictext_coord_y = new QLabel("y", this);
    QLabel *coord_statictext_coord_z = new QLabel("z", this);
    QLabel *coord_statictext_radius = new QLabel("radius", this);
    sh_cylinder_x_coord_1 = new QLineEdit(this);
    sh_cylinder_x_coord_2 = new QLineEdit(this);
    sh_cylinder_y_coord_1 = new QLineEdit(this);
    sh_cylinder_y_coord_2 = new QLineEdit(this);
    sh_cylinder_z_coord_1 = new QLineEdit(this);
    sh_cylinder_z_coord_2 = new QLineEdit(this);
    sh_cylinder_radius = new QLineEdit(this);
    grid_layout_cylinder_coords->addWidget(coord_statictext_coord1_label, 1, 0, Qt::AlignLeft);
    grid_layout_cylinder_coords->addWidget(coord_statictext_coord2_label, 2, 0, Qt::AlignLeft);
    grid_layout_cylinder_coords->addWidget(coord_statictext_coord_x, 0, 1, Qt::AlignCenter);
    grid_layout_cylinder_coords->addWidget(coord_statictext_coord_y, 0, 2, Qt::AlignCenter);
    grid_layout_cylinder_coords->addWidget(coord_statictext_coord_z, 0, 3, Qt::AlignCenter);
    grid_layout_cylinder_coords->addWidget(coord_statictext_radius, 3, 0, Qt::AlignLeft);
    grid_layout_cylinder_coords->addWidget(sh_cylinder_x_coord_1, 1, 1, Qt::AlignLeft);
    grid_layout_cylinder_coords->addWidget(sh_cylinder_y_coord_1, 1, 2, Qt::AlignLeft);
    grid_layout_cylinder_coords->addWidget(sh_cylinder_z_coord_1, 1, 3, Qt::AlignLeft);
    grid_layout_cylinder_coords->addWidget(sh_cylinder_x_coord_2, 2, 1, Qt::AlignLeft);
    grid_layout_cylinder_coords->addWidget(sh_cylinder_y_coord_2, 2, 2, Qt::AlignLeft);
    grid_layout_cylinder_coords->addWidget(sh_cylinder_z_coord_2, 2, 3, Qt::AlignLeft);
    grid_layout_cylinder_coords->addWidget(sh_cylinder_radius, 3, 1, Qt::AlignCenter);
    groupbox_cylinder_coords->setLayout(grid_layout_cylinder_coords);

    connect(sh_cylinder_name, SIGNAL(editingFinished()), this, SLOT(OnSetShapeTypeLayout()));

    grid_layout_shape_cylinder->addWidget(groupbox_cylinder_params, 0, 0, Qt::AlignTop);
    grid_layout_shape_cylinder->addWidget(groupbox_cylinder_coords, 1, 0, Qt::AlignTop);
    grid_layout_shape_cylinder->addWidget(sh_cylinder_statictext_placeholder, 2, 0, Qt::AlignTop);

    groupbox_cylinder_settings->setLayout(grid_layout_shape_cylinder);
}

void PageGeometry::ShapeCylindricalshellSettings(void)
{
    groupbox_cylindricalshell_settings = new QGroupBox(tr("Cylindrical Shell settings"));
    QGridLayout *grid_layout_shape_cylindricalshell = new QGridLayout;

    QGroupBox *groupbox_cylindricalshell_params = new QGroupBox(tr("Cylinder coordinates"));
    QGridLayout *grid_layout_cylindricalshell_params = new QGridLayout;
    QLabel *sh_cylindricalshell_statictext_name = new QLabel("name", this);
    sh_cylindricalshell_name = new QLineEdit(this);
    QLabel *sh_cylindricalshell_statictext_priority = new QLabel("priority", this);
    sh_cylindricalshell_priority = new QLineEdit(this);
    QLabel *sh_cylindricalshell_statictext_material = new QLabel("material", this);
    sh_cylindricalshell_material = new QComboBox(this);
    grid_layout_cylindricalshell_params->addWidget(sh_cylindricalshell_statictext_name, 0, 0, Qt::AlignLeft);
    grid_layout_cylindricalshell_params->addWidget(sh_cylindricalshell_statictext_priority, 1, 0, Qt::AlignLeft);
    grid_layout_cylindricalshell_params->addWidget(sh_cylindricalshell_statictext_material, 2, 0, Qt::AlignLeft);
    grid_layout_cylindricalshell_params->addWidget(sh_cylindricalshell_name, 0, 1, Qt::AlignLeft);
    grid_layout_cylindricalshell_params->addWidget(sh_cylindricalshell_priority, 1, 1, Qt::AlignLeft);
    grid_layout_cylindricalshell_params->addWidget(sh_cylindricalshell_material, 2, 1, Qt::AlignLeft);
    groupbox_cylindricalshell_params->setLayout(grid_layout_cylindricalshell_params);
    QLabel *sh_cylindricalshell_statictext_placeholder = new QLabel("", this);

    QGroupBox *groupbox_cylindricalshell_coords = new QGroupBox(tr("Cylinder coordinates"));
    QGridLayout *grid_layout_cylindricalshell_coords = new QGridLayout;
    QLabel *coord_statictext_coord1_label = new QLabel("Start", this);
    QLabel *coord_statictext_coord2_label = new QLabel("Stop", this);
    QLabel *coord_statictext_coord_x = new QLabel("x", this);
    QLabel *coord_statictext_coord_y = new QLabel("y", this);
    QLabel *coord_statictext_coord_z = new QLabel("z", this);
    QLabel *coord_statictext_radius_outer = new QLabel("radius outer", this);
    QLabel *coord_statictext_radius_inner = new QLabel("radius inner", this);
    sh_cylindricalshell_x_coord_1 = new QLineEdit(this);
    sh_cylindricalshell_x_coord_2 = new QLineEdit(this);
    sh_cylindricalshell_y_coord_1 = new QLineEdit(this);
    sh_cylindricalshell_y_coord_2 = new QLineEdit(this);
    sh_cylindricalshell_z_coord_1 = new QLineEdit(this);
    sh_cylindricalshell_z_coord_2 = new QLineEdit(this);
    sh_cylindricalshell_radius_outer = new QLineEdit(this);
    sh_cylindricalshell_radius_inner = new QLineEdit(this);
    grid_layout_cylindricalshell_coords->addWidget(coord_statictext_coord1_label, 1, 0, Qt::AlignLeft);
    grid_layout_cylindricalshell_coords->addWidget(coord_statictext_coord2_label, 2, 0, Qt::AlignLeft);
    grid_layout_cylindricalshell_coords->addWidget(coord_statictext_coord_x, 0, 1, Qt::AlignCenter);
    grid_layout_cylindricalshell_coords->addWidget(coord_statictext_coord_y, 0, 2, Qt::AlignCenter);
    grid_layout_cylindricalshell_coords->addWidget(coord_statictext_coord_z, 0, 3, Qt::AlignCenter);
    grid_layout_cylindricalshell_coords->addWidget(coord_statictext_radius_outer, 3, 0, Qt::AlignLeft);
    grid_layout_cylindricalshell_coords->addWidget(coord_statictext_radius_inner, 4, 0, Qt::AlignLeft);
    grid_layout_cylindricalshell_coords->addWidget(sh_cylindricalshell_x_coord_1, 1, 1, Qt::AlignLeft);
    grid_layout_cylindricalshell_coords->addWidget(sh_cylindricalshell_y_coord_1, 1, 2, Qt::AlignLeft);
    grid_layout_cylindricalshell_coords->addWidget(sh_cylindricalshell_z_coord_1, 1, 3, Qt::AlignLeft);
    grid_layout_cylindricalshell_coords->addWidget(sh_cylindricalshell_x_coord_2, 2, 1, Qt::AlignLeft);
    grid_layout_cylindricalshell_coords->addWidget(sh_cylindricalshell_y_coord_2, 2, 2, Qt::AlignLeft);
    grid_layout_cylindricalshell_coords->addWidget(sh_cylindricalshell_z_coord_2, 2, 3, Qt::AlignLeft);
    grid_layout_cylindricalshell_coords->addWidget(sh_cylindricalshell_radius_outer, 3, 1, Qt::AlignCenter);
    grid_layout_cylindricalshell_coords->addWidget(sh_cylindricalshell_radius_inner, 4, 1, Qt::AlignCenter);
    groupbox_cylindricalshell_coords->setLayout(grid_layout_cylindricalshell_coords);

    connect(sh_cylindricalshell_name, SIGNAL(editingFinished()), this, SLOT(OnSetShapeTypeLayout()));

    grid_layout_shape_cylindricalshell->addWidget(groupbox_cylindricalshell_params, 0, 0, Qt::AlignTop);
    grid_layout_shape_cylindricalshell->addWidget(groupbox_cylindricalshell_coords, 1, 0, Qt::AlignTop);
    grid_layout_shape_cylindricalshell->addWidget(sh_cylindricalshell_statictext_placeholder, 2, 0, Qt::AlignTop);

    groupbox_cylindricalshell_settings->setLayout(grid_layout_shape_cylindricalshell);
}


void PageGeometry::OnAddOrChangeShape(void) //adding new shape to list and viewer, changing them if shape with the same name already exist
{
    shape_parameters *shape_ptr;
    if(rad_but_type_box->isChecked())   //do this for selected type of shape
    {
        shape_box_parameters *shape_tmp_ptr = new shape_box_parameters; //object that will be filled with parameters from user input controls and then added to list (after casting)
        shape_tmp_ptr->name = sh_box_name->text();
        shape_tmp_ptr->type = "box";
        shape_tmp_ptr->priority = sh_box_priority->text();
        shape_tmp_ptr->x_coord_1 = sh_box_x_coord_1->text();
        shape_tmp_ptr->x_coord_2 = sh_box_x_coord_2->text();
        shape_tmp_ptr->y_coord_1 = sh_box_y_coord_1->text();
        shape_tmp_ptr->y_coord_2 = sh_box_y_coord_2->text();
        shape_tmp_ptr->z_coord_1 = sh_box_z_coord_1->text();
        shape_tmp_ptr->z_coord_2 = sh_box_z_coord_2->text();
        shape_tmp_ptr->material = sh_box_material->currentText();
        shape_tmp_ptr->transf_scale_x = transf_scale_x->text();
        shape_tmp_ptr->transf_scale_y = transf_scale_y->text();
        shape_tmp_ptr->transf_scale_z = transf_scale_z->text();
        shape_tmp_ptr->transf_rotate_ax = transf_rotate_ax->text();
        shape_tmp_ptr->transf_rotate_ay = transf_rotate_ay->text();
        shape_tmp_ptr->transf_rotate_az = transf_rotate_az->text();
        shape_tmp_ptr->transf_rotate_angle = transf_rotate_angle->text();
        shape_tmp_ptr->transf_move_x = transf_move_x->text();
        shape_tmp_ptr->transf_move_y = transf_move_y->text();
        shape_tmp_ptr->transf_move_z = transf_move_z->text();
        for(int i_tr = 0; i_tr < 3; ++i_tr)
        {
            if(i_tr < transforms_list_widget->count())
                shape_tmp_ptr->transf_order[i_tr] = transforms_list_widget->item(i_tr)->text();
            else
                shape_tmp_ptr->transf_order[i_tr] = "";
        }
        shape_ptr = shape_tmp_ptr;
    }
    else if(rad_but_type_sphere->isChecked())
    {
        shape_sphere_parameters *shape_tmp_ptr = new shape_sphere_parameters;
        shape_tmp_ptr->name = sh_sphere_name->text();
        shape_tmp_ptr->type = "sphere";
        shape_tmp_ptr->priority = sh_sphere_priority->text();
        shape_tmp_ptr->x_coord = sh_sphere_x_coord->text();
        shape_tmp_ptr->y_coord = sh_sphere_y_coord->text();
        shape_tmp_ptr->z_coord = sh_sphere_z_coord->text();
        shape_tmp_ptr->radius = sh_sphere_radius->text();
        shape_tmp_ptr->material = sh_sphere_material->currentText();
        shape_tmp_ptr->transf_scale_x = transf_scale_x->text();
        shape_tmp_ptr->transf_scale_y = transf_scale_y->text();
        shape_tmp_ptr->transf_scale_z = transf_scale_z->text();
        shape_tmp_ptr->transf_rotate_ax = transf_rotate_ax->text();
        shape_tmp_ptr->transf_rotate_ay = transf_rotate_ay->text();
        shape_tmp_ptr->transf_rotate_az = transf_rotate_az->text();
        shape_tmp_ptr->transf_rotate_angle = transf_rotate_angle->text();
        shape_tmp_ptr->transf_move_x = transf_move_x->text();
        shape_tmp_ptr->transf_move_y = transf_move_y->text();
        shape_tmp_ptr->transf_move_z = transf_move_z->text();
        for(int i_tr = 0; i_tr < 3; ++i_tr)
        {
            if(i_tr < transforms_list_widget->count())
                shape_tmp_ptr->transf_order[i_tr] = transforms_list_widget->item(i_tr)->text();
            else
                shape_tmp_ptr->transf_order[i_tr] = "";
        }
        shape_ptr = shape_tmp_ptr;
    }
    else if(rad_but_type_sphericalshell->isChecked())
    {
        shape_sphericalshell_parameters *shape_tmp_ptr = new shape_sphericalshell_parameters;
        shape_tmp_ptr->name = sh_sphericalshell_name->text();
        shape_tmp_ptr->type = "sphericalshell";
        shape_tmp_ptr->priority = sh_sphericalshell_priority->text();
        shape_tmp_ptr->x_coord = sh_sphericalshell_x_coord->text();
        shape_tmp_ptr->y_coord = sh_sphericalshell_y_coord->text();
        shape_tmp_ptr->z_coord = sh_sphericalshell_z_coord->text();
        shape_tmp_ptr->radius_outer = sh_sphericalshell_radius_outer->text();
        shape_tmp_ptr->radius_inner = sh_sphericalshell_radius_inner->text();
        shape_tmp_ptr->material = sh_sphericalshell_material->currentText();
        shape_tmp_ptr->transf_scale_x = transf_scale_x->text();
        shape_tmp_ptr->transf_scale_y = transf_scale_y->text();
        shape_tmp_ptr->transf_scale_z = transf_scale_z->text();
        shape_tmp_ptr->transf_rotate_ax = transf_rotate_ax->text();
        shape_tmp_ptr->transf_rotate_ay = transf_rotate_ay->text();
        shape_tmp_ptr->transf_rotate_az = transf_rotate_az->text();
        shape_tmp_ptr->transf_rotate_angle = transf_rotate_angle->text();
        shape_tmp_ptr->transf_move_x = transf_move_x->text();
        shape_tmp_ptr->transf_move_y = transf_move_y->text();
        shape_tmp_ptr->transf_move_z = transf_move_z->text();
        for(int i_tr = 0; i_tr < 3; ++i_tr)
        {
            if(i_tr < transforms_list_widget->count())
                shape_tmp_ptr->transf_order[i_tr] = transforms_list_widget->item(i_tr)->text();
            else
                shape_tmp_ptr->transf_order[i_tr] = "";
        }
        shape_ptr = shape_tmp_ptr;
    }
    else if(rad_but_type_cylinder->isChecked())
    {
        shape_cylinder_parameters *shape_tmp_ptr = new shape_cylinder_parameters;
        shape_tmp_ptr->name = sh_cylinder_name->text();
        shape_tmp_ptr->type = "cylinder";
        shape_tmp_ptr->priority = sh_cylinder_priority->text();
        shape_tmp_ptr->x_coord_1 = sh_cylinder_x_coord_1->text();
        shape_tmp_ptr->x_coord_2 = sh_cylinder_x_coord_2->text();
        shape_tmp_ptr->y_coord_1 = sh_cylinder_y_coord_1->text();
        shape_tmp_ptr->y_coord_2 = sh_cylinder_y_coord_2->text();
        shape_tmp_ptr->z_coord_1 = sh_cylinder_z_coord_1->text();
        shape_tmp_ptr->z_coord_2 = sh_cylinder_z_coord_2->text();
        shape_tmp_ptr->radius = sh_cylinder_radius->text();
        shape_tmp_ptr->material = sh_cylinder_material->currentText();
        shape_tmp_ptr->transf_scale_x = transf_scale_x->text();
        shape_tmp_ptr->transf_scale_y = transf_scale_y->text();
        shape_tmp_ptr->transf_scale_z = transf_scale_z->text();
        shape_tmp_ptr->transf_rotate_ax = transf_rotate_ax->text();
        shape_tmp_ptr->transf_rotate_ay = transf_rotate_ay->text();
        shape_tmp_ptr->transf_rotate_az = transf_rotate_az->text();
        shape_tmp_ptr->transf_rotate_angle = transf_rotate_angle->text();
        shape_tmp_ptr->transf_move_x = transf_move_x->text();
        shape_tmp_ptr->transf_move_y = transf_move_y->text();
        shape_tmp_ptr->transf_move_z = transf_move_z->text();
        for(int i_tr = 0; i_tr < 3; ++i_tr)
        {
            if(i_tr < transforms_list_widget->count())
                shape_tmp_ptr->transf_order[i_tr] = transforms_list_widget->item(i_tr)->text();
            else
                shape_tmp_ptr->transf_order[i_tr] = "";
        }
        shape_ptr = shape_tmp_ptr;
    }
    else if(rad_but_type_cylindricalshell->isChecked())
    {
        shape_cylindricalshell_parameters *shape_tmp_ptr = new shape_cylindricalshell_parameters;
        shape_tmp_ptr->name = sh_cylindricalshell_name->text();
        shape_tmp_ptr->type = "cylindricalshell";
        shape_tmp_ptr->priority = sh_cylindricalshell_priority->text();
        shape_tmp_ptr->x_coord_1 = sh_cylindricalshell_x_coord_1->text();
        shape_tmp_ptr->x_coord_2 = sh_cylindricalshell_x_coord_2->text();
        shape_tmp_ptr->y_coord_1 = sh_cylindricalshell_y_coord_1->text();
        shape_tmp_ptr->y_coord_2 = sh_cylindricalshell_y_coord_2->text();
        shape_tmp_ptr->z_coord_1 = sh_cylindricalshell_z_coord_1->text();
        shape_tmp_ptr->z_coord_2 = sh_cylindricalshell_z_coord_2->text();
        shape_tmp_ptr->radius_outer = sh_cylindricalshell_radius_outer->text();
        shape_tmp_ptr->radius_inner = sh_cylindricalshell_radius_inner->text();
        shape_tmp_ptr->material = sh_cylindricalshell_material->currentText();
        shape_tmp_ptr->transf_scale_x = transf_scale_x->text();
        shape_tmp_ptr->transf_scale_y = transf_scale_y->text();
        shape_tmp_ptr->transf_scale_z = transf_scale_z->text();
        shape_tmp_ptr->transf_rotate_ax = transf_rotate_ax->text();
        shape_tmp_ptr->transf_rotate_ay = transf_rotate_ay->text();
        shape_tmp_ptr->transf_rotate_az = transf_rotate_az->text();
        shape_tmp_ptr->transf_rotate_angle = transf_rotate_angle->text();
        shape_tmp_ptr->transf_move_x = transf_move_x->text();
        shape_tmp_ptr->transf_move_y = transf_move_y->text();
        shape_tmp_ptr->transf_move_z = transf_move_z->text();
        for(int i_tr = 0; i_tr < 3; ++i_tr)
        {
            if(i_tr < transforms_list_widget->count())
                shape_tmp_ptr->transf_order[i_tr] = transforms_list_widget->item(i_tr)->text();
            else
                shape_tmp_ptr->transf_order[i_tr] = "";
        }
        shape_ptr = shape_tmp_ptr;
    }

    // Add the configured above primitive to the lists in the wizard and in the QCSXCAD:
    if(!shape_ptr->name.isEmpty())
    {
        if(shapes_param_list_ptr->empty() || shapes_param_list_ptr->at(shapes_list_widget->currentRow())->name != shape_ptr->name)
        {
            shapes_param_list_ptr->push_back(shape_ptr);
            shapes_list_widget->addItem(shapes_param_list_ptr->at(shapes_param_list_ptr->size()-1)->name);
            shapes_list_widget->setCurrentRow(shapes_list_widget->count()-1);
            int id_tmp = UploadShapesToViewer(true);
            shapes_param_list_ptr->at(shapes_list_widget->currentRow())->id = id_tmp;
        }
        else if(shapes_param_list_ptr->at(shapes_list_widget->currentRow())->name == shape_ptr->name)
        {
            shape_ptr->id = shapes_param_list_ptr->at(shapes_list_widget->currentRow())->id;
            shapes_param_list_ptr->replace(shapes_list_widget->currentRow(), shape_ptr);
            UploadShapesToViewer(false);
        }
    }
}



void PageGeometry::OnRemoveShape(void)
{
    if(!shapes_param_list_ptr->empty())
    {
        shape_parameters *shape_to_del = shapes_param_list_ptr->at(shapes_list_widget->currentRow());
        RemoveShapesFromViewer();
        shapes_param_list_ptr->remove(shapes_list_widget->currentRow());
        shapes_list_widget->takeItem(shapes_list_widget->currentRow());
        delete shape_to_del;    //TODO FIXME i dont know if it's the right way to delete shape item created by "new" in OnAddOrChangeShape
    }
}



void PageGeometry::OnGetSelectedShape(QListWidgetItem* item)
{
    shape_parameters *shape_tmp_ptr;
    shape_tmp_ptr = shapes_param_list_ptr->at(shapes_list_widget->currentRow());

    if(!QString::compare(shape_tmp_ptr->type, "box"))
    {
        shape_box_parameters *shape_box_tmp = (shape_box_parameters *)(shape_tmp_ptr);
        rad_but_type_box->setChecked(true);
        sh_box_name->setText(shape_box_tmp->name);
        sh_box_priority->setText(shape_box_tmp->priority);
        sh_box_x_coord_1->setText(shape_box_tmp->x_coord_1);
        sh_box_x_coord_2->setText(shape_box_tmp->x_coord_2);
        sh_box_y_coord_1->setText(shape_box_tmp->y_coord_1);
        sh_box_y_coord_2->setText(shape_box_tmp->y_coord_2);
        sh_box_z_coord_1->setText(shape_box_tmp->z_coord_1);
        sh_box_z_coord_2->setText(shape_box_tmp->z_coord_2);
        sh_box_material->setCurrentIndex(sh_box_material->findText(shape_box_tmp->material));
        stackedLayout->setCurrentIndex(0);
        transf_scale_x->setText(shape_tmp_ptr->transf_scale_x);
        transf_scale_y->setText(shape_tmp_ptr->transf_scale_y);
        transf_scale_z->setText(shape_tmp_ptr->transf_scale_z);
        transf_rotate_ax->setText(shape_tmp_ptr->transf_rotate_ax);
        transf_rotate_ay->setText(shape_tmp_ptr->transf_rotate_ay);
        transf_rotate_az->setText(shape_tmp_ptr->transf_rotate_az);
        transf_rotate_angle->setText(shape_tmp_ptr->transf_rotate_angle);
        transf_move_x->setText(shape_tmp_ptr->transf_move_x);
        transf_move_y->setText(shape_tmp_ptr->transf_move_y);
        transf_move_z->setText(shape_tmp_ptr->transf_move_z);
        transforms_list_widget->clear();
        button_transform_move->show();
        button_transform_scale->show();
        button_transform_rotate->show();
        for(int i_tr = 0; i_tr < 3; ++i_tr)
        {
            if(shape_tmp_ptr->transf_order[i_tr] != "")
                transforms_list_widget->addItem(shape_tmp_ptr->transf_order[i_tr]);
            if(shape_tmp_ptr->transf_order[i_tr] == "Move")
                button_transform_move->hide();
            if(shape_tmp_ptr->transf_order[i_tr] == "Scale")
                button_transform_scale->hide();
            if(shape_tmp_ptr->transf_order[i_tr] == "Rotate")
                button_transform_rotate->hide();
        }
    }
    else if(!QString::compare(shape_tmp_ptr->type, "sphere"))
    {
        shape_sphere_parameters *shape_sphere_tmp = (shape_sphere_parameters *)(shape_tmp_ptr);
        rad_but_type_sphere->setChecked(true);
        sh_sphere_name->setText(shape_sphere_tmp->name);
        sh_sphere_priority->setText(shape_sphere_tmp->priority);
        sh_sphere_x_coord->setText(shape_sphere_tmp->x_coord);
        sh_sphere_y_coord->setText(shape_sphere_tmp->y_coord);
        sh_sphere_z_coord->setText(shape_sphere_tmp->z_coord);
        sh_sphere_radius->setText(shape_sphere_tmp->radius);
        sh_sphere_material->setCurrentIndex(sh_sphere_material->findText(shape_sphere_tmp->material));
        stackedLayout->setCurrentIndex(0);
        transf_scale_x->setText(shape_tmp_ptr->transf_scale_x);
        transf_scale_y->setText(shape_tmp_ptr->transf_scale_y);
        transf_scale_z->setText(shape_tmp_ptr->transf_scale_z);
        transf_rotate_ax->setText(shape_tmp_ptr->transf_rotate_ax);
        transf_rotate_ay->setText(shape_tmp_ptr->transf_rotate_ay);
        transf_rotate_az->setText(shape_tmp_ptr->transf_rotate_az);
        transf_rotate_angle->setText(shape_tmp_ptr->transf_rotate_angle);
        transf_move_x->setText(shape_tmp_ptr->transf_move_x);
        transf_move_y->setText(shape_tmp_ptr->transf_move_y);
        transf_move_z->setText(shape_tmp_ptr->transf_move_z);
        transforms_list_widget->clear();
        button_transform_move->show();
        button_transform_scale->show();
        button_transform_rotate->show();
        for(int i_tr = 0; i_tr < 3; ++i_tr)
        {
            if(shape_tmp_ptr->transf_order[i_tr] != "")
                transforms_list_widget->addItem(shape_tmp_ptr->transf_order[i_tr]);
            if(shape_tmp_ptr->transf_order[i_tr] == "Move")
                button_transform_move->hide();
            if(shape_tmp_ptr->transf_order[i_tr] == "Scale")
                button_transform_scale->hide();
            if(shape_tmp_ptr->transf_order[i_tr] == "Rotate")
                button_transform_rotate->hide();
        }
    }
    else if(!QString::compare(shape_tmp_ptr->type, "sphericalshell"))
    {
        shape_sphericalshell_parameters *shape_sphericalshell_tmp = (shape_sphericalshell_parameters *)(shape_tmp_ptr);
        rad_but_type_sphericalshell->setChecked(true);
        sh_sphericalshell_name->setText(shape_sphericalshell_tmp->name);
        sh_sphericalshell_priority->setText(shape_sphericalshell_tmp->priority);
        sh_sphericalshell_x_coord->setText(shape_sphericalshell_tmp->x_coord);
        sh_sphericalshell_y_coord->setText(shape_sphericalshell_tmp->y_coord);
        sh_sphericalshell_z_coord->setText(shape_sphericalshell_tmp->z_coord);
        sh_sphericalshell_radius_outer->setText(shape_sphericalshell_tmp->radius_outer);
        sh_sphericalshell_radius_inner->setText(shape_sphericalshell_tmp->radius_inner);
        sh_sphericalshell_material->setCurrentIndex(sh_sphericalshell_material->findText(shape_sphericalshell_tmp->material));
        stackedLayout->setCurrentIndex(0);
        transf_scale_x->setText(shape_tmp_ptr->transf_scale_x);
        transf_scale_y->setText(shape_tmp_ptr->transf_scale_y);
        transf_scale_z->setText(shape_tmp_ptr->transf_scale_z);
        transf_rotate_ax->setText(shape_tmp_ptr->transf_rotate_ax);
        transf_rotate_ay->setText(shape_tmp_ptr->transf_rotate_ay);
        transf_rotate_az->setText(shape_tmp_ptr->transf_rotate_az);
        transf_rotate_angle->setText(shape_tmp_ptr->transf_rotate_angle);
        transf_move_x->setText(shape_tmp_ptr->transf_move_x);
        transf_move_y->setText(shape_tmp_ptr->transf_move_y);
        transf_move_z->setText(shape_tmp_ptr->transf_move_z);
        transforms_list_widget->clear();
        button_transform_move->show();
        button_transform_scale->show();
        button_transform_rotate->show();
        for(int i_tr = 0; i_tr < 3; ++i_tr)
        {
            if(shape_tmp_ptr->transf_order[i_tr] != "")
                transforms_list_widget->addItem(shape_tmp_ptr->transf_order[i_tr]);
            if(shape_tmp_ptr->transf_order[i_tr] == "Move")
                button_transform_move->hide();
            if(shape_tmp_ptr->transf_order[i_tr] == "Scale")
                button_transform_scale->hide();
            if(shape_tmp_ptr->transf_order[i_tr] == "Rotate")
                button_transform_rotate->hide();
        }
    }
    else if(!QString::compare(shape_tmp_ptr->type, "cylinder"))
    {
        shape_cylinder_parameters *shape_cylinder_tmp = (shape_cylinder_parameters *)(shape_tmp_ptr);
        rad_but_type_cylinder->setChecked(true);
        sh_cylinder_name->setText(shape_cylinder_tmp->name);
        sh_cylinder_priority->setText(shape_cylinder_tmp->priority);
        sh_cylinder_x_coord_1->setText(shape_cylinder_tmp->x_coord_1);
        sh_cylinder_x_coord_2->setText(shape_cylinder_tmp->x_coord_2);
        sh_cylinder_y_coord_1->setText(shape_cylinder_tmp->y_coord_1);
        sh_cylinder_y_coord_2->setText(shape_cylinder_tmp->y_coord_2);
        sh_cylinder_z_coord_1->setText(shape_cylinder_tmp->z_coord_1);
        sh_cylinder_z_coord_2->setText(shape_cylinder_tmp->z_coord_2);
        sh_cylinder_radius->setText(shape_cylinder_tmp->radius);
        sh_cylinder_material->setCurrentIndex(sh_cylinder_material->findText(shape_cylinder_tmp->material));
        stackedLayout->setCurrentIndex(0);
        transf_scale_x->setText(shape_tmp_ptr->transf_scale_x);
        transf_scale_y->setText(shape_tmp_ptr->transf_scale_y);
        transf_scale_z->setText(shape_tmp_ptr->transf_scale_z);
        transf_rotate_ax->setText(shape_tmp_ptr->transf_rotate_ax);
        transf_rotate_ay->setText(shape_tmp_ptr->transf_rotate_ay);
        transf_rotate_az->setText(shape_tmp_ptr->transf_rotate_az);
        transf_rotate_angle->setText(shape_tmp_ptr->transf_rotate_angle);
        transf_move_x->setText(shape_tmp_ptr->transf_move_x);
        transf_move_y->setText(shape_tmp_ptr->transf_move_y);
        transf_move_z->setText(shape_tmp_ptr->transf_move_z);
        transforms_list_widget->clear();
        button_transform_move->show();
        button_transform_scale->show();
        button_transform_rotate->show();
        for(int i_tr = 0; i_tr < 3; ++i_tr)
        {
            if(shape_tmp_ptr->transf_order[i_tr] != "")
                transforms_list_widget->addItem(shape_tmp_ptr->transf_order[i_tr]);
            if(shape_tmp_ptr->transf_order[i_tr] == "Move")
                button_transform_move->hide();
            if(shape_tmp_ptr->transf_order[i_tr] == "Scale")
                button_transform_scale->hide();
            if(shape_tmp_ptr->transf_order[i_tr] == "Rotate")
                button_transform_rotate->hide();
        }
    }
    else if(!QString::compare(shape_tmp_ptr->type, "cylindricalshell"))
    {
        shape_cylindricalshell_parameters *shape_cylindricalshell_tmp = (shape_cylindricalshell_parameters *)(shape_tmp_ptr);
        rad_but_type_cylindricalshell->setChecked(true);
        sh_cylindricalshell_name->setText(shape_cylindricalshell_tmp->name);
        sh_cylindricalshell_priority->setText(shape_cylindricalshell_tmp->priority);
        sh_cylindricalshell_x_coord_1->setText(shape_cylindricalshell_tmp->x_coord_1);
        sh_cylindricalshell_x_coord_2->setText(shape_cylindricalshell_tmp->x_coord_2);
        sh_cylindricalshell_y_coord_1->setText(shape_cylindricalshell_tmp->y_coord_1);
        sh_cylindricalshell_y_coord_2->setText(shape_cylindricalshell_tmp->y_coord_2);
        sh_cylindricalshell_z_coord_1->setText(shape_cylindricalshell_tmp->z_coord_1);
        sh_cylindricalshell_z_coord_2->setText(shape_cylindricalshell_tmp->z_coord_2);
        sh_cylindricalshell_radius_outer->setText(shape_cylindricalshell_tmp->radius_outer);
        sh_cylindricalshell_radius_inner->setText(shape_cylindricalshell_tmp->radius_inner);
        sh_cylindricalshell_material->setCurrentIndex(sh_cylindricalshell_material->findText(shape_cylindricalshell_tmp->material));
        stackedLayout->setCurrentIndex(0);
        transf_scale_x->setText(shape_tmp_ptr->transf_scale_x);
        transf_scale_y->setText(shape_tmp_ptr->transf_scale_y);
        transf_scale_z->setText(shape_tmp_ptr->transf_scale_z);
        transf_rotate_ax->setText(shape_tmp_ptr->transf_rotate_ax);
        transf_rotate_ay->setText(shape_tmp_ptr->transf_rotate_ay);
        transf_rotate_az->setText(shape_tmp_ptr->transf_rotate_az);
        transf_rotate_angle->setText(shape_tmp_ptr->transf_rotate_angle);
        transf_move_x->setText(shape_tmp_ptr->transf_move_x);
        transf_move_y->setText(shape_tmp_ptr->transf_move_y);
        transf_move_z->setText(shape_tmp_ptr->transf_move_z);
        transforms_list_widget->clear();
        button_transform_move->show();
        button_transform_scale->show();
        button_transform_rotate->show();
        for(int i_tr = 0; i_tr < 3; ++i_tr)
        {
            if(shape_tmp_ptr->transf_order[i_tr] != "")
                transforms_list_widget->addItem(shape_tmp_ptr->transf_order[i_tr]);
            if(shape_tmp_ptr->transf_order[i_tr] == "Move")
                button_transform_move->hide();
            if(shape_tmp_ptr->transf_order[i_tr] == "Scale")
                button_transform_scale->hide();
            if(shape_tmp_ptr->transf_order[i_tr] == "Rotate")
                button_transform_rotate->hide();
        }
    }

    OnSetShapeTypeLayout();
}


void PageGeometry::OnSetShapeTypeLayout(void)   //called to change layout according to selection of shape type and to select proper shape on the list (according to name, to prevent adding more items with the same name)
{
    if(rad_but_type_box->isChecked())
    {
        stackedLayout->setCurrentIndex(0);
        for(int i = 0 ; i < shapes_list_widget->count(); ++i)
            if(shapes_list_widget->item(i)->text() == sh_box_name->text())
                shapes_list_widget->setCurrentRow(i);
    }
    else if(rad_but_type_sphere->isChecked())
    {
        stackedLayout->setCurrentIndex(1);
        for(int i = 0 ; i < shapes_list_widget->count(); ++i)
            if(shapes_list_widget->item(i)->text() == sh_sphere_name->text())
                shapes_list_widget->setCurrentRow(i);
    }
    else if(rad_but_type_sphericalshell->isChecked())
    {
        stackedLayout->setCurrentIndex(2);
        for(int i = 0 ; i < shapes_list_widget->count(); ++i)
            if(shapes_list_widget->item(i)->text() == sh_sphericalshell_name->text())
                shapes_list_widget->setCurrentRow(i);
    }
    else if(rad_but_type_cylinder->isChecked())
    {
        stackedLayout->setCurrentIndex(3);
        for(int i = 0 ; i < shapes_list_widget->count(); ++i)
            if(shapes_list_widget->item(i)->text() == sh_cylinder_name->text())
                shapes_list_widget->setCurrentRow(i);
    }
    else if(rad_but_type_cylindricalshell->isChecked())
    {
        stackedLayout->setCurrentIndex(4);
        for(int i = 0 ; i < shapes_list_widget->count(); ++i)
            if(shapes_list_widget->item(i)->text() == sh_cylindricalshell_name->text())
                shapes_list_widget->setCurrentRow(i);
    }
}


void PageGeometry::initializePage() //load all materials, to be accessible to select for shapes
{
    sh_box_material->clear();
    sh_sphere_material->clear();
    sh_sphericalshell_material->clear();
    sh_cylinder_material->clear();
    sh_cylindricalshell_material->clear();

    for (int i = 0; i < wizardsparent_tmp->GetQtyProperties(); ++i)
    {
        QString str;
        CSProperties *prop = wizardsparent_tmp->GetProperty(i);
        str=QString(prop->GetName().c_str());

        sh_box_material->addItem(str);  //add to all primitives type (could be avoided if material were not in QStackedLayout)
        sh_sphere_material->addItem(str);
        sh_sphericalshell_material->addItem(str);
        sh_cylinder_material->addItem(str);
        sh_cylindricalshell_material->addItem(str);
    }
}


double PageGeometry::EvaluateVar(QString var_to_eval)
{
    return var_edit->GetExprEngine()->evaluate(var_to_eval).toString().toDouble();
}


void PageGeometry::OnChangeTransformOrder(void)
{
    QPushButton* buttonSender = qobject_cast<QPushButton*>(sender()); // retrieve the button you have clicked
    QString buttonText = buttonSender->text(); // retrive the text from the button clicked

    if(buttonText == "Scale")
    {
        transforms_list_widget->addItem("Scale");
        buttonSender->hide();
    }
    if(buttonText == "Rotate")
    {
        transforms_list_widget->addItem("Rotate");
        buttonSender->hide();
    }
    if(buttonText == "Move")
    {
        transforms_list_widget->addItem("Move");
        buttonSender->hide();
    }
    if(buttonText == "Remove transforms" && transforms_list_widget->count())
    {
        button_transform_scale->show();
        button_transform_rotate->show();
        button_transform_move->show();
        transforms_list_widget->clear();

    }
}
