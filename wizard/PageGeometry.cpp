#include "PageGeometry.h"
#include <QDebug>

PageGeometry::PageGeometry(QWizard *parent, QCSXCAD *wizardsparent): QWizardPage(parent)
{
/* START experiments with qcsxcad*/
    wizardsparent_tmp = wizardsparent;
    QPushButton *button_test_qcsxcad = new QPushButton("test qcsxcad dialog", this);
    button_test_qcsxcad->setGeometry(QRect(QPoint(50, 150), QSize(100, 30)));
    connect(button_test_qcsxcad, SIGNAL(released()), this, SLOT(EXPERIMENTS()));
    EXPERIMENTS1();
/* END experiments with qcsxcad*/
    QLabel *statictext_TODO = new QLabel("Configuration of geometry (placing primitives, stl import, hyperlynx import) TO BE DONE\nTESTING of interaction with qcsxcad (will dispay box coordinate if box exist", this);
    statictext_TODO->setGeometry(QRect(QPoint(22, 20), QSize(500, 30)));
}


/* START experiments with qcsxcad*/
void PageGeometry::EXPERIMENTS()
{
    CSPrimBox *newPrim = new CSPrimBox(wizardsparent_tmp->clParaSet, wizardsparent_tmp->CSTree->GetCurrentProperty());
    CSPropMetal *newProp = new CSPropMetal(wizardsparent_tmp->clParaSet);
    QCSPropEditor* newEdit = new QCSPropEditor(wizardsparent_tmp, newProp, wizardsparent_tmp->m_SimMode);
    if (newEdit->exec()==QDialog::Accepted)
    {
        wizardsparent_tmp->AddProperty(newProp);
        wizardsparent_tmp->CSTree->AddPropItem(newProp);
    }
}
void PageGeometry::EXPERIMENTS1()
{
    std::vector<CSPrimitives*> prop_vector_imported_to_wizard = wizardsparent_tmp->GetAllPrimitives(true, CSProperties::ANY);
    CSPrimitives *prim_tmp = prop_vector_imported_to_wizard.at(0);
    ParameterCoord *startcoord;
    if(prim_tmp->GetType() == CSPrimitives::BOX)
    {
        CSPrimBox *imported_box = (CSPrimBox*)prim_tmp;
        startcoord = imported_box->GetStartCoord();
    }
    thecord[0] = startcoord->GetCoordValue(0, CoordinateSystem::CARTESIAN);
    thecord[1] = startcoord->GetCoordValue(1, CoordinateSystem::CARTESIAN);
    thecord[2] = startcoord->GetCoordValue(2, CoordinateSystem::CARTESIAN);
}
/* END experiments with qcsxcad*/


bool PageGeometry::validatePage()
{
    SaveToSimScriptBuffer();
    return true;
}


void PageGeometry::SaveToSimScriptBuffer(void)
{
    text_save_to_simscript.clear();
    text_save_to_simscript.append("##<OUTPUT_AUTOGENERATED_PageGeometry>##\n");
    
    text_save_to_simscript.append(QString("!!!!!!!!!!!!!!!!!!DEBUG!!!!!!!!!!!\ntest of importing coordinates x=%1, y=%2, z=%3 \n").arg(thecord[0]).arg(thecord[1]).arg(thecord[2]));

    text_save_to_simscript.append("##<END_OUTPUT_AUTOGENERATED_PageGeometry>##\n");
    qDebug("%s", qUtf8Printable(text_save_to_simscript));
}


void PageGeometry::ReadFromSimScriptBuffer(void)
{

}
