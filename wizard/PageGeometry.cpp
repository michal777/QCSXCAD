#include "PageGeometry.h"


PageGeometry::PageGeometry(QWizard *parent, QCSXCAD *wizardsparent): QWizardPage(parent)
{
    wizardsparent_tmp = wizardsparent;

    QVector<shape_parameters *> *shapes_param_list = new QVector<shape_parameters *>;
    shapes_param_list_ptr = shapes_param_list;

    ShapeSelectLayout();
    ShapeListLayout();

    ShapeBoxSettings();
    ShapeCylinderSettings();

    stackedLayout = new QStackedLayout;
    stackedLayout->addWidget(groupbox_box_settings);
    stackedLayout->addWidget(groupbox_cylinder_settings);

    main_layout_shapes = new QHBoxLayout;
    main_layout_shapes->addWidget(shape_select_groupbox);
    main_layout_shapes->addLayout(stackedLayout);
    main_layout_shapes->addWidget(shape_list_groupbox);


    setLayout(main_layout_shapes);

    id_incremental = 0;
}


bool PageGeometry::validatePage()
{
    SaveToSimScriptBuffer();
    return true;
}


void PageGeometry::SaveToSimScriptBuffer(void)
{
    text_save_to_simscript.clear();
    text_save_to_simscript.append("##<OUTPUT_AUTOGENERATED_PageGeometry>##\n");
    
    for(int i_mat = 0; i_mat < shapes_param_list_ptr->count(); ++i_mat)
    {
        if(shapes_param_list_ptr->at(i_mat)->type == "box")
        {
            shape_box_parameters *shape_box_tmp = (shape_box_parameters *)(shapes_param_list_ptr->at(i_mat));
            text_save_to_simscript.append(QString("CSX = AddBox(CSX, '%1', %2, ").arg(shape_box_tmp->material).arg(shape_box_tmp->priority));
            text_save_to_simscript.append(QString("[%1 %2 %3] ").arg(shape_box_tmp->x_coord_1).arg(shape_box_tmp->y_coord_1).arg(shape_box_tmp->z_coord_1));
            text_save_to_simscript.append(QString("[%1 %2 %3]);\n").arg(shape_box_tmp->x_coord_2).arg(shape_box_tmp->y_coord_2).arg(shape_box_tmp->z_coord_2));
        }
        else if(shapes_param_list_ptr->at(i_mat)->type == "cylinder")
        {
            shape_cylinder_parameters *shape_cylinder_tmp = (shape_cylinder_parameters *)(shapes_param_list_ptr->at(i_mat));
            text_save_to_simscript.append(QString("CSX = AddCylinder(CSX, '%1', %2, ").arg(shape_cylinder_tmp->material).arg(shape_cylinder_tmp->priority));
            text_save_to_simscript.append(QString("[%1 %2 %3], ").arg(shape_cylinder_tmp->x_coord_1).arg(shape_cylinder_tmp->y_coord_1).arg(shape_cylinder_tmp->z_coord_1));
            text_save_to_simscript.append(QString("[%1 %2 %3], ").arg(shape_cylinder_tmp->x_coord_2).arg(shape_cylinder_tmp->y_coord_2).arg(shape_cylinder_tmp->z_coord_2));
            text_save_to_simscript.append(QString("%1);\n").arg(shape_cylinder_tmp->radius));
        }
    }

    text_save_to_simscript.append("##<END_OUTPUT_AUTOGENERATED_PageGeometry>##\n");
    qDebug("%s", qUtf8Printable(text_save_to_simscript));
}


void PageGeometry::ReadFromSimScriptBuffer(void)
{/*
    std::vector<CSPrimitives*> prop_vector_imported_to_wizard = wizardsparent_tmp->GetAllPrimitives(true, CSProperties::ANY);
    CSPrimitives *prim_tmp = prop_vector_imported_to_wizard.at(0);
    ParameterCoord *startcoord;
    if(prim_tmp->GetType() == CSPrimitives::BOX)
    {
        CSPrimBox *imported_box = (CSPrimBox*)prim_tmp;
        startcoord = imported_box->GetStartCoord();
    }
    thecord[0] = startcoord->GetCoordValue(0, CoordinateSystem::CARTESIAN);
    thecord[1] = startcoord->GetCoordValue(1, CoordinateSystem::CARTESIAN);
    thecord[2] = startcoord->GetCoordValue(2, CoordinateSystem::CARTESIAN);*/
}


void PageGeometry::UploadShapesToViewer(bool is_new)
{
    if(rad_but_type_box->isChecked())
    {
        shape_box_parameters *shape_selected = (shape_box_parameters *)(shapes_param_list_ptr->at(shapes_list_widget->currentRow()));
        if(is_new)
        {
            CSProperties* material_property = wizardsparent_tmp->GetPropertiesByName(shape_selected->material.toStdString()).at(0);
            CSPrimBox *box_prim = new CSPrimBox(wizardsparent_tmp->clParaSet, wizardsparent_tmp->CSTree->GetCurrentProperty());

            box_prim->SetPriority(shape_selected->priority.toInt());
            box_prim->SetCoord(0, shape_selected->x_coord_1.toDouble());
            box_prim->SetCoord(1, shape_selected->x_coord_2.toDouble());
            box_prim->SetCoord(2, shape_selected->y_coord_1.toDouble());
            box_prim->SetCoord(3, shape_selected->y_coord_2.toDouble());
            box_prim->SetCoord(4, shape_selected->z_coord_1.toDouble());
            box_prim->SetCoord(5, shape_selected->z_coord_2.toDouble());

            material_property->AddPrimitive(box_prim);
            wizardsparent_tmp->setModified();
            wizardsparent_tmp->CSTree->AddPrimItem(box_prim);
        }
        else    //if shape is to be changed, not added
        {
            int id_tmp = shapes_param_list_ptr->at(shapes_list_widget->currentRow())->id; //get id of the shape selected in the wizard, to find the corresponding object in QCSXCAD
            qDebug("d_%d__", id_tmp);

            CSPrimitives *prim_tmp = wizardsparent_tmp->GetPrimitiveByID(id_tmp); //create pointer to access the object in QCSXCAD
            CSPrimBox *prim_box_tmp = prim_tmp->ToBox();
            CSProperties* new_material_property = wizardsparent_tmp->GetPropertiesByName(shape_selected->material.toStdString()).at(0);

            prim_box_tmp->SetPriority(shape_selected->priority.toInt());    //set new parameters (after casting to proper type of pointer to shape)
            prim_box_tmp->SetCoord(0, shape_selected->x_coord_1.toDouble());
            prim_box_tmp->SetCoord(1, shape_selected->x_coord_2.toDouble());
            prim_box_tmp->SetCoord(2, shape_selected->y_coord_1.toDouble());
            prim_box_tmp->SetCoord(3, shape_selected->y_coord_2.toDouble());
            prim_box_tmp->SetCoord(4, shape_selected->z_coord_1.toDouble());
            prim_box_tmp->SetCoord(5, shape_selected->z_coord_2.toDouble());
            wizardsparent_tmp->CSTree->SwitchProperty((CSPrimitives *)(prim_box_tmp), new_material_property);
            wizardsparent_tmp->setModified();
        }
    }
    else if(rad_but_type_cylinder->isChecked())
    {
        shape_cylinder_parameters *shape_selected = (shape_cylinder_parameters *)(shapes_param_list_ptr->at(shapes_list_widget->currentRow()));

        CSProperties* material_property = wizardsparent_tmp->GetPropertiesByName(shape_selected->material.toStdString()).at(0);
        CSPrimCylinder *cylinder_prim = new CSPrimCylinder(wizardsparent_tmp->clParaSet, material_property);

        cylinder_prim->SetPriority(shape_selected->priority.toInt());
        cylinder_prim->SetCoord(0, shape_selected->x_coord_1.toDouble());
        cylinder_prim->SetCoord(1, shape_selected->x_coord_2.toDouble());
        cylinder_prim->SetCoord(2, shape_selected->y_coord_1.toDouble());
        cylinder_prim->SetCoord(3, shape_selected->y_coord_2.toDouble());
        cylinder_prim->SetCoord(4, shape_selected->z_coord_1.toDouble());
        cylinder_prim->SetCoord(5, shape_selected->z_coord_2.toDouble());
        cylinder_prim->SetRadius(shape_selected->radius.toDouble());

        if(is_new)
        {
            material_property->AddPrimitive(cylinder_prim);
            wizardsparent_tmp->setModified();
            wizardsparent_tmp->CSTree->AddPrimItem(cylinder_prim);
        }
    }


}

/*copied
void QCSXCAD::Delete()
{
    CSPrimitives* prim = CSTree->GetCurrentPrimitive();
    if (prim!=NULL)
    {
        if (QMessageBox::question(this,tr("Delete Primitive"),tr("Delete current Primitive (ID: %1)?").arg(prim->GetID()),QMessageBox::Yes,QMessageBox::No)==QMessageBox::Yes)
        {
            CSTree->DeletePrimItem(prim);
            DeletePrimitive(prim);
            setModified();
        }
        return;
    }
    CSProperties* prop = CSTree->GetCurrentProperty();
    if (prop!=NULL)
    {
        size_t qtyPrim=prop->GetQtyPrimitives();
        if (qtyPrim>0)
        {
            if (QMessageBox::question(this,tr("Delete Property"),tr("\"%1\" contains Primitive(s)!!\n Delete anyway?").arg(prop->GetName().c_str()),QMessageBox::Yes,QMessageBox::No)!=QMessageBox::Yes)
                return;
        }
        else if (QMessageBox::question(this,tr("Delete Property"),tr("Delete current Property?"),QMessageBox::Yes,QMessageBox::No)!=QMessageBox::Yes)
            return;
        CSTree->DeletePropItem(prop);
        DeleteProperty(prop);
        setModified();
    }
}
*/


void PageGeometry::ShapeSelectLayout(void)
{
    shape_select_groupbox = new QGroupBox(tr("Select shape type"));
    QGridLayout *grid_layout_select_shape = new QGridLayout;

    rad_but_type_box = new QRadioButton("Box", this);
    rad_but_type_sphere = new QRadioButton("Sphere", this);
    rad_but_type_spherical_shell = new QRadioButton("Spherical Shell", this);
    rad_but_type_cylinder = new QRadioButton("Cylinder", this);
    rad_but_type_cylindrical_shell = new QRadioButton("Cylindrical Shell", this);
    rad_but_type_curve = new QRadioButton("Curve", this);
    rad_but_type_wire = new QRadioButton("Wire", this);
    rad_but_type_polygon = new QRadioButton("Polygon", this);
    rad_but_type_extruded_polygon = new QRadioButton("Extruded polygon", this);
    rad_but_type_rotational_solid = new QRadioButton("Rotational Solid", this);
    rad_but_type_polyhedron = new QRadioButton("Polyhedron", this);
    connect(rad_but_type_box, SIGNAL(clicked()), this, SLOT(OnSetShapeTypeLayout()));
    connect(rad_but_type_sphere, SIGNAL(clicked()), this, SLOT(OnSetShapeTypeLayout()));
    connect(rad_but_type_spherical_shell, SIGNAL(clicked()), this, SLOT(OnSetShapeTypeLayout()));
    connect(rad_but_type_cylinder, SIGNAL(clicked()), this, SLOT(OnSetShapeTypeLayout()));
    connect(rad_but_type_cylindrical_shell, SIGNAL(clicked()), this, SLOT(OnSetShapeTypeLayout()));
    connect(rad_but_type_curve, SIGNAL(clicked()), this, SLOT(OnSetShapeTypeLayout()));
    connect(rad_but_type_wire, SIGNAL(clicked()), this, SLOT(OnSetShapeTypeLayout()));
    connect(rad_but_type_polygon, SIGNAL(clicked()), this, SLOT(OnSetShapeTypeLayout()));
    connect(rad_but_type_extruded_polygon, SIGNAL(clicked()), this, SLOT(OnSetShapeTypeLayout()));
    connect(rad_but_type_rotational_solid, SIGNAL(clicked()), this, SLOT(OnSetShapeTypeLayout()));
    connect(rad_but_type_polyhedron, SIGNAL(clicked()), this, SLOT(OnSetShapeTypeLayout()));
    rad_but_type_box->setChecked(true);

    grid_layout_select_shape->addWidget(rad_but_type_box, 0, 0, Qt::AlignLeft);
    grid_layout_select_shape->addWidget(rad_but_type_sphere, 1, 0, Qt::AlignLeft);
    grid_layout_select_shape->addWidget(rad_but_type_spherical_shell, 2, 0, Qt::AlignLeft);
    grid_layout_select_shape->addWidget(rad_but_type_cylinder, 3, 0, Qt::AlignLeft);
    grid_layout_select_shape->addWidget(rad_but_type_cylindrical_shell, 4, 0, Qt::AlignLeft);
    grid_layout_select_shape->addWidget(rad_but_type_curve, 5, 0, Qt::AlignLeft);
    grid_layout_select_shape->addWidget(rad_but_type_wire, 6, 0, Qt::AlignLeft);
    grid_layout_select_shape->addWidget(rad_but_type_polygon, 7, 0, Qt::AlignLeft);
    grid_layout_select_shape->addWidget(rad_but_type_extruded_polygon, 8, 0, Qt::AlignLeft);
    grid_layout_select_shape->addWidget(rad_but_type_rotational_solid, 9, 0, Qt::AlignLeft);
    grid_layout_select_shape->addWidget(rad_but_type_polyhedron, 10, 0, Qt::AlignLeft);

    shape_select_groupbox->setLayout(grid_layout_select_shape);
}


void PageGeometry::ShapeListLayout(void)
{
    shape_list_groupbox = new QGroupBox(tr("Shapes list"));
    QGridLayout *grid_layout_shape_list = new QGridLayout;

    shapes_list_widget = new QListWidget(this);
    connect(shapes_list_widget, SIGNAL(itemClicked(QListWidgetItem*)), this, SLOT(OnGetSelectedShape(QListWidgetItem*)));

    QPushButton *button_add_edit_shape = new QPushButton("New/Edit", this);
    connect(button_add_edit_shape, SIGNAL(released()), this, SLOT(OnAddOrChangeShape()));
    QPushButton *button_remove_shape = new QPushButton("Remove", this);
    connect(button_remove_shape, SIGNAL(released()), this, SLOT(OnRemoveShape()));

    grid_layout_shape_list->addWidget(button_add_edit_shape, 8, 0, Qt::AlignLeft);
    grid_layout_shape_list->addWidget(button_remove_shape, 8, 1, Qt::AlignLeft);
    grid_layout_shape_list->addWidget(shapes_list_widget, 0, 0, 7, 2, Qt::AlignLeft);

    shape_list_groupbox->setLayout(grid_layout_shape_list);
}


void PageGeometry::ShapeBoxSettings(void)
{
    groupbox_box_settings = new QGroupBox(tr("Box settings"));
    QGridLayout *grid_layout_shape_box = new QGridLayout;

    QLabel *sh_box_statictext_name = new QLabel("name", this);
    sh_box_name = new QLineEdit(this);
    QLabel *sh_box_statictext_priority = new QLabel("priority", this);
    sh_box_priority = new QLineEdit(this);
    QLabel *sh_box_statictext_xstart = new QLabel("x start", this);
    sh_box_x_coord_1 = new QLineEdit(this);
    QLabel *sh_box_statictext_xstop = new QLabel("x stop", this);
    sh_box_x_coord_2 = new QLineEdit(this);
    QLabel *sh_box_statictext_ystart = new QLabel("y start", this);
    sh_box_y_coord_1 = new QLineEdit(this);
    QLabel *sh_box_statictext_ystop = new QLabel("y stop", this);
    sh_box_y_coord_2 = new QLineEdit(this);
    QLabel *sh_box_statictext_zstart = new QLabel("z start", this);
    sh_box_z_coord_1 = new QLineEdit(this);
    QLabel *sh_box_statictext_zstop = new QLabel("z stop", this);
    sh_box_z_coord_2 = new QLineEdit(this);
    QLabel *sh_box_statictext_material = new QLabel("material", this);
    sh_box_material = new QComboBox(this);
    QLabel *sh_box_statictext_placeholder = new QLabel("", this);

    connect(sh_box_name, SIGNAL(editingFinished()), this, SLOT(OnSetShapeTypeLayout()));

    grid_layout_shape_box->addWidget(sh_box_statictext_name, 0, 0, Qt::AlignLeft);
    grid_layout_shape_box->addWidget(sh_box_statictext_priority, 1, 0, Qt::AlignLeft);
    grid_layout_shape_box->addWidget(sh_box_statictext_xstart, 2, 0, Qt::AlignLeft);
    grid_layout_shape_box->addWidget(sh_box_statictext_xstop, 3, 0, Qt::AlignLeft);
    grid_layout_shape_box->addWidget(sh_box_statictext_ystart, 4, 0, Qt::AlignLeft);
    grid_layout_shape_box->addWidget(sh_box_statictext_ystop, 5, 0, Qt::AlignLeft);
    grid_layout_shape_box->addWidget(sh_box_statictext_zstart, 6, 0, Qt::AlignLeft);
    grid_layout_shape_box->addWidget(sh_box_statictext_zstop, 7, 0, Qt::AlignLeft);
    grid_layout_shape_box->addWidget(sh_box_statictext_material, 8, 0, Qt::AlignLeft);
    grid_layout_shape_box->addWidget(sh_box_statictext_placeholder, 9, 0, Qt::AlignLeft);

    grid_layout_shape_box->addWidget(sh_box_name, 0, 1, Qt::AlignLeft);
    grid_layout_shape_box->addWidget(sh_box_priority, 1, 1, Qt::AlignLeft);
    grid_layout_shape_box->addWidget(sh_box_x_coord_1, 2, 1, Qt::AlignLeft);
    grid_layout_shape_box->addWidget(sh_box_x_coord_2, 3, 1, Qt::AlignLeft);
    grid_layout_shape_box->addWidget(sh_box_y_coord_1, 4, 1, Qt::AlignLeft);
    grid_layout_shape_box->addWidget(sh_box_y_coord_2, 5, 1, Qt::AlignLeft);
    grid_layout_shape_box->addWidget(sh_box_z_coord_1, 6, 1, Qt::AlignLeft);
    grid_layout_shape_box->addWidget(sh_box_z_coord_2, 7, 1, Qt::AlignLeft);
    grid_layout_shape_box->addWidget(sh_box_material, 8, 1, Qt::AlignLeft);

    groupbox_box_settings->setLayout(grid_layout_shape_box);
}

void PageGeometry::ShapeCylinderSettings(void)
{
    groupbox_cylinder_settings = new QGroupBox(tr("Cylinder settings"));
    QGridLayout *grid_layout_shape_cylinder = new QGridLayout;

    QLabel *sh_cylinder_statictext_name = new QLabel("name", this);
    sh_cylinder_name = new QLineEdit(this);
    QLabel *sh_cylinder_statictext_priority = new QLabel("priority", this);
    sh_cylinder_priority = new QLineEdit(this);
    QLabel *sh_cylinder_statictext_xstart = new QLabel("x start", this);
    sh_cylinder_x_coord_1 = new QLineEdit(this);
    QLabel *sh_cylinder_statictext_xstop = new QLabel("x stop", this);
    sh_cylinder_x_coord_2 = new QLineEdit(this);
    QLabel *sh_cylinder_statictext_ystart = new QLabel("y start", this);
    sh_cylinder_y_coord_1 = new QLineEdit(this);
    QLabel *sh_cylinder_statictext_ystop = new QLabel("y stop", this);
    sh_cylinder_y_coord_2 = new QLineEdit(this);
    QLabel *sh_cylinder_statictext_zstart = new QLabel("z start", this);
    sh_cylinder_z_coord_1 = new QLineEdit(this);
    QLabel *sh_cylinder_statictext_zstop = new QLabel("z stop", this);
    sh_cylinder_z_coord_2 = new QLineEdit(this);
    QLabel *sh_cylinder_statictext_radius = new QLabel("radius", this);
    sh_cylinder_radius = new QLineEdit(this);
    QLabel *sh_cylinder_statictext_material = new QLabel("material", this);
    sh_cylinder_material = new QComboBox(this);

    connect(sh_cylinder_name, SIGNAL(editingFinished()), this, SLOT(OnSetShapeTypeLayout()));

    grid_layout_shape_cylinder->addWidget(sh_cylinder_statictext_name, 0, 0, Qt::AlignLeft);
    grid_layout_shape_cylinder->addWidget(sh_cylinder_statictext_priority, 1, 0, Qt::AlignLeft);
    grid_layout_shape_cylinder->addWidget(sh_cylinder_statictext_xstart, 2, 0, Qt::AlignLeft);
    grid_layout_shape_cylinder->addWidget(sh_cylinder_statictext_xstop, 3, 0, Qt::AlignLeft);
    grid_layout_shape_cylinder->addWidget(sh_cylinder_statictext_ystart, 4, 0, Qt::AlignLeft);
    grid_layout_shape_cylinder->addWidget(sh_cylinder_statictext_ystop, 5, 0, Qt::AlignLeft);
    grid_layout_shape_cylinder->addWidget(sh_cylinder_statictext_zstart, 6, 0, Qt::AlignLeft);
    grid_layout_shape_cylinder->addWidget(sh_cylinder_statictext_zstop, 7, 0, Qt::AlignLeft);
    grid_layout_shape_cylinder->addWidget(sh_cylinder_statictext_radius, 8, 0, Qt::AlignLeft);
    grid_layout_shape_cylinder->addWidget(sh_cylinder_statictext_material, 9, 0, Qt::AlignLeft);

    grid_layout_shape_cylinder->addWidget(sh_cylinder_name, 0, 1, Qt::AlignLeft);
    grid_layout_shape_cylinder->addWidget(sh_cylinder_priority, 1, 1, Qt::AlignLeft);
    grid_layout_shape_cylinder->addWidget(sh_cylinder_x_coord_1, 2, 1, Qt::AlignLeft);
    grid_layout_shape_cylinder->addWidget(sh_cylinder_x_coord_2, 3, 1, Qt::AlignLeft);
    grid_layout_shape_cylinder->addWidget(sh_cylinder_y_coord_1, 4, 1, Qt::AlignLeft);
    grid_layout_shape_cylinder->addWidget(sh_cylinder_y_coord_2, 5, 1, Qt::AlignLeft);
    grid_layout_shape_cylinder->addWidget(sh_cylinder_z_coord_1, 6, 1, Qt::AlignLeft);
    grid_layout_shape_cylinder->addWidget(sh_cylinder_z_coord_2, 7, 1, Qt::AlignLeft);
    grid_layout_shape_cylinder->addWidget(sh_cylinder_radius, 8, 1, Qt::AlignLeft);
    grid_layout_shape_cylinder->addWidget(sh_cylinder_material, 9, 1, Qt::AlignLeft);

    groupbox_cylinder_settings->setLayout(grid_layout_shape_cylinder);
}

void PageGeometry::OnAddOrChangeShape(void) //adding new shape to list and viewer, changing them if shape with the same name already exist
{
    if(rad_but_type_box->isChecked())   //do this for selected type of shape
    {
        shape_box_parameters *shape_tmp_ptr = new shape_box_parameters; //object that will be filled with parameters from user input controls and then added to list (after casting)
        shape_tmp_ptr->name = sh_box_name->text();
        shape_tmp_ptr->type = "box";
        shape_tmp_ptr->priority = sh_box_priority->text();
        shape_tmp_ptr->x_coord_1 = sh_box_x_coord_1->text();
        shape_tmp_ptr->x_coord_2 = sh_box_x_coord_2->text();
        shape_tmp_ptr->y_coord_1 = sh_box_y_coord_1->text();
        shape_tmp_ptr->y_coord_2 = sh_box_y_coord_2->text();
        shape_tmp_ptr->z_coord_1 = sh_box_z_coord_1->text();
        shape_tmp_ptr->z_coord_2 = sh_box_z_coord_2->text();
        shape_tmp_ptr->material = sh_box_material->currentText();

        if(!shape_tmp_ptr->name.isEmpty())
        {
            if(shapes_param_list_ptr->empty())  //add shape if list is empty
            {
                shape_tmp_ptr->id = id_incremental; //set id (should be the same as in QCSXCAD)
                shapes_param_list_ptr->push_back(shape_tmp_ptr);    //add shape to the list in the wizard
                shapes_list_widget->addItem(shapes_param_list_ptr->at(shapes_param_list_ptr->size()-1)->name);    //add shape to the list widget
                shapes_list_widget->setCurrentRow(shapes_list_widget->count()-1);
                UploadShapesToViewer(true); //and add it to the AppQCSXCAD
                ++id_incremental;    //if shape is added then ID is incremented, this is to be able to identify primitives already added to QCSXCAD
//                delete shape_tmp_ptr;
            }
            else if(shapes_param_list_ptr->at(shapes_list_widget->currentRow())->name != shape_tmp_ptr->name)   //add if list is not empty and it's a new one (different name)
            {
                shape_tmp_ptr->id = id_incremental;
                shapes_param_list_ptr->push_back(shape_tmp_ptr);
                shapes_list_widget->addItem(shapes_param_list_ptr->at(shapes_param_list_ptr->size()-1)->name);
                shapes_list_widget->setCurrentRow(shapes_list_widget->count()-1);
                UploadShapesToViewer(true);
                ++id_incremental;
//                delete shape_tmp_ptr;
            }
            else if(shapes_param_list_ptr->at(shapes_list_widget->currentRow())->name == shape_tmp_ptr->name)   //if name set by the used is the same as present on the list widget then update the shape
            {
                shape_tmp_ptr->id = shapes_param_list_ptr->at(shapes_list_widget->currentRow())->id; //set the same ID as before
                shapes_param_list_ptr->replace(shapes_list_widget->currentRow(), shape_tmp_ptr);
                UploadShapesToViewer(false);    //false means the shape is not new and should be edited, not added
//                delete shape_tmp_ptr;
            }
        }
    }
    else if(rad_but_type_cylinder->isChecked())
    {
        shape_cylinder_parameters *shape_tmp_ptr = new shape_cylinder_parameters;
        shape_tmp_ptr->name = sh_cylinder_name->text();
        shape_tmp_ptr->type = "cylinder";
        shape_tmp_ptr->priority = sh_cylinder_priority->text();
        shape_tmp_ptr->x_coord_1 = sh_cylinder_x_coord_1->text();
        shape_tmp_ptr->x_coord_2 = sh_cylinder_x_coord_2->text();
        shape_tmp_ptr->y_coord_1 = sh_cylinder_y_coord_1->text();
        shape_tmp_ptr->y_coord_2 = sh_cylinder_y_coord_2->text();
        shape_tmp_ptr->z_coord_1 = sh_cylinder_z_coord_1->text();
        shape_tmp_ptr->z_coord_2 = sh_cylinder_z_coord_2->text();
        shape_tmp_ptr->radius = sh_cylinder_radius->text();
        shape_tmp_ptr->material = sh_cylinder_material->currentText();

        if(!shape_tmp_ptr->name.isEmpty())
        {
            if(shapes_param_list_ptr->empty())
            {
                shapes_param_list_ptr->push_back(shape_tmp_ptr);
                shapes_list_widget->addItem(shapes_param_list_ptr->at(shapes_param_list_ptr->size()-1)->name);
                shapes_list_widget->setCurrentRow(shapes_list_widget->count()-1);
                UploadShapesToViewer(true);
//                delete shape_tmp_ptr;
            }
            else if(shapes_param_list_ptr->at(shapes_list_widget->currentRow())->name != shape_tmp_ptr->name)
            {
                shapes_param_list_ptr->push_back(shape_tmp_ptr);
                shapes_list_widget->addItem(shapes_param_list_ptr->at(shapes_param_list_ptr->size()-1)->name);
                shapes_list_widget->setCurrentRow(shapes_list_widget->count()-1);
                UploadShapesToViewer(true);
//                delete shape_tmp_ptr;
            }
            else if(shapes_param_list_ptr->at(shapes_list_widget->currentRow())->name == shape_tmp_ptr->name)
            {
                shapes_param_list_ptr->replace(shapes_list_widget->currentRow(), shape_tmp_ptr);
                UploadShapesToViewer(true);
//                delete shape_tmp_ptr;
            }
        }
    }
}



void PageGeometry::OnRemoveShape(void)
{
    if(!shapes_param_list_ptr->empty())
    {
        shape_parameters *shape_to_del = shapes_param_list_ptr->at(shapes_list_widget->currentRow());

        shapes_param_list_ptr->remove(shapes_list_widget->currentRow());
        shapes_list_widget->takeItem(shapes_list_widget->currentRow());

        delete shape_to_del;    //TODO FIXME i dont know if it's the right way to delete shape item created by "new" in OnAddOrChangeShape
    }
}



void PageGeometry::OnGetSelectedShape(QListWidgetItem* item)
{
    shape_parameters *shape_tmp_ptr;
    shape_tmp_ptr = shapes_param_list_ptr->at(shapes_list_widget->currentRow());

    if(!QString::compare(shape_tmp_ptr->type, "box"))
    {
        shape_box_parameters *shape_box_tmp = (shape_box_parameters *)(shape_tmp_ptr);
        rad_but_type_box->setChecked(true);
        sh_box_name->setText(shape_box_tmp->name);
        sh_box_priority->setText(shape_box_tmp->priority);
        sh_box_x_coord_1->setText(shape_box_tmp->x_coord_1);
        sh_box_x_coord_2->setText(shape_box_tmp->x_coord_2);
        sh_box_y_coord_1->setText(shape_box_tmp->y_coord_1);
        sh_box_y_coord_2->setText(shape_box_tmp->y_coord_2);
        sh_box_z_coord_1->setText(shape_box_tmp->z_coord_1);
        sh_box_z_coord_2->setText(shape_box_tmp->z_coord_2);
        sh_box_material->setCurrentIndex(sh_box_material->findText(shape_box_tmp->material));
    }
    else if(!QString::compare(shape_tmp_ptr->type, "cylinder"))
    {
        shape_cylinder_parameters *shape_cylinder_tmp = (shape_cylinder_parameters *)(shape_tmp_ptr);
        rad_but_type_cylinder->setChecked(true);
        sh_cylinder_name->setText(shape_cylinder_tmp->name);
        sh_cylinder_priority->setText(shape_cylinder_tmp->priority);
        sh_cylinder_x_coord_1->setText(shape_cylinder_tmp->x_coord_1);
        sh_cylinder_x_coord_2->setText(shape_cylinder_tmp->x_coord_2);
        sh_cylinder_y_coord_1->setText(shape_cylinder_tmp->y_coord_1);
        sh_cylinder_y_coord_2->setText(shape_cylinder_tmp->y_coord_2);
        sh_cylinder_z_coord_1->setText(shape_cylinder_tmp->z_coord_1);
        sh_cylinder_z_coord_2->setText(shape_cylinder_tmp->z_coord_2);
        sh_cylinder_radius->setText(shape_cylinder_tmp->radius);
        sh_cylinder_material->setCurrentIndex(sh_cylinder_material->findText(shape_cylinder_tmp->material));
    }

    OnSetShapeTypeLayout();
}


void PageGeometry::OnSetShapeTypeLayout(void)   //called to change layout according to selection of shape type and to select proper shape on the list (according to name, to prevent adding more items with the same name)
{
    if(rad_but_type_box->isChecked())
    {
        stackedLayout->setCurrentIndex(0);
        for(int i = 0 ; i < shapes_list_widget->count(); ++i)
            if(shapes_list_widget->item(i)->text() == sh_box_name->text())
                shapes_list_widget->setCurrentRow(i);
    }
    else if(rad_but_type_cylinder->isChecked())
    {
        stackedLayout->setCurrentIndex(1);
        for(int i = 0 ; i < shapes_list_widget->count(); ++i)
            if(shapes_list_widget->item(i)->text() == sh_cylinder_name->text())
                shapes_list_widget->setCurrentRow(i);
    }
}


void PageGeometry::initializePage() //load all materials, to be accessible to select for shapes
{
    sh_box_material->clear();
    sh_cylinder_material->clear();

    for (int i = 0; i < wizardsparent_tmp->GetQtyProperties(); ++i)
    {
        QString str;
        CSProperties *prop = wizardsparent_tmp->GetProperty(i);
        str=QString(prop->GetName().c_str());

        sh_box_material->addItem(str);  //add to all primitives type (could be avoided if material were not in QStackedLayout)
        sh_cylinder_material->addItem(str);
    }
}
